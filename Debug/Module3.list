
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008210  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080083a8  080083a8  000183a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083ec  080083ec  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  080083ec  080083ec  000183ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083f4  080083f4  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083f4  080083f4  000183f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083f8  080083f8  000183f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  080083fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  200000c0  080084b8  000200c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  080084b8  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ce4  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002067  00000000  00000000  00030dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00032e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00033df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f1a  00000000  00000000  00034d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011523  00000000  00000000  0004bc42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091aba  00000000  00000000  0005d165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eec1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a18  00000000  00000000  000eec74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000c0 	.word	0x200000c0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008390 	.word	0x08008390

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000c4 	.word	0x200000c4
 80001d4:	08008390 	.word	0x08008390

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_uldivmod>:
 8000d40:	b953      	cbnz	r3, 8000d58 <__aeabi_uldivmod+0x18>
 8000d42:	b94a      	cbnz	r2, 8000d58 <__aeabi_uldivmod+0x18>
 8000d44:	2900      	cmp	r1, #0
 8000d46:	bf08      	it	eq
 8000d48:	2800      	cmpeq	r0, #0
 8000d4a:	bf1c      	itt	ne
 8000d4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d50:	f04f 30ff 	movne.w	r0, #4294967295
 8000d54:	f000 b96e 	b.w	8001034 <__aeabi_idiv0>
 8000d58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d60:	f000 f806 	bl	8000d70 <__udivmoddi4>
 8000d64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6c:	b004      	add	sp, #16
 8000d6e:	4770      	bx	lr

08000d70 <__udivmoddi4>:
 8000d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d74:	9d08      	ldr	r5, [sp, #32]
 8000d76:	4604      	mov	r4, r0
 8000d78:	468c      	mov	ip, r1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f040 8083 	bne.w	8000e86 <__udivmoddi4+0x116>
 8000d80:	428a      	cmp	r2, r1
 8000d82:	4617      	mov	r7, r2
 8000d84:	d947      	bls.n	8000e16 <__udivmoddi4+0xa6>
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	b142      	cbz	r2, 8000d9e <__udivmoddi4+0x2e>
 8000d8c:	f1c2 0020 	rsb	r0, r2, #32
 8000d90:	fa24 f000 	lsr.w	r0, r4, r0
 8000d94:	4091      	lsls	r1, r2
 8000d96:	4097      	lsls	r7, r2
 8000d98:	ea40 0c01 	orr.w	ip, r0, r1
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da2:	0c23      	lsrs	r3, r4, #16
 8000da4:	fbbc f6f8 	udiv	r6, ip, r8
 8000da8:	fa1f fe87 	uxth.w	lr, r7
 8000dac:	fb08 c116 	mls	r1, r8, r6, ip
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f10e 	mul.w	r1, r6, lr
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x60>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc2:	f080 8119 	bcs.w	8000ff8 <__udivmoddi4+0x288>
 8000dc6:	4299      	cmp	r1, r3
 8000dc8:	f240 8116 	bls.w	8000ff8 <__udivmoddi4+0x288>
 8000dcc:	3e02      	subs	r6, #2
 8000dce:	443b      	add	r3, r7
 8000dd0:	1a5b      	subs	r3, r3, r1
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000ddc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	45a6      	cmp	lr, r4
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x8c>
 8000de8:	193c      	adds	r4, r7, r4
 8000dea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dee:	f080 8105 	bcs.w	8000ffc <__udivmoddi4+0x28c>
 8000df2:	45a6      	cmp	lr, r4
 8000df4:	f240 8102 	bls.w	8000ffc <__udivmoddi4+0x28c>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	443c      	add	r4, r7
 8000dfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e00:	eba4 040e 	sub.w	r4, r4, lr
 8000e04:	2600      	movs	r6, #0
 8000e06:	b11d      	cbz	r5, 8000e10 <__udivmoddi4+0xa0>
 8000e08:	40d4      	lsrs	r4, r2
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xaa>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d150      	bne.n	8000ec4 <__udivmoddi4+0x154>
 8000e22:	1bcb      	subs	r3, r1, r7
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	2601      	movs	r6, #1
 8000e2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e32:	0c21      	lsrs	r1, r4, #16
 8000e34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000e40:	428b      	cmp	r3, r1
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0xe4>
 8000e44:	1879      	adds	r1, r7, r1
 8000e46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0xe2>
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	f200 80e9 	bhi.w	8001024 <__udivmoddi4+0x2b4>
 8000e52:	4684      	mov	ip, r0
 8000e54:	1ac9      	subs	r1, r1, r3
 8000e56:	b2a3      	uxth	r3, r4
 8000e58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e64:	fb08 f800 	mul.w	r8, r8, r0
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x10c>
 8000e6c:	193c      	adds	r4, r7, r4
 8000e6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x10a>
 8000e74:	45a0      	cmp	r8, r4
 8000e76:	f200 80d9 	bhi.w	800102c <__udivmoddi4+0x2bc>
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	eba4 0408 	sub.w	r4, r4, r8
 8000e80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e84:	e7bf      	b.n	8000e06 <__udivmoddi4+0x96>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d909      	bls.n	8000e9e <__udivmoddi4+0x12e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	f000 80b1 	beq.w	8000ff2 <__udivmoddi4+0x282>
 8000e90:	2600      	movs	r6, #0
 8000e92:	e9c5 0100 	strd	r0, r1, [r5]
 8000e96:	4630      	mov	r0, r6
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	fab3 f683 	clz	r6, r3
 8000ea2:	2e00      	cmp	r6, #0
 8000ea4:	d14a      	bne.n	8000f3c <__udivmoddi4+0x1cc>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d302      	bcc.n	8000eb0 <__udivmoddi4+0x140>
 8000eaa:	4282      	cmp	r2, r0
 8000eac:	f200 80b8 	bhi.w	8001020 <__udivmoddi4+0x2b0>
 8000eb0:	1a84      	subs	r4, r0, r2
 8000eb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	468c      	mov	ip, r1
 8000eba:	2d00      	cmp	r5, #0
 8000ebc:	d0a8      	beq.n	8000e10 <__udivmoddi4+0xa0>
 8000ebe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0xa0>
 8000ec4:	f1c2 0320 	rsb	r3, r2, #32
 8000ec8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ecc:	4097      	lsls	r7, r2
 8000ece:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed6:	40d9      	lsrs	r1, r3
 8000ed8:	4330      	orrs	r0, r6
 8000eda:	0c03      	lsrs	r3, r0, #16
 8000edc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee0:	fa1f f887 	uxth.w	r8, r7
 8000ee4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ee8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eec:	fb06 f108 	mul.w	r1, r6, r8
 8000ef0:	4299      	cmp	r1, r3
 8000ef2:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef6:	d909      	bls.n	8000f0c <__udivmoddi4+0x19c>
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	f106 3cff 	add.w	ip, r6, #4294967295
 8000efe:	f080 808d 	bcs.w	800101c <__udivmoddi4+0x2ac>
 8000f02:	4299      	cmp	r1, r3
 8000f04:	f240 808a 	bls.w	800101c <__udivmoddi4+0x2ac>
 8000f08:	3e02      	subs	r6, #2
 8000f0a:	443b      	add	r3, r7
 8000f0c:	1a5b      	subs	r3, r3, r1
 8000f0e:	b281      	uxth	r1, r0
 8000f10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1c:	fb00 f308 	mul.w	r3, r0, r8
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x1c4>
 8000f24:	1879      	adds	r1, r7, r1
 8000f26:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2a:	d273      	bcs.n	8001014 <__udivmoddi4+0x2a4>
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d971      	bls.n	8001014 <__udivmoddi4+0x2a4>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4439      	add	r1, r7
 8000f34:	1acb      	subs	r3, r1, r3
 8000f36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3a:	e778      	b.n	8000e2e <__udivmoddi4+0xbe>
 8000f3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000f40:	fa03 f406 	lsl.w	r4, r3, r6
 8000f44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f48:	431c      	orrs	r4, r3
 8000f4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000f52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5a:	431f      	orrs	r7, r3
 8000f5c:	0c3b      	lsrs	r3, r7, #16
 8000f5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f62:	fa1f f884 	uxth.w	r8, r4
 8000f66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000f72:	458a      	cmp	sl, r1
 8000f74:	fa02 f206 	lsl.w	r2, r2, r6
 8000f78:	fa00 f306 	lsl.w	r3, r0, r6
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x220>
 8000f7e:	1861      	adds	r1, r4, r1
 8000f80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f84:	d248      	bcs.n	8001018 <__udivmoddi4+0x2a8>
 8000f86:	458a      	cmp	sl, r1
 8000f88:	d946      	bls.n	8001018 <__udivmoddi4+0x2a8>
 8000f8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000f8e:	4421      	add	r1, r4
 8000f90:	eba1 010a 	sub.w	r1, r1, sl
 8000f94:	b2bf      	uxth	r7, r7
 8000f96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa2:	fb00 f808 	mul.w	r8, r0, r8
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d907      	bls.n	8000fba <__udivmoddi4+0x24a>
 8000faa:	19e7      	adds	r7, r4, r7
 8000fac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb0:	d22e      	bcs.n	8001010 <__udivmoddi4+0x2a0>
 8000fb2:	45b8      	cmp	r8, r7
 8000fb4:	d92c      	bls.n	8001010 <__udivmoddi4+0x2a0>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4427      	add	r7, r4
 8000fba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fbe:	eba7 0708 	sub.w	r7, r7, r8
 8000fc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000fc6:	454f      	cmp	r7, r9
 8000fc8:	46c6      	mov	lr, r8
 8000fca:	4649      	mov	r1, r9
 8000fcc:	d31a      	bcc.n	8001004 <__udivmoddi4+0x294>
 8000fce:	d017      	beq.n	8001000 <__udivmoddi4+0x290>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x27a>
 8000fd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000fd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000fda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fde:	40f2      	lsrs	r2, r6
 8000fe0:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe4:	40f7      	lsrs	r7, r6
 8000fe6:	e9c5 2700 	strd	r2, r7, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	462e      	mov	r6, r5
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	e70b      	b.n	8000e10 <__udivmoddi4+0xa0>
 8000ff8:	4606      	mov	r6, r0
 8000ffa:	e6e9      	b.n	8000dd0 <__udivmoddi4+0x60>
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	e6fd      	b.n	8000dfc <__udivmoddi4+0x8c>
 8001000:	4543      	cmp	r3, r8
 8001002:	d2e5      	bcs.n	8000fd0 <__udivmoddi4+0x260>
 8001004:	ebb8 0e02 	subs.w	lr, r8, r2
 8001008:	eb69 0104 	sbc.w	r1, r9, r4
 800100c:	3801      	subs	r0, #1
 800100e:	e7df      	b.n	8000fd0 <__udivmoddi4+0x260>
 8001010:	4608      	mov	r0, r1
 8001012:	e7d2      	b.n	8000fba <__udivmoddi4+0x24a>
 8001014:	4660      	mov	r0, ip
 8001016:	e78d      	b.n	8000f34 <__udivmoddi4+0x1c4>
 8001018:	4681      	mov	r9, r0
 800101a:	e7b9      	b.n	8000f90 <__udivmoddi4+0x220>
 800101c:	4666      	mov	r6, ip
 800101e:	e775      	b.n	8000f0c <__udivmoddi4+0x19c>
 8001020:	4630      	mov	r0, r6
 8001022:	e74a      	b.n	8000eba <__udivmoddi4+0x14a>
 8001024:	f1ac 0c02 	sub.w	ip, ip, #2
 8001028:	4439      	add	r1, r7
 800102a:	e713      	b.n	8000e54 <__udivmoddi4+0xe4>
 800102c:	3802      	subs	r0, #2
 800102e:	443c      	add	r4, r7
 8001030:	e724      	b.n	8000e7c <__udivmoddi4+0x10c>
 8001032:	bf00      	nop

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800103c:	ed2d 8b02 	vpush	{d8}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001044:	f002 fd52 	bl	8003aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001048:	f000 f99c 	bl	8001384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104c:	f000 fbf2 	bl	8001834 <MX_GPIO_Init>
  MX_DMA_Init();
 8001050:	f000 fbc8 	bl	80017e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001054:	f000 fb9a 	bl	800178c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001058:	f000 fa2a 	bl	80014b0 <MX_TIM1_Init>
  MX_TIM3_Init();
 800105c:	f000 fad2 	bl	8001604 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001060:	f000 fa7e 	bl	8001560 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001064:	f000 f9f6 	bl	8001454 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001068:	f000 fb42 	bl	80016f0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);					//micros()
 800106c:	48a6      	ldr	r0, [pc, #664]	; (8001308 <main+0x2d0>)
 800106e:	f004 fc77 	bl	8005960 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);   //Start reading encoder
 8001072:	213c      	movs	r1, #60	; 0x3c
 8001074:	48a5      	ldr	r0, [pc, #660]	; (800130c <main+0x2d4>)
 8001076:	f004 fe85 	bl	8005d84 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim3);						//Start TIM3
 800107a:	48a5      	ldr	r0, [pc, #660]	; (8001310 <main+0x2d8>)
 800107c:	f004 fc16 	bl	80058ac <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);			//Start PWM TIM3
 8001080:	210c      	movs	r1, #12
 8001082:	48a3      	ldr	r0, [pc, #652]	; (8001310 <main+0x2d8>)
 8001084:	f004 fd28 	bl	8005ad8 <HAL_TIM_PWM_Start>

  UART2.huart = &huart2;
 8001088:	4ba2      	ldr	r3, [pc, #648]	; (8001314 <main+0x2dc>)
 800108a:	4aa3      	ldr	r2, [pc, #652]	; (8001318 <main+0x2e0>)
 800108c:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 800108e:	4ba1      	ldr	r3, [pc, #644]	; (8001314 <main+0x2dc>)
 8001090:	22ff      	movs	r2, #255	; 0xff
 8001092:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8001094:	4b9f      	ldr	r3, [pc, #636]	; (8001314 <main+0x2dc>)
 8001096:	22ff      	movs	r2, #255	; 0xff
 8001098:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 800109a:	489e      	ldr	r0, [pc, #632]	; (8001314 <main+0x2dc>)
 800109c:	f001 fd08 	bl	8002ab0 <UARTInit>
  UARTResetStart(&UART2);
 80010a0:	489c      	ldr	r0, [pc, #624]	; (8001314 <main+0x2dc>)
 80010a2:	f001 fd2d 	bl	8002b00 <UARTResetStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	int16_t inputChar = UARTReadChar(&UART2);
 80010a6:	489b      	ldr	r0, [pc, #620]	; (8001314 <main+0x2dc>)
 80010a8:	f001 fd4e 	bl	8002b48 <UARTReadChar>
 80010ac:	4603      	mov	r3, r0
 80010ae:	80bb      	strh	r3, [r7, #4]
	  	if (inputChar != -1)
 80010b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b8:	d00b      	beq.n	80010d2 <main+0x9a>
	  	{
	  		len+=1;
 80010ba:	4b98      	ldr	r3, [pc, #608]	; (800131c <main+0x2e4>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b96      	ldr	r3, [pc, #600]	; (800131c <main+0x2e4>)
 80010c4:	701a      	strb	r2, [r3, #0]
	  		UART_Protocol(&UART2, inputChar);
 80010c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010ca:	4619      	mov	r1, r3
 80010cc:	4891      	ldr	r0, [pc, #580]	; (8001314 <main+0x2dc>)
 80010ce:	f001 fdfd 	bl	8002ccc <UART_Protocol>
	  	}

	  	if (micros() - Time_Measure_Stamp >= 100) //measurement
 80010d2:	f002 fa13 	bl	80034fc <micros>
 80010d6:	4b92      	ldr	r3, [pc, #584]	; (8001320 <main+0x2e8>)
 80010d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010dc:	1a84      	subs	r4, r0, r2
 80010de:	eb61 0503 	sbc.w	r5, r1, r3
 80010e2:	2d00      	cmp	r5, #0
 80010e4:	bf08      	it	eq
 80010e6:	2c64      	cmpeq	r4, #100	; 0x64
 80010e8:	d36a      	bcc.n	80011c0 <main+0x188>
		{
	  		Time_Measure_Stamp = micros();
 80010ea:	f002 fa07 	bl	80034fc <micros>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	498b      	ldr	r1, [pc, #556]	; (8001320 <main+0x2e8>)
 80010f4:	e9c1 2300 	strd	r2, r3, [r1]
	  		Velocity_Read_Encoder = (Velocity_Read_Encoder*9999 + Encoder_Velocity_Update())/(float)10000; //pulse per sec
 80010f8:	4b8a      	ldr	r3, [pc, #552]	; (8001324 <main+0x2ec>)
 80010fa:	edd3 7a00 	vldr	s15, [r3]
 80010fe:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001328 <main+0x2f0>
 8001102:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001106:	f000 fc3b 	bl	8001980 <Encoder_Velocity_Update>
 800110a:	eef0 7a40 	vmov.f32	s15, s0
 800110e:	ee38 7a27 	vadd.f32	s14, s16, s15
 8001112:	eddf 6a86 	vldr	s13, [pc, #536]	; 800132c <main+0x2f4>
 8001116:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800111a:	4b82      	ldr	r3, [pc, #520]	; (8001324 <main+0x2ec>)
 800111c:	edc3 7a00 	vstr	s15, [r3]
//		  	Velocity_Read_Encoder = Encoder_Velocity_Update();
	  		Velocity_Now_RPM = (Velocity_Read_Encoder*60)/Encoder_Resolution;	//Convert Velocity_Read_Encoder (Encoder's velocity at the moment) to RPM
 8001120:	4b80      	ldr	r3, [pc, #512]	; (8001324 <main+0x2ec>)
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8001330 <main+0x2f8>
 800112a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800112e:	4b81      	ldr	r3, [pc, #516]	; (8001334 <main+0x2fc>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	4b7e      	ldr	r3, [pc, #504]	; (8001338 <main+0x300>)
 8001140:	edc3 7a00 	vstr	s15, [r3]
	  		Velocity_Now_Rad = (Velocity_Now_RPM*2*pi)/60;
 8001144:	4b7c      	ldr	r3, [pc, #496]	; (8001338 <main+0x300>)
 8001146:	edd3 7a00 	vldr	s15, [r3]
 800114a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800114e:	4b7b      	ldr	r3, [pc, #492]	; (800133c <main+0x304>)
 8001150:	edd3 7a00 	vldr	s15, [r3]
 8001154:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001158:	eddf 6a75 	vldr	s13, [pc, #468]	; 8001330 <main+0x2f8>
 800115c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001160:	4b77      	ldr	r3, [pc, #476]	; (8001340 <main+0x308>)
 8001162:	edc3 7a00 	vstr	s15, [r3]

	  		//read position
//		 	Position_Read_Encoder = htim1.Instance->CNT;
	  		Position_Read_Encoder = Encoder_Position_Update();
 8001166:	f000 fc5f 	bl	8001a28 <Encoder_Position_Update>
 800116a:	eef0 7a40 	vmov.f32	s15, s0
 800116e:	4b75      	ldr	r3, [pc, #468]	; (8001344 <main+0x30c>)
 8001170:	edc3 7a00 	vstr	s15, [r3]
	  		Position_Now_Rad = (Position_Read_Encoder*2*M_PI)/Encoder_Resolution;  //rad
 8001174:	4b73      	ldr	r3, [pc, #460]	; (8001344 <main+0x30c>)
 8001176:	edd3 7a00 	vldr	s15, [r3]
 800117a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800117e:	ee17 0a90 	vmov	r0, s15
 8001182:	f7ff f98d 	bl	80004a0 <__aeabi_f2d>
 8001186:	a35e      	add	r3, pc, #376	; (adr r3, 8001300 <main+0x2c8>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	f7ff f9e0 	bl	8000550 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4692      	mov	sl, r2
 8001196:	469b      	mov	fp, r3
 8001198:	4b66      	ldr	r3, [pc, #408]	; (8001334 <main+0x2fc>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f96d 	bl	800047c <__aeabi_i2d>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4650      	mov	r0, sl
 80011a8:	4659      	mov	r1, fp
 80011aa:	f7ff fafb 	bl	80007a4 <__aeabi_ddiv>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	f7ff fc65 	bl	8000a84 <__aeabi_d2f>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a62      	ldr	r2, [pc, #392]	; (8001348 <main+0x310>)
 80011be:	6013      	str	r3, [r2, #0]
		}

	  	if (micros() - Time_Sampling_Stamp >= 1000)	  //Control loop
 80011c0:	f002 f99c 	bl	80034fc <micros>
 80011c4:	4b61      	ldr	r3, [pc, #388]	; (800134c <main+0x314>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	ebb0 0802 	subs.w	r8, r0, r2
 80011ce:	eb61 0903 	sbc.w	r9, r1, r3
 80011d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d6:	f04f 0300 	mov.w	r3, #0
 80011da:	454b      	cmp	r3, r9
 80011dc:	bf08      	it	eq
 80011de:	4542      	cmpeq	r2, r8
 80011e0:	d22e      	bcs.n	8001240 <main+0x208>
	  	{
			PWM_Out_Pre = PWM_Out;
 80011e2:	4b5b      	ldr	r3, [pc, #364]	; (8001350 <main+0x318>)
 80011e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011e8:	4b5a      	ldr	r3, [pc, #360]	; (8001354 <main+0x31c>)
 80011ea:	801a      	strh	r2, [r3, #0]
			Time_Sampling_Stamp = micros();
 80011ec:	f002 f986 	bl	80034fc <micros>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4955      	ldr	r1, [pc, #340]	; (800134c <main+0x314>)
 80011f6:	e9c1 2300 	strd	r2, r3, [r1]

			//frang code set home
			Proximity[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 80011fa:	2102      	movs	r1, #2
 80011fc:	4856      	ldr	r0, [pc, #344]	; (8001358 <main+0x320>)
 80011fe:	f003 fba3 	bl	8004948 <HAL_GPIO_ReadPin>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	4b55      	ldr	r3, [pc, #340]	; (800135c <main+0x324>)
 8001208:	701a      	strb	r2, [r3, #0]
			if (set_home_finished == 0)
 800120a:	4b55      	ldr	r3, [pc, #340]	; (8001360 <main+0x328>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d102      	bne.n	8001218 <main+0x1e0>
			{
				Home_Setting();
 8001212:	f001 fabd 	bl	8002790 <Home_Setting>
 8001216:	e013      	b.n	8001240 <main+0x208>
			}
			else
			{
				if (GO == 1)
 8001218:	4b52      	ldr	r3, [pc, #328]	; (8001364 <main+0x32c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d10f      	bne.n	8001240 <main+0x208>
				{
					quintic();
 8001220:	f000 fc72 	bl	8001b08 <quintic>
					GO = 0;
 8001224:	4b4f      	ldr	r3, [pc, #316]	; (8001364 <main+0x32c>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
					Effector_On = 1;
 800122a:	4b4f      	ldr	r3, [pc, #316]	; (8001368 <main+0x330>)
 800122c:	2201      	movs	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]
					UARTTxWrite(&UART2, UART_Ack2, 2);
 8001230:	2202      	movs	r2, #2
 8001232:	494e      	ldr	r1, [pc, #312]	; (800136c <main+0x334>)
 8001234:	4837      	ldr	r0, [pc, #220]	; (8001314 <main+0x2dc>)
 8001236:	f001 fd01 	bl	8002c3c <UARTTxWrite>
					HAL_Delay(1);
 800123a:	2001      	movs	r0, #1
 800123c:	f002 fcc8 	bl	8003bd0 <HAL_Delay>
				}

			}
	  	}
		if (Effector_On)
 8001240:	4b49      	ldr	r3, [pc, #292]	; (8001368 <main+0x330>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	f43f af2e 	beq.w	80010a6 <main+0x6e>
		{
			HAL_I2C_Master_Transmit_IT(&hi2c1, Address, (uint8_t*)Regis_Open, 1);
 800124a:	4b49      	ldr	r3, [pc, #292]	; (8001370 <main+0x338>)
 800124c:	8819      	ldrh	r1, [r3, #0]
 800124e:	4b49      	ldr	r3, [pc, #292]	; (8001374 <main+0x33c>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	2301      	movs	r3, #1
 8001256:	4848      	ldr	r0, [pc, #288]	; (8001378 <main+0x340>)
 8001258:	f003 fd10 	bl	8004c7c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 800125c:	2005      	movs	r0, #5
 800125e:	f002 fcb7 	bl	8003bd0 <HAL_Delay>
			HAL_I2C_Master_Transmit_IT(&hi2c1, Address, (uint8_t*)Regis_Prepare, 1);
 8001262:	4b43      	ldr	r3, [pc, #268]	; (8001370 <main+0x338>)
 8001264:	8819      	ldrh	r1, [r3, #0]
 8001266:	4b45      	ldr	r3, [pc, #276]	; (800137c <main+0x344>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	2301      	movs	r3, #1
 800126e:	4842      	ldr	r0, [pc, #264]	; (8001378 <main+0x340>)
 8001270:	f003 fd04 	bl	8004c7c <HAL_I2C_Master_Transmit_IT>
			HAL_I2C_Master_Receive_IT(&hi2c1, Address, (uint8_t*)Regis_Read, 1);
 8001274:	4b3e      	ldr	r3, [pc, #248]	; (8001370 <main+0x338>)
 8001276:	8819      	ldrh	r1, [r3, #0]
 8001278:	4b41      	ldr	r3, [pc, #260]	; (8001380 <main+0x348>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	2301      	movs	r3, #1
 8001280:	483d      	ldr	r0, [pc, #244]	; (8001378 <main+0x340>)
 8001282:	f003 fda1 	bl	8004dc8 <HAL_I2C_Master_Receive_IT>
			uint8_t wait;
			if(Regis_Read == 0x78)
 8001286:	4b3e      	ldr	r3, [pc, #248]	; (8001380 <main+0x348>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	2b78      	cmp	r3, #120	; 0x78
 800128c:	d12d      	bne.n	80012ea <main+0x2b2>
			{
				Effector_On = 0;
 800128e:	4b36      	ldr	r3, [pc, #216]	; (8001368 <main+0x330>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
 8001294:	e707      	b.n	80010a6 <main+0x6e>
			}
			else
			{
				while (Regis_Read != 0x78)
				{
					if (Regis_Read == 0x12)
 8001296:	4b3a      	ldr	r3, [pc, #232]	; (8001380 <main+0x348>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	2b12      	cmp	r3, #18
 800129c:	d102      	bne.n	80012a4 <main+0x26c>
					{
						wait = 5;
 800129e:	2305      	movs	r3, #5
 80012a0:	71fb      	strb	r3, [r7, #7]
 80012a2:	e00c      	b.n	80012be <main+0x286>
					}
					else if (Regis_Read == 0x34)
 80012a4:	4b36      	ldr	r3, [pc, #216]	; (8001380 <main+0x348>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	2b34      	cmp	r3, #52	; 0x34
 80012aa:	d102      	bne.n	80012b2 <main+0x27a>
					{
						wait = 4;
 80012ac:	2304      	movs	r3, #4
 80012ae:	71fb      	strb	r3, [r7, #7]
 80012b0:	e005      	b.n	80012be <main+0x286>
					}
					else if (Regis_Read == 0x56)
 80012b2:	4b33      	ldr	r3, [pc, #204]	; (8001380 <main+0x348>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	2b56      	cmp	r3, #86	; 0x56
 80012b8:	d101      	bne.n	80012be <main+0x286>
					{
						wait = 1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	71fb      	strb	r3, [r7, #7]
					}
					HAL_Delay(wait);
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 fc85 	bl	8003bd0 <HAL_Delay>
					HAL_I2C_Master_Transmit_IT(&hi2c1, Address, Regis_Prepare, 1);
 80012c6:	4b2a      	ldr	r3, [pc, #168]	; (8001370 <main+0x338>)
 80012c8:	8819      	ldrh	r1, [r3, #0]
 80012ca:	4b2c      	ldr	r3, [pc, #176]	; (800137c <main+0x344>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	2301      	movs	r3, #1
 80012d2:	4829      	ldr	r0, [pc, #164]	; (8001378 <main+0x340>)
 80012d4:	f003 fcd2 	bl	8004c7c <HAL_I2C_Master_Transmit_IT>
					HAL_I2C_Master_Receive_IT(&hi2c1, Address, Regis_Read, 1);
 80012d8:	4b25      	ldr	r3, [pc, #148]	; (8001370 <main+0x338>)
 80012da:	8819      	ldrh	r1, [r3, #0]
 80012dc:	4b28      	ldr	r3, [pc, #160]	; (8001380 <main+0x348>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	2301      	movs	r3, #1
 80012e4:	4824      	ldr	r0, [pc, #144]	; (8001378 <main+0x340>)
 80012e6:	f003 fd6f 	bl	8004dc8 <HAL_I2C_Master_Receive_IT>
				while (Regis_Read != 0x78)
 80012ea:	4b25      	ldr	r3, [pc, #148]	; (8001380 <main+0x348>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	2b78      	cmp	r3, #120	; 0x78
 80012f0:	d1d1      	bne.n	8001296 <main+0x25e>
				}
				Effector_On = 0;
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <main+0x330>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
  {
 80012f8:	e6d5      	b.n	80010a6 <main+0x6e>
 80012fa:	bf00      	nop
 80012fc:	f3af 8000 	nop.w
 8001300:	54442d18 	.word	0x54442d18
 8001304:	400921fb 	.word	0x400921fb
 8001308:	20000434 	.word	0x20000434
 800130c:	200003e8 	.word	0x200003e8
 8001310:	2000033c 	.word	0x2000033c
 8001314:	200001ec 	.word	0x200001ec
 8001318:	2000047c 	.word	0x2000047c
 800131c:	200004c0 	.word	0x200004c0
 8001320:	200000f0 	.word	0x200000f0
 8001324:	200000fc 	.word	0x200000fc
 8001328:	461c3c00 	.word	0x461c3c00
 800132c:	461c4000 	.word	0x461c4000
 8001330:	42700000 	.word	0x42700000
 8001334:	20000000 	.word	0x20000000
 8001338:	20000100 	.word	0x20000100
 800133c:	20000004 	.word	0x20000004
 8001340:	20000104 	.word	0x20000104
 8001344:	2000010c 	.word	0x2000010c
 8001348:	20000110 	.word	0x20000110
 800134c:	200000e8 	.word	0x200000e8
 8001350:	20000108 	.word	0x20000108
 8001354:	2000010a 	.word	0x2000010a
 8001358:	40020000 	.word	0x40020000
 800135c:	20000384 	.word	0x20000384
 8001360:	200001dc 	.word	0x200001dc
 8001364:	200000f8 	.word	0x200000f8
 8001368:	200000dd 	.word	0x200000dd
 800136c:	2000003c 	.word	0x2000003c
 8001370:	20000040 	.word	0x20000040
 8001374:	20000042 	.word	0x20000042
 8001378:	200002e4 	.word	0x200002e4
 800137c:	20000044 	.word	0x20000044
 8001380:	2000020c 	.word	0x2000020c

08001384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b094      	sub	sp, #80	; 0x50
 8001388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138a:	f107 0320 	add.w	r3, r7, #32
 800138e:	2230      	movs	r2, #48	; 0x30
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f006 fb02 	bl	800799c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <SystemClock_Config+0xc8>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	4a26      	ldr	r2, [pc, #152]	; (800144c <SystemClock_Config+0xc8>)
 80013b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b6:	6413      	str	r3, [r2, #64]	; 0x40
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <SystemClock_Config+0xc8>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c4:	2300      	movs	r3, #0
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <SystemClock_Config+0xcc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a20      	ldr	r2, [pc, #128]	; (8001450 <SystemClock_Config+0xcc>)
 80013ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <SystemClock_Config+0xcc>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e0:	2302      	movs	r3, #2
 80013e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e4:	2301      	movs	r3, #1
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e8:	2310      	movs	r3, #16
 80013ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ec:	2302      	movs	r3, #2
 80013ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f0:	2300      	movs	r3, #0
 80013f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013f4:	2308      	movs	r3, #8
 80013f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80013f8:	2364      	movs	r3, #100	; 0x64
 80013fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013fc:	2302      	movs	r3, #2
 80013fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001400:	2304      	movs	r3, #4
 8001402:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001404:	f107 0320 	add.w	r3, r7, #32
 8001408:	4618      	mov	r0, r3
 800140a:	f003 fd8b 	bl	8004f24 <HAL_RCC_OscConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001414:	f002 f88c 	bl	8003530 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001418:	230f      	movs	r3, #15
 800141a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141c:	2302      	movs	r3, #2
 800141e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001428:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2103      	movs	r1, #3
 8001434:	4618      	mov	r0, r3
 8001436:	f003 ffed 	bl	8005414 <HAL_RCC_ClockConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001440:	f002 f876 	bl	8003530 <Error_Handler>
  }
}
 8001444:	bf00      	nop
 8001446:	3750      	adds	r7, #80	; 0x50
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	40007000 	.word	0x40007000

08001454 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <MX_I2C1_Init+0x50>)
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <MX_I2C1_Init+0x54>)
 800145c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001460:	4a12      	ldr	r2, [pc, #72]	; (80014ac <MX_I2C1_Init+0x58>)
 8001462:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_I2C1_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001476:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <MX_I2C1_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_I2C1_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001492:	f003 faaf 	bl	80049f4 <HAL_I2C_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800149c:	f002 f848 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200002e4 	.word	0x200002e4
 80014a8:	40005400 	.word	0x40005400
 80014ac:	000186a0 	.word	0x000186a0

080014b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	; 0x30
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	2224      	movs	r2, #36	; 0x24
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f006 fa6c 	bl	800799c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <MX_TIM1_Init+0xa8>)
 80014ce:	4a23      	ldr	r2, [pc, #140]	; (800155c <MX_TIM1_Init+0xac>)
 80014d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <MX_TIM1_Init+0xa8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <MX_TIM1_Init+0xa8>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8191;
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <MX_TIM1_Init+0xa8>)
 80014e0:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80014e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <MX_TIM1_Init+0xa8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <MX_TIM1_Init+0xa8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <MX_TIM1_Init+0xa8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014f8:	2303      	movs	r3, #3
 80014fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001500:	2301      	movs	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001510:	2301      	movs	r3, #1
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4619      	mov	r1, r3
 8001522:	480d      	ldr	r0, [pc, #52]	; (8001558 <MX_TIM1_Init+0xa8>)
 8001524:	f004 fb88 	bl	8005c38 <HAL_TIM_Encoder_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800152e:	f001 ffff 	bl	8003530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	; (8001558 <MX_TIM1_Init+0xa8>)
 8001540:	f005 fa2c 	bl	800699c <HAL_TIMEx_MasterConfigSynchronization>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800154a:	f001 fff1 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3730      	adds	r7, #48	; 0x30
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200003e8 	.word	0x200003e8
 800155c:	40010000 	.word	0x40010000

08001560 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001566:	f107 0308 	add.w	r3, r7, #8
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001574:	463b      	mov	r3, r7
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800157c:	4b20      	ldr	r3, [pc, #128]	; (8001600 <MX_TIM2_Init+0xa0>)
 800157e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001582:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <MX_TIM2_Init+0xa0>)
 8001586:	2263      	movs	r2, #99	; 0x63
 8001588:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <MX_TIM2_Init+0xa0>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_TIM2_Init+0xa0>)
 8001592:	f04f 32ff 	mov.w	r2, #4294967295
 8001596:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <MX_TIM2_Init+0xa0>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_TIM2_Init+0xa0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015a4:	4816      	ldr	r0, [pc, #88]	; (8001600 <MX_TIM2_Init+0xa0>)
 80015a6:	f004 f931 	bl	800580c <HAL_TIM_Base_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015b0:	f001 ffbe 	bl	8003530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	4619      	mov	r1, r3
 80015c0:	480f      	ldr	r0, [pc, #60]	; (8001600 <MX_TIM2_Init+0xa0>)
 80015c2:	f004 fe33 	bl	800622c <HAL_TIM_ConfigClockSource>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015cc:	f001 ffb0 	bl	8003530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d8:	463b      	mov	r3, r7
 80015da:	4619      	mov	r1, r3
 80015dc:	4808      	ldr	r0, [pc, #32]	; (8001600 <MX_TIM2_Init+0xa0>)
 80015de:	f005 f9dd 	bl	800699c <HAL_TIMEx_MasterConfigSynchronization>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015e8:	f001 ffa2 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <MX_TIM2_Init+0xa0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f06f 0201 	mvn.w	r2, #1
 80015f4:	611a      	str	r2, [r3, #16]

  /* USER CODE END TIM2_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000434 	.word	0x20000434

08001604 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08e      	sub	sp, #56	; 0x38
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	f107 0320 	add.w	r3, r7, #32
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
 8001630:	615a      	str	r2, [r3, #20]
 8001632:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001634:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <MX_TIM3_Init+0xe4>)
 8001636:	4a2d      	ldr	r2, [pc, #180]	; (80016ec <MX_TIM3_Init+0xe8>)
 8001638:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800163a:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <MX_TIM3_Init+0xe4>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <MX_TIM3_Init+0xe4>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001646:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <MX_TIM3_Init+0xe4>)
 8001648:	f242 7210 	movw	r2, #10000	; 0x2710
 800164c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164e:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <MX_TIM3_Init+0xe4>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <MX_TIM3_Init+0xe4>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800165a:	4823      	ldr	r0, [pc, #140]	; (80016e8 <MX_TIM3_Init+0xe4>)
 800165c:	f004 f8d6 	bl	800580c <HAL_TIM_Base_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001666:	f001 ff63 	bl	8003530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001670:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001674:	4619      	mov	r1, r3
 8001676:	481c      	ldr	r0, [pc, #112]	; (80016e8 <MX_TIM3_Init+0xe4>)
 8001678:	f004 fdd8 	bl	800622c <HAL_TIM_ConfigClockSource>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001682:	f001 ff55 	bl	8003530 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001686:	4818      	ldr	r0, [pc, #96]	; (80016e8 <MX_TIM3_Init+0xe4>)
 8001688:	f004 f9cc 	bl	8005a24 <HAL_TIM_PWM_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001692:	f001 ff4d 	bl	8003530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800169e:	f107 0320 	add.w	r3, r7, #32
 80016a2:	4619      	mov	r1, r3
 80016a4:	4810      	ldr	r0, [pc, #64]	; (80016e8 <MX_TIM3_Init+0xe4>)
 80016a6:	f005 f979 	bl	800699c <HAL_TIMEx_MasterConfigSynchronization>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80016b0:	f001 ff3e 	bl	8003530 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b4:	2360      	movs	r3, #96	; 0x60
 80016b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	220c      	movs	r2, #12
 80016c8:	4619      	mov	r1, r3
 80016ca:	4807      	ldr	r0, [pc, #28]	; (80016e8 <MX_TIM3_Init+0xe4>)
 80016cc:	f004 fcf0 	bl	80060b0 <HAL_TIM_PWM_ConfigChannel>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80016d6:	f001 ff2b 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016da:	4803      	ldr	r0, [pc, #12]	; (80016e8 <MX_TIM3_Init+0xe4>)
 80016dc:	f002 f840 	bl	8003760 <HAL_TIM_MspPostInit>

}
 80016e0:	bf00      	nop
 80016e2:	3738      	adds	r7, #56	; 0x38
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	2000033c 	.word	0x2000033c
 80016ec:	40000400 	.word	0x40000400

080016f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001704:	463b      	mov	r3, r7
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <MX_TIM4_Init+0x94>)
 800170e:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <MX_TIM4_Init+0x98>)
 8001710:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <MX_TIM4_Init+0x94>)
 8001714:	2200      	movs	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_TIM4_Init+0x94>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <MX_TIM4_Init+0x94>)
 8001720:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001724:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_TIM4_Init+0x94>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <MX_TIM4_Init+0x94>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001732:	4814      	ldr	r0, [pc, #80]	; (8001784 <MX_TIM4_Init+0x94>)
 8001734:	f004 f86a 	bl	800580c <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800173e:	f001 fef7 	bl	8003530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001746:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001748:	f107 0308 	add.w	r3, r7, #8
 800174c:	4619      	mov	r1, r3
 800174e:	480d      	ldr	r0, [pc, #52]	; (8001784 <MX_TIM4_Init+0x94>)
 8001750:	f004 fd6c 	bl	800622c <HAL_TIM_ConfigClockSource>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800175a:	f001 fee9 	bl	8003530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001766:	463b      	mov	r3, r7
 8001768:	4619      	mov	r1, r3
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <MX_TIM4_Init+0x94>)
 800176c:	f005 f916 	bl	800699c <HAL_TIMEx_MasterConfigSynchronization>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001776:	f001 fedb 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000029c 	.word	0x2000029c
 8001788:	40000800 	.word	0x40000800

0800178c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_USART2_UART_Init+0x50>)
 8001792:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <MX_USART2_UART_Init+0x54>)
 8001794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_USART2_UART_Init+0x50>)
 8001798:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 800179c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_USART2_UART_Init+0x50>)
 80017a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017a4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <MX_USART2_UART_Init+0x50>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_USART2_UART_Init+0x50>)
 80017ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_USART2_UART_Init+0x50>)
 80017b6:	220c      	movs	r2, #12
 80017b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_USART2_UART_Init+0x50>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_USART2_UART_Init+0x50>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_USART2_UART_Init+0x50>)
 80017c8:	f005 f96a 	bl	8006aa0 <HAL_UART_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80017d2:	f001 fead 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	2000047c 	.word	0x2000047c
 80017e0:	40004400 	.word	0x40004400

080017e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <MX_DMA_Init+0x4c>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a0f      	ldr	r2, [pc, #60]	; (8001830 <MX_DMA_Init+0x4c>)
 80017f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <MX_DMA_Init+0x4c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	2010      	movs	r0, #16
 800180c:	f002 fadf 	bl	8003dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001810:	2010      	movs	r0, #16
 8001812:	f002 faf8 	bl	8003e06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	2011      	movs	r0, #17
 800181c:	f002 fad7 	bl	8003dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001820:	2011      	movs	r0, #17
 8001822:	f002 faf0 	bl	8003e06 <HAL_NVIC_EnableIRQ>

}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800

08001834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b47      	ldr	r3, [pc, #284]	; (800196c <MX_GPIO_Init+0x138>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a46      	ldr	r2, [pc, #280]	; (800196c <MX_GPIO_Init+0x138>)
 8001854:	f043 0304 	orr.w	r3, r3, #4
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b44      	ldr	r3, [pc, #272]	; (800196c <MX_GPIO_Init+0x138>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b40      	ldr	r3, [pc, #256]	; (800196c <MX_GPIO_Init+0x138>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a3f      	ldr	r2, [pc, #252]	; (800196c <MX_GPIO_Init+0x138>)
 8001870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b3d      	ldr	r3, [pc, #244]	; (800196c <MX_GPIO_Init+0x138>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	4b39      	ldr	r3, [pc, #228]	; (800196c <MX_GPIO_Init+0x138>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a38      	ldr	r2, [pc, #224]	; (800196c <MX_GPIO_Init+0x138>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b36      	ldr	r3, [pc, #216]	; (800196c <MX_GPIO_Init+0x138>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b32      	ldr	r3, [pc, #200]	; (800196c <MX_GPIO_Init+0x138>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a31      	ldr	r2, [pc, #196]	; (800196c <MX_GPIO_Init+0x138>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b2f      	ldr	r3, [pc, #188]	; (800196c <MX_GPIO_Init+0x138>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2120      	movs	r1, #32
 80018be:	482c      	ldr	r0, [pc, #176]	; (8001970 <MX_GPIO_Init+0x13c>)
 80018c0:	f003 f85a 	bl	8004978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ca:	482a      	ldr	r0, [pc, #168]	; (8001974 <MX_GPIO_Init+0x140>)
 80018cc:	f003 f854 	bl	8004978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018d6:	4b28      	ldr	r3, [pc, #160]	; (8001978 <MX_GPIO_Init+0x144>)
 80018d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4825      	ldr	r0, [pc, #148]	; (800197c <MX_GPIO_Init+0x148>)
 80018e6:	f002 feab 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Input_Proxreal_Pin Encoder_X_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxreal_Pin|Encoder_X_Pin;
 80018ea:	2381      	movs	r3, #129	; 0x81
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	481f      	ldr	r0, [pc, #124]	; (800197c <MX_GPIO_Init+0x148>)
 80018fe:	f002 fe9f 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Input_Proxtest_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxtest_Pin;
 8001902:	2301      	movs	r3, #1
 8001904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_Input_Proxtest_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	4816      	ldr	r0, [pc, #88]	; (8001970 <MX_GPIO_Init+0x13c>)
 8001916:	f002 fe93 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800191a:	2320      	movs	r3, #32
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	480f      	ldr	r0, [pc, #60]	; (8001970 <MX_GPIO_Init+0x13c>)
 8001932:	f002 fe85 	bl	8004640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800193a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	4809      	ldr	r0, [pc, #36]	; (8001974 <MX_GPIO_Init+0x140>)
 8001950:	f002 fe76 	bl	8004640 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	2100      	movs	r1, #0
 8001958:	2028      	movs	r0, #40	; 0x28
 800195a:	f002 fa38 	bl	8003dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800195e:	2028      	movs	r0, #40	; 0x28
 8001960:	f002 fa51 	bl	8003e06 <HAL_NVIC_EnableIRQ>

}
 8001964:	bf00      	nop
 8001966:	3728      	adds	r7, #40	; 0x28
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	40020000 	.word	0x40020000
 8001974:	40020400 	.word	0x40020400
 8001978:	10210000 	.word	0x10210000
 800197c:	40020800 	.word	0x40020800

08001980 <Encoder_Velocity_Update>:

/* USER CODE BEGIN 4 */
float Encoder_Velocity_Update()  //Lecture code DON'T TOUCH!
{
 8001980:	b5b0      	push	{r4, r5, r7, lr}
 8001982:	ed2d 8b02 	vpush	{d8}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
	static uint64_t EncoderLastTimestamp = 0;
//	static uint32_t EncoderLastOffset = 0;

	//read data
//	uint32_t EncoderNowPosition = htim1.Instance->CNT; //pulse
	uint32_t EncoderNowPosition = Encoder_Position_Update(); //use position from unwarp
 800198a:	f000 f84d 	bl	8001a28 <Encoder_Position_Update>
 800198e:	eef0 7a40 	vmov.f32	s15, s0
 8001992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001996:	ee17 3a90 	vmov	r3, s15
 800199a:	61fb      	str	r3, [r7, #28]
	uint64_t EncoderNowTimestamp = micros();
 800199c:	f001 fdae 	bl	80034fc <micros>
 80019a0:	e9c7 0104 	strd	r0, r1, [r7, #16]
//	uint32_t EncoderNowOffset = 0;

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 80019a4:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <Encoder_Velocity_Update+0x98>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019ae:	1a84      	subs	r4, r0, r2
 80019b0:	eb61 0503 	sbc.w	r5, r1, r3
 80019b4:	e9c7 4502 	strd	r4, r5, [r7, #8]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <Encoder_Velocity_Update+0x9c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	607b      	str	r3, [r7, #4]
	if (clear_counter_velocity == 1)
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <Encoder_Velocity_Update+0xa0>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d107      	bne.n	80019da <Encoder_Velocity_Update+0x5a>
	{
		clear_counter_velocity = 0;
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <Encoder_Velocity_Update+0xa0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
		EncoderNowPosition = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
		EncoderLastPosition = 0;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <Encoder_Velocity_Update+0x9c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
////		EncoderPositionDiff = EncoderPositionDiff + EncoderNowOffset;
//		//EncoderPositionDiff += 57344;
//	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 80019da:	4a10      	ldr	r2, [pc, #64]	; (8001a1c <Encoder_Velocity_Update+0x9c>)
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80019e0:	490d      	ldr	r1, [pc, #52]	; (8001a18 <Encoder_Velocity_Update+0x98>)
 80019e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019e6:	e9c1 2300 	strd	r2, r3, [r1]
//	EncoderLastOffset = EncoderNowOffset;

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a0d      	ldr	r2, [pc, #52]	; (8001a24 <Encoder_Velocity_Update+0xa4>)
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80019fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019fe:	f7ff f959 	bl	8000cb4 <__aeabi_ul2f>
 8001a02:	ee07 0a10 	vmov	s14, r0
 8001a06:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 8001a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	ecbd 8b02 	vpop	{d8}
 8001a16:	bdb0      	pop	{r4, r5, r7, pc}
 8001a18:	20000210 	.word	0x20000210
 8001a1c:	20000218 	.word	0x20000218
 8001a20:	200001e9 	.word	0x200001e9
 8001a24:	000f4240 	.word	0x000f4240

08001a28 <Encoder_Position_Update>:
float Encoder_Position_Update()  //Lecture code DON'T TOUCH!
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
	//Save Last state
	//read data
	static uint32_t EncoderPreviousPosition = 0;
	uint32_t EncoderCurrentPosition = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
	int32_t EncoderPositionDifferent;
	int32_t EncoderUnwrapPosition ;
	static uint32_t EncoderPreviousOffset = 0;
	static uint32_t EncoderCurrentOffset = 0;

	EncoderCurrentPosition = htim1.Instance->CNT; //pulse
 8001a32:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <Encoder_Position_Update+0xc4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	60fb      	str	r3, [r7, #12]

	//delta position = current - previous
	EncoderPositionDifferent = EncoderCurrentPosition - EncoderPreviousPosition;
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <Encoder_Position_Update+0xc8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	60bb      	str	r3, [r7, #8]
	//signal = current + current offset
	EncoderUnwrapPosition = EncoderCurrentPosition + EncoderCurrentOffset;
 8001a44:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <Encoder_Position_Update+0xcc>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	607b      	str	r3, [r7, #4]

	if (clear_counter_position == 1)
 8001a4e:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <Encoder_Position_Update+0xd0>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d111      	bne.n	8001a7a <Encoder_Position_Update+0x52>
	{
		clear_counter_position = 0;
 8001a56:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <Encoder_Position_Update+0xd0>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
		EncoderPreviousPosition = 0;
 8001a5c:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <Encoder_Position_Update+0xc8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
		EncoderCurrentPosition = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
		EncoderPreviousOffset = 0;
 8001a66:	4b25      	ldr	r3, [pc, #148]	; (8001afc <Encoder_Position_Update+0xd4>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
		EncoderCurrentOffset = 0;
 8001a6c:	4b21      	ldr	r3, [pc, #132]	; (8001af4 <Encoder_Position_Update+0xcc>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
		EncoderUnwrapPosition = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
		EncoderPositionDifferent = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
	}

	//compensate overflow and underflow
	if (EncoderPositionDifferent >= Encoder_Overflow)
 8001a7a:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <Encoder_Position_Update+0xd8>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4293      	cmp	r3, r2
 8001a84:	db0c      	blt.n	8001aa0 <Encoder_Position_Update+0x78>
//		EncoderPositionDiff -= Encoder_Resolution;
//		EncoderUnwrapPosition = EncoderCurrentPosition - Encoder_Resolution;

//		write new unwrapping
		//current offset = previous offset - resolution of encoder max
		EncoderCurrentOffset = EncoderPreviousOffset - Encoder_Resolution;
 8001a86:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <Encoder_Position_Update+0xd4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <Encoder_Position_Update+0xdc>)
 8001a8c:	8812      	ldrh	r2, [r2, #0]
 8001a8e:	1a9b      	subs	r3, r3, r2
 8001a90:	4a18      	ldr	r2, [pc, #96]	; (8001af4 <Encoder_Position_Update+0xcc>)
 8001a92:	6013      	str	r3, [r2, #0]
		//signal = current + current offset
		EncoderUnwrapPosition = EncoderCurrentPosition + EncoderCurrentOffset;
 8001a94:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <Encoder_Position_Update+0xcc>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	e012      	b.n	8001ac6 <Encoder_Position_Update+0x9e>
//		EncoderPositionDiff -= 57344;
	}
	else if (-EncoderPositionDifferent >= Encoder_Overflow)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	425b      	negs	r3, r3
 8001aa4:	4a16      	ldr	r2, [pc, #88]	; (8001b00 <Encoder_Position_Update+0xd8>)
 8001aa6:	8812      	ldrh	r2, [r2, #0]
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	db0c      	blt.n	8001ac6 <Encoder_Position_Update+0x9e>
	{
//		EncoderPositionDiff += Encoder_Resolution;
//		EncoderUnwrapPosition = EncoderCurrentPosition + Encoder_Resolution;

//		write new unwrap
		EncoderCurrentOffset = EncoderPreviousOffset + Encoder_Resolution;
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <Encoder_Position_Update+0xdc>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <Encoder_Position_Update+0xd4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <Encoder_Position_Update+0xcc>)
 8001aba:	6013      	str	r3, [r2, #0]
		EncoderUnwrapPosition = EncoderCurrentPosition + EncoderCurrentOffset;
 8001abc:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <Encoder_Position_Update+0xcc>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	607b      	str	r3, [r7, #4]
//		EncoderPositionDiff += 57344;
	}

	//Update Position and time
	EncoderPreviousPosition = EncoderCurrentPosition;
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <Encoder_Position_Update+0xc8>)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6013      	str	r3, [r2, #0]
	EncoderPreviousOffset = EncoderCurrentOffset;
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <Encoder_Position_Update+0xcc>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <Encoder_Position_Update+0xd4>)
 8001ad2:	6013      	str	r3, [r2, #0]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return EncoderUnwrapPosition  ;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	ee07 3a90 	vmov	s15, r3
 8001ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001ade:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	200003e8 	.word	0x200003e8
 8001af0:	2000021c 	.word	0x2000021c
 8001af4:	20000220 	.word	0x20000220
 8001af8:	200001ea 	.word	0x200001ea
 8001afc:	20000224 	.word	0x20000224
 8001b00:	20000002 	.word	0x20000002
 8001b04:	20000000 	.word	0x20000000

08001b08 <quintic>:
void quintic()
{
 8001b08:	b5b0      	push	{r4, r5, r7, lr}
 8001b0a:	ed2d 8b02 	vpush	{d8}
 8001b0e:	af00      	add	r7, sp, #0
	if (initial == 1 && angle_rad_stop - angle_rad_start != 0)
 8001b10:	4bc1      	ldr	r3, [pc, #772]	; (8001e18 <quintic+0x310>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	f040 8106 	bne.w	8001d26 <quintic+0x21e>
 8001b1a:	4bc0      	ldr	r3, [pc, #768]	; (8001e1c <quintic+0x314>)
 8001b1c:	ed93 7a00 	vldr	s14, [r3]
 8001b20:	4bbf      	ldr	r3, [pc, #764]	; (8001e20 <quintic+0x318>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b32:	f000 80f8 	beq.w	8001d26 <quintic+0x21e>
	{
		//calculate tau
		//short if condition
		tau_max = 15/8*(angle_rad_stop - angle_rad_start)/omega_max >= sqrtf(abs(((10*powf(3+sqrtf(3),1))-(5*powf(3+sqrtf(3),2))+(5*powf(3+sqrtf(3),3)/9))*(angle_rad_stop-angle_rad_start)/alpha_max)) ? 15/8*(angle_rad_stop - angle_rad_start)/omega_max : sqrtf(abs(((10*powf(3+sqrtf(3),1))-(5*powf(3+sqrtf(3),2))+(5*powf(3+sqrtf(3),3)/9))*(angle_rad_stop-angle_rad_start)/alpha_max));
 8001b36:	4bb9      	ldr	r3, [pc, #740]	; (8001e1c <quintic+0x314>)
 8001b38:	ed93 7a00 	vldr	s14, [r3]
 8001b3c:	4bb8      	ldr	r3, [pc, #736]	; (8001e20 <quintic+0x318>)
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b46:	4bb7      	ldr	r3, [pc, #732]	; (8001e24 <quintic+0x31c>)
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8001b50:	4bb2      	ldr	r3, [pc, #712]	; (8001e1c <quintic+0x314>)
 8001b52:	ed93 7a00 	vldr	s14, [r3]
 8001b56:	4bb2      	ldr	r3, [pc, #712]	; (8001e20 <quintic+0x318>)
 8001b58:	edd3 7a00 	vldr	s15, [r3]
 8001b5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b60:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8001e28 <quintic+0x320>
 8001b64:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001b68:	4bb0      	ldr	r3, [pc, #704]	; (8001e2c <quintic+0x324>)
 8001b6a:	ed93 7a00 	vldr	s14, [r3]
 8001b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b76:	ee17 3a90 	vmov	r3, s15
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bfb8      	it	lt
 8001b7e:	425b      	neglt	r3, r3
 8001b80:	ee07 3a90 	vmov	s15, r3
 8001b84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b88:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8c:	f006 f82e 	bl	8007bec <sqrtf>
 8001b90:	eef0 7a40 	vmov.f32	s15, s0
 8001b94:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9c:	db0d      	blt.n	8001bba <quintic+0xb2>
 8001b9e:	4b9f      	ldr	r3, [pc, #636]	; (8001e1c <quintic+0x314>)
 8001ba0:	ed93 7a00 	vldr	s14, [r3]
 8001ba4:	4b9e      	ldr	r3, [pc, #632]	; (8001e20 <quintic+0x318>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001bae:	4b9d      	ldr	r3, [pc, #628]	; (8001e24 <quintic+0x31c>)
 8001bb0:	ed93 7a00 	vldr	s14, [r3]
 8001bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bb8:	e021      	b.n	8001bfe <quintic+0xf6>
 8001bba:	4b98      	ldr	r3, [pc, #608]	; (8001e1c <quintic+0x314>)
 8001bbc:	ed93 7a00 	vldr	s14, [r3]
 8001bc0:	4b97      	ldr	r3, [pc, #604]	; (8001e20 <quintic+0x318>)
 8001bc2:	edd3 7a00 	vldr	s15, [r3]
 8001bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bca:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001e28 <quintic+0x320>
 8001bce:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001bd2:	4b96      	ldr	r3, [pc, #600]	; (8001e2c <quintic+0x324>)
 8001bd4:	ed93 7a00 	vldr	s14, [r3]
 8001bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be0:	ee17 3a90 	vmov	r3, s15
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bfb8      	it	lt
 8001be8:	425b      	neglt	r3, r3
 8001bea:	ee07 3a90 	vmov	s15, r3
 8001bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf6:	f005 fff9 	bl	8007bec <sqrtf>
 8001bfa:	eef0 7a40 	vmov.f32	s15, s0
 8001bfe:	4b8c      	ldr	r3, [pc, #560]	; (8001e30 <quintic+0x328>)
 8001c00:	edc3 7a00 	vstr	s15, [r3]

		//calculate coeffient
		c_0 = angle_rad_start;
 8001c04:	4b86      	ldr	r3, [pc, #536]	; (8001e20 <quintic+0x318>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a8a      	ldr	r2, [pc, #552]	; (8001e34 <quintic+0x32c>)
 8001c0a:	6013      	str	r3, [r2, #0]
		c_1 = 0;
 8001c0c:	4b8a      	ldr	r3, [pc, #552]	; (8001e38 <quintic+0x330>)
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
		c_2 = 0;
 8001c14:	4b89      	ldr	r3, [pc, #548]	; (8001e3c <quintic+0x334>)
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
		c_3 = 10*((angle_rad_stop - angle_rad_start)/(powf(tau_max,3)));
 8001c1c:	4b7f      	ldr	r3, [pc, #508]	; (8001e1c <quintic+0x314>)
 8001c1e:	ed93 7a00 	vldr	s14, [r3]
 8001c22:	4b7f      	ldr	r3, [pc, #508]	; (8001e20 <quintic+0x318>)
 8001c24:	edd3 7a00 	vldr	s15, [r3]
 8001c28:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001c2c:	4b80      	ldr	r3, [pc, #512]	; (8001e30 <quintic+0x328>)
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001c36:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3a:	f005 ff3f 	bl	8007abc <powf>
 8001c3e:	eeb0 7a40 	vmov.f32	s14, s0
 8001c42:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001c46:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c4e:	4b7c      	ldr	r3, [pc, #496]	; (8001e40 <quintic+0x338>)
 8001c50:	edc3 7a00 	vstr	s15, [r3]
		c_4 = 15*((angle_rad_start - angle_rad_stop)/(powf(tau_max,4)));
 8001c54:	4b72      	ldr	r3, [pc, #456]	; (8001e20 <quintic+0x318>)
 8001c56:	ed93 7a00 	vldr	s14, [r3]
 8001c5a:	4b70      	ldr	r3, [pc, #448]	; (8001e1c <quintic+0x314>)
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001c64:	4b72      	ldr	r3, [pc, #456]	; (8001e30 <quintic+0x328>)
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c72:	f005 ff23 	bl	8007abc <powf>
 8001c76:	eeb0 7a40 	vmov.f32	s14, s0
 8001c7a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001c7e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001c82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c86:	4b6f      	ldr	r3, [pc, #444]	; (8001e44 <quintic+0x33c>)
 8001c88:	edc3 7a00 	vstr	s15, [r3]
		c_5 = 6*((angle_rad_stop - angle_rad_start)/(powf(tau_max,5)));
 8001c8c:	4b63      	ldr	r3, [pc, #396]	; (8001e1c <quintic+0x314>)
 8001c8e:	ed93 7a00 	vldr	s14, [r3]
 8001c92:	4b63      	ldr	r3, [pc, #396]	; (8001e20 <quintic+0x318>)
 8001c94:	edd3 7a00 	vldr	s15, [r3]
 8001c98:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001c9c:	4b64      	ldr	r3, [pc, #400]	; (8001e30 <quintic+0x328>)
 8001c9e:	edd3 7a00 	vldr	s15, [r3]
 8001ca2:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8001caa:	f005 ff07 	bl	8007abc <powf>
 8001cae:	eeb0 7a40 	vmov.f32	s14, s0
 8001cb2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001cb6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cbe:	4b62      	ldr	r3, [pc, #392]	; (8001e48 <quintic+0x340>)
 8001cc0:	edc3 7a00 	vstr	s15, [r3]
		//save initial time
		//change microsec to second
		time_initial = micros()/1000000.0;
 8001cc4:	f001 fc1a 	bl	80034fc <micros>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7fe fc08 	bl	80004e4 <__aeabi_ul2d>
 8001cd4:	a34e      	add	r3, pc, #312	; (adr r3, 8001e10 <quintic+0x308>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	f7fe fd63 	bl	80007a4 <__aeabi_ddiv>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f7fe fecd 	bl	8000a84 <__aeabi_d2f>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4a57      	ldr	r2, [pc, #348]	; (8001e4c <quintic+0x344>)
 8001cee:	6013      	str	r3, [r2, #0]
		initial = 0;
 8001cf0:	4b49      	ldr	r3, [pc, #292]	; (8001e18 <quintic+0x310>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]

		//initial parameter in kalman filter
		theta_estimate = angle_rad_start;
 8001cf6:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <quintic+0x318>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a55      	ldr	r2, [pc, #340]	; (8001e50 <quintic+0x348>)
 8001cfc:	6013      	str	r3, [r2, #0]
		omega_estimate = 0;
 8001cfe:	4b55      	ldr	r3, [pc, #340]	; (8001e54 <quintic+0x34c>)
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
		p_estimate11 = 1 ;
 8001d06:	4b54      	ldr	r3, [pc, #336]	; (8001e58 <quintic+0x350>)
 8001d08:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d0c:	601a      	str	r2, [r3, #0]
		p_estimate12 = 0 ;
 8001d0e:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <quintic+0x354>)
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
		p_estimate21 = 0 ;
 8001d16:	4b52      	ldr	r3, [pc, #328]	; (8001e60 <quintic+0x358>)
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
		p_estimate22 = 1 ;
 8001d1e:	4b51      	ldr	r3, [pc, #324]	; (8001e64 <quintic+0x35c>)
 8001d20:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d24:	601a      	str	r2, [r3, #0]

	}
	if (initial == 0 && angle_rad_stop - angle_rad_start != 0)
 8001d26:	4b3c      	ldr	r3, [pc, #240]	; (8001e18 <quintic+0x310>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f040 818d 	bne.w	800204a <quintic+0x542>
 8001d30:	4b3a      	ldr	r3, [pc, #232]	; (8001e1c <quintic+0x314>)
 8001d32:	ed93 7a00 	vldr	s14, [r3]
 8001d36:	4b3a      	ldr	r3, [pc, #232]	; (8001e20 <quintic+0x318>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d40:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d48:	f000 817f 	beq.w	800204a <quintic+0x542>
	{
		//at the final point
		//tau = (micros()/1000000.0)-time_initial ; in second unit
		if ((micros()/1000000.0)-time_initial >= tau_max)
 8001d4c:	f001 fbd6 	bl	80034fc <micros>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	f7fe fbc4 	bl	80004e4 <__aeabi_ul2d>
 8001d5c:	a32c      	add	r3, pc, #176	; (adr r3, 8001e10 <quintic+0x308>)
 8001d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d62:	f7fe fd1f 	bl	80007a4 <__aeabi_ddiv>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4614      	mov	r4, r2
 8001d6c:	461d      	mov	r5, r3
 8001d6e:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <quintic+0x344>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fb94 	bl	80004a0 <__aeabi_f2d>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	4629      	mov	r1, r5
 8001d80:	f7fe fa2e 	bl	80001e0 <__aeabi_dsub>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4614      	mov	r4, r2
 8001d8a:	461d      	mov	r5, r3
 8001d8c:	4b28      	ldr	r3, [pc, #160]	; (8001e30 <quintic+0x328>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fb85 	bl	80004a0 <__aeabi_f2d>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	4629      	mov	r1, r5
 8001d9e:	f7fe fe5d 	bl	8000a5c <__aeabi_dcmpge>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d073      	beq.n	8001e90 <quintic+0x388>
		{
			initial = 1;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <quintic+0x310>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]
			angle_rad_start = angle_rad_stop;
 8001dae:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <quintic+0x314>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a1b      	ldr	r2, [pc, #108]	; (8001e20 <quintic+0x318>)
 8001db4:	6013      	str	r3, [r2, #0]
			PWM_Out = 0;
 8001db6:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <quintic+0x360>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, PWM_Out);
 8001dbc:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <quintic+0x360>)
 8001dbe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dc2:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <quintic+0x364>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40
			error_position = 0;
 8001dc8:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <quintic+0x368>)
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
			error_position_diff = 0;
 8001dd0:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <quintic+0x36c>)
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
			error_position_int = 0;
 8001dd8:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <quintic+0x370>)
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
			error_position_prev = 0;
 8001de0:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <quintic+0x374>)
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
			error_velocity = 0;
 8001de8:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <quintic+0x378>)
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
			error_velocity_diff = 0;
 8001df0:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <quintic+0x37c>)
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
			error_velocity_int = 0;
 8001df8:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <quintic+0x380>)
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
			error_velocity_prev = 0;
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <quintic+0x384>)
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

			//cascade control
			cascade_control_with_feed_forward();
		}
	}
}
 8001e08:	e11f      	b.n	800204a <quintic+0x542>
 8001e0a:	bf00      	nop
 8001e0c:	f3af 8000 	nop.w
 8001e10:	00000000 	.word	0x00000000
 8001e14:	412e8480 	.word	0x412e8480
 8001e18:	20000014 	.word	0x20000014
 8001e1c:	2000011c 	.word	0x2000011c
 8001e20:	20000118 	.word	0x20000118
 8001e24:	2000000c 	.word	0x2000000c
 8001e28:	c0b8c078 	.word	0xc0b8c078
 8001e2c:	20000010 	.word	0x20000010
 8001e30:	20000120 	.word	0x20000120
 8001e34:	20000128 	.word	0x20000128
 8001e38:	2000012c 	.word	0x2000012c
 8001e3c:	20000130 	.word	0x20000130
 8001e40:	20000134 	.word	0x20000134
 8001e44:	20000138 	.word	0x20000138
 8001e48:	2000013c 	.word	0x2000013c
 8001e4c:	20000124 	.word	0x20000124
 8001e50:	20000188 	.word	0x20000188
 8001e54:	2000018c 	.word	0x2000018c
 8001e58:	20000028 	.word	0x20000028
 8001e5c:	200001a0 	.word	0x200001a0
 8001e60:	200001a4 	.word	0x200001a4
 8001e64:	2000002c 	.word	0x2000002c
 8001e68:	20000108 	.word	0x20000108
 8001e6c:	2000033c 	.word	0x2000033c
 8001e70:	20000148 	.word	0x20000148
 8001e74:	2000014c 	.word	0x2000014c
 8001e78:	20000150 	.word	0x20000150
 8001e7c:	20000154 	.word	0x20000154
 8001e80:	2000016c 	.word	0x2000016c
 8001e84:	20000170 	.word	0x20000170
 8001e88:	20000174 	.word	0x20000174
 8001e8c:	20000178 	.word	0x20000178
			tau = micros()/1000000.0 - time_initial;
 8001e90:	f001 fb34 	bl	80034fc <micros>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f7fe fb22 	bl	80004e4 <__aeabi_ul2d>
 8001ea0:	a378      	add	r3, pc, #480	; (adr r3, 8002084 <quintic+0x57c>)
 8001ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea6:	f7fe fc7d 	bl	80007a4 <__aeabi_ddiv>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4614      	mov	r4, r2
 8001eb0:	461d      	mov	r5, r3
 8001eb2:	4b69      	ldr	r3, [pc, #420]	; (8002058 <quintic+0x550>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe faf2 	bl	80004a0 <__aeabi_f2d>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	4629      	mov	r1, r5
 8001ec4:	f7fe f98c 	bl	80001e0 <__aeabi_dsub>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f7fe fdd8 	bl	8000a84 <__aeabi_d2f>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4a61      	ldr	r2, [pc, #388]	; (800205c <quintic+0x554>)
 8001ed8:	6013      	str	r3, [r2, #0]
			desired_position = c_0*powf(tau,0) + c_1*powf(tau,1) + c_2*powf(tau,2) + c_3*powf(tau,3) + c_4*powf(tau,4) + c_5*powf(tau,5);
 8001eda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ede:	4b60      	ldr	r3, [pc, #384]	; (8002060 <quintic+0x558>)
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ee8:	4b5c      	ldr	r3, [pc, #368]	; (800205c <quintic+0x554>)
 8001eea:	edd3 6a00 	vldr	s13, [r3]
 8001eee:	4b5d      	ldr	r3, [pc, #372]	; (8002064 <quintic+0x55c>)
 8001ef0:	edd3 7a00 	vldr	s15, [r3]
 8001ef4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ef8:	ee37 8a27 	vadd.f32	s16, s14, s15
 8001efc:	4b57      	ldr	r3, [pc, #348]	; (800205c <quintic+0x554>)
 8001efe:	edd3 7a00 	vldr	s15, [r3]
 8001f02:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001f06:	eeb0 0a67 	vmov.f32	s0, s15
 8001f0a:	f005 fdd7 	bl	8007abc <powf>
 8001f0e:	eeb0 7a40 	vmov.f32	s14, s0
 8001f12:	4b55      	ldr	r3, [pc, #340]	; (8002068 <quintic+0x560>)
 8001f14:	edd3 7a00 	vldr	s15, [r3]
 8001f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001f20:	4b4e      	ldr	r3, [pc, #312]	; (800205c <quintic+0x554>)
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f2e:	f005 fdc5 	bl	8007abc <powf>
 8001f32:	eeb0 7a40 	vmov.f32	s14, s0
 8001f36:	4b4d      	ldr	r3, [pc, #308]	; (800206c <quintic+0x564>)
 8001f38:	edd3 7a00 	vldr	s15, [r3]
 8001f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f40:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001f44:	4b45      	ldr	r3, [pc, #276]	; (800205c <quintic+0x554>)
 8001f46:	edd3 7a00 	vldr	s15, [r3]
 8001f4a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f52:	f005 fdb3 	bl	8007abc <powf>
 8001f56:	eeb0 7a40 	vmov.f32	s14, s0
 8001f5a:	4b45      	ldr	r3, [pc, #276]	; (8002070 <quintic+0x568>)
 8001f5c:	edd3 7a00 	vldr	s15, [r3]
 8001f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f64:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001f68:	4b3c      	ldr	r3, [pc, #240]	; (800205c <quintic+0x554>)
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001f72:	eeb0 0a67 	vmov.f32	s0, s15
 8001f76:	f005 fda1 	bl	8007abc <powf>
 8001f7a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <quintic+0x56c>)
 8001f80:	edd3 7a00 	vldr	s15, [r3]
 8001f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f88:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001f8c:	4b3a      	ldr	r3, [pc, #232]	; (8002078 <quintic+0x570>)
 8001f8e:	edc3 7a00 	vstr	s15, [r3]
			desired_velocity = 0 + c_1 + 2*c_2*powf(tau,1) + 3*c_3*powf(tau,2) + 4*c_4*powf(tau,3) + 5*c_5*powf(tau,4);
 8001f92:	4b34      	ldr	r3, [pc, #208]	; (8002064 <quintic+0x55c>)
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800207c <quintic+0x574>
 8001f9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001fa0:	4b31      	ldr	r3, [pc, #196]	; (8002068 <quintic+0x560>)
 8001fa2:	edd3 7a00 	vldr	s15, [r3]
 8001fa6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001faa:	4b2c      	ldr	r3, [pc, #176]	; (800205c <quintic+0x554>)
 8001fac:	edd3 7a00 	vldr	s15, [r3]
 8001fb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb4:	ee37 8a27 	vadd.f32	s16, s14, s15
 8001fb8:	4b2c      	ldr	r3, [pc, #176]	; (800206c <quintic+0x564>)
 8001fba:	edd3 7a00 	vldr	s15, [r3]
 8001fbe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001fc2:	ee67 8a87 	vmul.f32	s17, s15, s14
 8001fc6:	4b25      	ldr	r3, [pc, #148]	; (800205c <quintic+0x554>)
 8001fc8:	edd3 7a00 	vldr	s15, [r3]
 8001fcc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd4:	f005 fd72 	bl	8007abc <powf>
 8001fd8:	eef0 7a40 	vmov.f32	s15, s0
 8001fdc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001fe0:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001fe4:	4b22      	ldr	r3, [pc, #136]	; (8002070 <quintic+0x568>)
 8001fe6:	edd3 7a00 	vldr	s15, [r3]
 8001fea:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001fee:	ee67 8a87 	vmul.f32	s17, s15, s14
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	; (800205c <quintic+0x554>)
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8002000:	f005 fd5c 	bl	8007abc <powf>
 8002004:	eef0 7a40 	vmov.f32	s15, s0
 8002008:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800200c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8002010:	4b18      	ldr	r3, [pc, #96]	; (8002074 <quintic+0x56c>)
 8002012:	edd3 7a00 	vldr	s15, [r3]
 8002016:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800201a:	ee67 8a87 	vmul.f32	s17, s15, s14
 800201e:	4b0f      	ldr	r3, [pc, #60]	; (800205c <quintic+0x554>)
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8002028:	eeb0 0a67 	vmov.f32	s0, s15
 800202c:	f005 fd46 	bl	8007abc <powf>
 8002030:	eef0 7a40 	vmov.f32	s15, s0
 8002034:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002038:	ee78 7a27 	vadd.f32	s15, s16, s15
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <quintic+0x578>)
 800203e:	edc3 7a00 	vstr	s15, [r3]
			Kalman_Filter();
 8002042:	f000 f9c9 	bl	80023d8 <Kalman_Filter>
			cascade_control_with_feed_forward();
 8002046:	f000 f821 	bl	800208c <cascade_control_with_feed_forward>
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	ecbd 8b02 	vpop	{d8}
 8002052:	bdb0      	pop	{r4, r5, r7, pc}
 8002054:	f3af 8000 	nop.w
 8002058:	20000124 	.word	0x20000124
 800205c:	20000140 	.word	0x20000140
 8002060:	20000128 	.word	0x20000128
 8002064:	2000012c 	.word	0x2000012c
 8002068:	20000130 	.word	0x20000130
 800206c:	20000134 	.word	0x20000134
 8002070:	20000138 	.word	0x20000138
 8002074:	2000013c 	.word	0x2000013c
 8002078:	20000144 	.word	0x20000144
 800207c:	00000000 	.word	0x00000000
 8002080:	20000168 	.word	0x20000168
 8002084:	00000000 	.word	0x00000000
 8002088:	412e8480 	.word	0x412e8480

0800208c <cascade_control_with_feed_forward>:
void cascade_control_with_feed_forward()
{
 800208c:	b5b0      	push	{r4, r5, r7, lr}
 800208e:	af00      	add	r7, sp, #0
	if (angle_rad_start < angle_rad_stop)
 8002090:	4baf      	ldr	r3, [pc, #700]	; (8002350 <cascade_control_with_feed_forward+0x2c4>)
 8002092:	ed93 7a00 	vldr	s14, [r3]
 8002096:	4baf      	ldr	r3, [pc, #700]	; (8002354 <cascade_control_with_feed_forward+0x2c8>)
 8002098:	edd3 7a00 	vldr	s15, [r3]
 800209c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a4:	d516      	bpl.n	80020d4 <cascade_control_with_feed_forward+0x48>
	{
		position_kd = 0;
 80020a6:	4bac      	ldr	r3, [pc, #688]	; (8002358 <cascade_control_with_feed_forward+0x2cc>)
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
		position_ki = 0;
 80020ae:	4bab      	ldr	r3, [pc, #684]	; (800235c <cascade_control_with_feed_forward+0x2d0>)
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
		position_kp = 0.25;
 80020b6:	4baa      	ldr	r3, [pc, #680]	; (8002360 <cascade_control_with_feed_forward+0x2d4>)
 80020b8:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80020bc:	601a      	str	r2, [r3, #0]
		velocity_kd = 0;
 80020be:	4ba9      	ldr	r3, [pc, #676]	; (8002364 <cascade_control_with_feed_forward+0x2d8>)
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
		velocity_ki = 6000;
 80020c6:	4ba8      	ldr	r3, [pc, #672]	; (8002368 <cascade_control_with_feed_forward+0x2dc>)
 80020c8:	4aa8      	ldr	r2, [pc, #672]	; (800236c <cascade_control_with_feed_forward+0x2e0>)
 80020ca:	601a      	str	r2, [r3, #0]
		velocity_kp = 8000;
 80020cc:	4ba8      	ldr	r3, [pc, #672]	; (8002370 <cascade_control_with_feed_forward+0x2e4>)
 80020ce:	4aa9      	ldr	r2, [pc, #676]	; (8002374 <cascade_control_with_feed_forward+0x2e8>)
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e015      	b.n	8002100 <cascade_control_with_feed_forward+0x74>
	}
	else
	{
		position_kd = 0;
 80020d4:	4ba0      	ldr	r3, [pc, #640]	; (8002358 <cascade_control_with_feed_forward+0x2cc>)
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
		position_ki = 0;
 80020dc:	4b9f      	ldr	r3, [pc, #636]	; (800235c <cascade_control_with_feed_forward+0x2d0>)
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
		position_kp = 0.5;
 80020e4:	4b9e      	ldr	r3, [pc, #632]	; (8002360 <cascade_control_with_feed_forward+0x2d4>)
 80020e6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80020ea:	601a      	str	r2, [r3, #0]
		velocity_kd = 0;
 80020ec:	4b9d      	ldr	r3, [pc, #628]	; (8002364 <cascade_control_with_feed_forward+0x2d8>)
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
		velocity_ki = 1500;
 80020f4:	4b9c      	ldr	r3, [pc, #624]	; (8002368 <cascade_control_with_feed_forward+0x2dc>)
 80020f6:	4aa0      	ldr	r2, [pc, #640]	; (8002378 <cascade_control_with_feed_forward+0x2ec>)
 80020f8:	601a      	str	r2, [r3, #0]
		velocity_kp = 3000; // 4000
 80020fa:	4b9d      	ldr	r3, [pc, #628]	; (8002370 <cascade_control_with_feed_forward+0x2e4>)
 80020fc:	4a9f      	ldr	r2, [pc, #636]	; (800237c <cascade_control_with_feed_forward+0x2f0>)
 80020fe:	601a      	str	r2, [r3, #0]
	}

	//position control
	error_position = desired_position - Position_Now_Rad;
 8002100:	4b9f      	ldr	r3, [pc, #636]	; (8002380 <cascade_control_with_feed_forward+0x2f4>)
 8002102:	ed93 7a00 	vldr	s14, [r3]
 8002106:	4b9f      	ldr	r3, [pc, #636]	; (8002384 <cascade_control_with_feed_forward+0x2f8>)
 8002108:	edd3 7a00 	vldr	s15, [r3]
 800210c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002110:	4b9d      	ldr	r3, [pc, #628]	; (8002388 <cascade_control_with_feed_forward+0x2fc>)
 8002112:	edc3 7a00 	vstr	s15, [r3]
	error_position_diff = (error_position - error_position_prev)*1000.0;
 8002116:	4b9c      	ldr	r3, [pc, #624]	; (8002388 <cascade_control_with_feed_forward+0x2fc>)
 8002118:	ed93 7a00 	vldr	s14, [r3]
 800211c:	4b9b      	ldr	r3, [pc, #620]	; (800238c <cascade_control_with_feed_forward+0x300>)
 800211e:	edd3 7a00 	vldr	s15, [r3]
 8002122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002126:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8002390 <cascade_control_with_feed_forward+0x304>
 800212a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800212e:	4b99      	ldr	r3, [pc, #612]	; (8002394 <cascade_control_with_feed_forward+0x308>)
 8002130:	edc3 7a00 	vstr	s15, [r3]
	error_position_int = error_position_int + error_position/1000.0;
 8002134:	4b98      	ldr	r3, [pc, #608]	; (8002398 <cascade_control_with_feed_forward+0x30c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe f9b1 	bl	80004a0 <__aeabi_f2d>
 800213e:	4604      	mov	r4, r0
 8002140:	460d      	mov	r5, r1
 8002142:	4b91      	ldr	r3, [pc, #580]	; (8002388 <cascade_control_with_feed_forward+0x2fc>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe f9aa 	bl	80004a0 <__aeabi_f2d>
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	4b92      	ldr	r3, [pc, #584]	; (800239c <cascade_control_with_feed_forward+0x310>)
 8002152:	f7fe fb27 	bl	80007a4 <__aeabi_ddiv>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4620      	mov	r0, r4
 800215c:	4629      	mov	r1, r5
 800215e:	f7fe f841 	bl	80001e4 <__adddf3>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	f7fe fc8b 	bl	8000a84 <__aeabi_d2f>
 800216e:	4603      	mov	r3, r0
 8002170:	4a89      	ldr	r2, [pc, #548]	; (8002398 <cascade_control_with_feed_forward+0x30c>)
 8002172:	6013      	str	r3, [r2, #0]
	command_velocity = position_kp*error_position + position_ki*error_position_int + position_kd*error_position_diff + position_bias;
 8002174:	4b7a      	ldr	r3, [pc, #488]	; (8002360 <cascade_control_with_feed_forward+0x2d4>)
 8002176:	ed93 7a00 	vldr	s14, [r3]
 800217a:	4b83      	ldr	r3, [pc, #524]	; (8002388 <cascade_control_with_feed_forward+0x2fc>)
 800217c:	edd3 7a00 	vldr	s15, [r3]
 8002180:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002184:	4b75      	ldr	r3, [pc, #468]	; (800235c <cascade_control_with_feed_forward+0x2d0>)
 8002186:	edd3 6a00 	vldr	s13, [r3]
 800218a:	4b83      	ldr	r3, [pc, #524]	; (8002398 <cascade_control_with_feed_forward+0x30c>)
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002194:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002198:	4b6f      	ldr	r3, [pc, #444]	; (8002358 <cascade_control_with_feed_forward+0x2cc>)
 800219a:	edd3 6a00 	vldr	s13, [r3]
 800219e:	4b7d      	ldr	r3, [pc, #500]	; (8002394 <cascade_control_with_feed_forward+0x308>)
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021ac:	4b7c      	ldr	r3, [pc, #496]	; (80023a0 <cascade_control_with_feed_forward+0x314>)
 80021ae:	edd3 7a00 	vldr	s15, [r3]
 80021b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b6:	4b7b      	ldr	r3, [pc, #492]	; (80023a4 <cascade_control_with_feed_forward+0x318>)
 80021b8:	edc3 7a00 	vstr	s15, [r3]
	error_position_prev = error_position;
 80021bc:	4b72      	ldr	r3, [pc, #456]	; (8002388 <cascade_control_with_feed_forward+0x2fc>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a72      	ldr	r2, [pc, #456]	; (800238c <cascade_control_with_feed_forward+0x300>)
 80021c2:	6013      	str	r3, [r2, #0]

	//limit velocity
	if (command_velocity > 1)
 80021c4:	4b77      	ldr	r3, [pc, #476]	; (80023a4 <cascade_control_with_feed_forward+0x318>)
 80021c6:	edd3 7a00 	vldr	s15, [r3]
 80021ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d6:	dd04      	ble.n	80021e2 <cascade_control_with_feed_forward+0x156>
	{
		command_velocity = 1;
 80021d8:	4b72      	ldr	r3, [pc, #456]	; (80023a4 <cascade_control_with_feed_forward+0x318>)
 80021da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e00c      	b.n	80021fc <cascade_control_with_feed_forward+0x170>
	}
	else if (command_velocity < -1)
 80021e2:	4b70      	ldr	r3, [pc, #448]	; (80023a4 <cascade_control_with_feed_forward+0x318>)
 80021e4:	edd3 7a00 	vldr	s15, [r3]
 80021e8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80021ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f4:	d502      	bpl.n	80021fc <cascade_control_with_feed_forward+0x170>
	{
		command_velocity = -1;
 80021f6:	4b6b      	ldr	r3, [pc, #428]	; (80023a4 <cascade_control_with_feed_forward+0x318>)
 80021f8:	4a6b      	ldr	r2, [pc, #428]	; (80023a8 <cascade_control_with_feed_forward+0x31c>)
 80021fa:	601a      	str	r2, [r3, #0]
	}

	//velocity control
	error_velocity = desired_velocity - omega_estimate + command_velocity;
 80021fc:	4b6b      	ldr	r3, [pc, #428]	; (80023ac <cascade_control_with_feed_forward+0x320>)
 80021fe:	ed93 7a00 	vldr	s14, [r3]
 8002202:	4b6b      	ldr	r3, [pc, #428]	; (80023b0 <cascade_control_with_feed_forward+0x324>)
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	ee37 7a67 	vsub.f32	s14, s14, s15
 800220c:	4b65      	ldr	r3, [pc, #404]	; (80023a4 <cascade_control_with_feed_forward+0x318>)
 800220e:	edd3 7a00 	vldr	s15, [r3]
 8002212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002216:	4b67      	ldr	r3, [pc, #412]	; (80023b4 <cascade_control_with_feed_forward+0x328>)
 8002218:	edc3 7a00 	vstr	s15, [r3]
	error_velocity_diff = (error_velocity - error_velocity_prev)*1000.0;
 800221c:	4b65      	ldr	r3, [pc, #404]	; (80023b4 <cascade_control_with_feed_forward+0x328>)
 800221e:	ed93 7a00 	vldr	s14, [r3]
 8002222:	4b65      	ldr	r3, [pc, #404]	; (80023b8 <cascade_control_with_feed_forward+0x32c>)
 8002224:	edd3 7a00 	vldr	s15, [r3]
 8002228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800222c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002390 <cascade_control_with_feed_forward+0x304>
 8002230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002234:	4b61      	ldr	r3, [pc, #388]	; (80023bc <cascade_control_with_feed_forward+0x330>)
 8002236:	edc3 7a00 	vstr	s15, [r3]
	error_velocity_int = error_velocity_int + error_velocity/1000.0;
 800223a:	4b61      	ldr	r3, [pc, #388]	; (80023c0 <cascade_control_with_feed_forward+0x334>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe f92e 	bl	80004a0 <__aeabi_f2d>
 8002244:	4604      	mov	r4, r0
 8002246:	460d      	mov	r5, r1
 8002248:	4b5a      	ldr	r3, [pc, #360]	; (80023b4 <cascade_control_with_feed_forward+0x328>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f927 	bl	80004a0 <__aeabi_f2d>
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	4b51      	ldr	r3, [pc, #324]	; (800239c <cascade_control_with_feed_forward+0x310>)
 8002258:	f7fe faa4 	bl	80007a4 <__aeabi_ddiv>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4620      	mov	r0, r4
 8002262:	4629      	mov	r1, r5
 8002264:	f7fd ffbe 	bl	80001e4 <__adddf3>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	f7fe fc08 	bl	8000a84 <__aeabi_d2f>
 8002274:	4603      	mov	r3, r0
 8002276:	4a52      	ldr	r2, [pc, #328]	; (80023c0 <cascade_control_with_feed_forward+0x334>)
 8002278:	6013      	str	r3, [r2, #0]
	PWM_Out = velocity_kp*error_velocity + velocity_ki*error_velocity_int + velocity_kd*error_velocity_diff + velocity_bias;
 800227a:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <cascade_control_with_feed_forward+0x2e4>)
 800227c:	ed93 7a00 	vldr	s14, [r3]
 8002280:	4b4c      	ldr	r3, [pc, #304]	; (80023b4 <cascade_control_with_feed_forward+0x328>)
 8002282:	edd3 7a00 	vldr	s15, [r3]
 8002286:	ee27 7a27 	vmul.f32	s14, s14, s15
 800228a:	4b37      	ldr	r3, [pc, #220]	; (8002368 <cascade_control_with_feed_forward+0x2dc>)
 800228c:	edd3 6a00 	vldr	s13, [r3]
 8002290:	4b4b      	ldr	r3, [pc, #300]	; (80023c0 <cascade_control_with_feed_forward+0x334>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800229a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800229e:	4b31      	ldr	r3, [pc, #196]	; (8002364 <cascade_control_with_feed_forward+0x2d8>)
 80022a0:	edd3 6a00 	vldr	s13, [r3]
 80022a4:	4b45      	ldr	r3, [pc, #276]	; (80023bc <cascade_control_with_feed_forward+0x330>)
 80022a6:	edd3 7a00 	vldr	s15, [r3]
 80022aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022b2:	4b44      	ldr	r3, [pc, #272]	; (80023c4 <cascade_control_with_feed_forward+0x338>)
 80022b4:	edd3 7a00 	vldr	s15, [r3]
 80022b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c0:	ee17 3a90 	vmov	r3, s15
 80022c4:	b21a      	sxth	r2, r3
 80022c6:	4b40      	ldr	r3, [pc, #256]	; (80023c8 <cascade_control_with_feed_forward+0x33c>)
 80022c8:	801a      	strh	r2, [r3, #0]
	error_velocity_prev = error_velocity;
 80022ca:	4b3a      	ldr	r3, [pc, #232]	; (80023b4 <cascade_control_with_feed_forward+0x328>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a3a      	ldr	r2, [pc, #232]	; (80023b8 <cascade_control_with_feed_forward+0x32c>)
 80022d0:	6013      	str	r3, [r2, #0]

	//limit pwm
	if (PWM_Out > 10000)
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <cascade_control_with_feed_forward+0x33c>)
 80022d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d8:	f242 7210 	movw	r2, #10000	; 0x2710
 80022dc:	4293      	cmp	r3, r2
 80022de:	dd04      	ble.n	80022ea <cascade_control_with_feed_forward+0x25e>
	{
		PWM_Out = 10000;
 80022e0:	4b39      	ldr	r3, [pc, #228]	; (80023c8 <cascade_control_with_feed_forward+0x33c>)
 80022e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80022e6:	801a      	strh	r2, [r3, #0]
 80022e8:	e009      	b.n	80022fe <cascade_control_with_feed_forward+0x272>
	}
	else if (PWM_Out < -10000)
 80022ea:	4b37      	ldr	r3, [pc, #220]	; (80023c8 <cascade_control_with_feed_forward+0x33c>)
 80022ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f0:	4a36      	ldr	r2, [pc, #216]	; (80023cc <cascade_control_with_feed_forward+0x340>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	da03      	bge.n	80022fe <cascade_control_with_feed_forward+0x272>
	{
		PWM_Out = -10000;
 80022f6:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <cascade_control_with_feed_forward+0x33c>)
 80022f8:	f64d 02f0 	movw	r2, #55536	; 0xd8f0
 80022fc:	801a      	strh	r2, [r3, #0]
	}


	//control motor direction
	if (PWM_Out < 0)
 80022fe:	4b32      	ldr	r3, [pc, #200]	; (80023c8 <cascade_control_with_feed_forward+0x33c>)
 8002300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002304:	2b00      	cmp	r3, #0
 8002306:	da10      	bge.n	800232a <cascade_control_with_feed_forward+0x29e>
//	if (angle_rad_start > angle_rad_stop)
	{
		__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, abs(PWM_Out));
 8002308:	4b2f      	ldr	r3, [pc, #188]	; (80023c8 <cascade_control_with_feed_forward+0x33c>)
 800230a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230e:	2b00      	cmp	r3, #0
 8002310:	bfb8      	it	lt
 8002312:	425b      	neglt	r3, r3
 8002314:	b29a      	uxth	r2, r3
 8002316:	4b2e      	ldr	r3, [pc, #184]	; (80023d0 <cascade_control_with_feed_forward+0x344>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_RESET);
 800231c:	2200      	movs	r2, #0
 800231e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002322:	482c      	ldr	r0, [pc, #176]	; (80023d4 <cascade_control_with_feed_forward+0x348>)
 8002324:	f002 fb28 	bl	8004978 <HAL_GPIO_WritePin>
	else
	{
		__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, abs(PWM_Out));
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_SET);
	}
}
 8002328:	e00f      	b.n	800234a <cascade_control_with_feed_forward+0x2be>
		__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, abs(PWM_Out));
 800232a:	4b27      	ldr	r3, [pc, #156]	; (80023c8 <cascade_control_with_feed_forward+0x33c>)
 800232c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002330:	2b00      	cmp	r3, #0
 8002332:	bfb8      	it	lt
 8002334:	425b      	neglt	r3, r3
 8002336:	b29a      	uxth	r2, r3
 8002338:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <cascade_control_with_feed_forward+0x344>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_SET);
 800233e:	2201      	movs	r2, #1
 8002340:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002344:	4823      	ldr	r0, [pc, #140]	; (80023d4 <cascade_control_with_feed_forward+0x348>)
 8002346:	f002 fb17 	bl	8004978 <HAL_GPIO_WritePin>
}
 800234a:	bf00      	nop
 800234c:	bdb0      	pop	{r4, r5, r7, pc}
 800234e:	bf00      	nop
 8002350:	20000118 	.word	0x20000118
 8002354:	2000011c 	.word	0x2000011c
 8002358:	2000015c 	.word	0x2000015c
 800235c:	20000158 	.word	0x20000158
 8002360:	20000018 	.word	0x20000018
 8002364:	20000024 	.word	0x20000024
 8002368:	20000020 	.word	0x20000020
 800236c:	45bb8000 	.word	0x45bb8000
 8002370:	2000001c 	.word	0x2000001c
 8002374:	45fa0000 	.word	0x45fa0000
 8002378:	44bb8000 	.word	0x44bb8000
 800237c:	453b8000 	.word	0x453b8000
 8002380:	20000144 	.word	0x20000144
 8002384:	20000110 	.word	0x20000110
 8002388:	20000148 	.word	0x20000148
 800238c:	20000154 	.word	0x20000154
 8002390:	447a0000 	.word	0x447a0000
 8002394:	2000014c 	.word	0x2000014c
 8002398:	20000150 	.word	0x20000150
 800239c:	408f4000 	.word	0x408f4000
 80023a0:	20000160 	.word	0x20000160
 80023a4:	20000164 	.word	0x20000164
 80023a8:	bf800000 	.word	0xbf800000
 80023ac:	20000168 	.word	0x20000168
 80023b0:	2000018c 	.word	0x2000018c
 80023b4:	2000016c 	.word	0x2000016c
 80023b8:	20000178 	.word	0x20000178
 80023bc:	20000170 	.word	0x20000170
 80023c0:	20000174 	.word	0x20000174
 80023c4:	2000017c 	.word	0x2000017c
 80023c8:	20000108 	.word	0x20000108
 80023cc:	ffffd8f0 	.word	0xffffd8f0
 80023d0:	2000033c 	.word	0x2000033c
 80023d4:	40020400 	.word	0x40020400

080023d8 <Kalman_Filter>:
void Kalman_Filter()
{
 80023d8:	b5b0      	push	{r4, r5, r7, lr}
 80023da:	ed2d 8b02 	vpush	{d8}
 80023de:	af00      	add	r7, sp, #0
	theta_predict = theta_estimate + omega_estimate*CON_T;
 80023e0:	4bd4      	ldr	r3, [pc, #848]	; (8002734 <Kalman_Filter+0x35c>)
 80023e2:	edd3 7a00 	vldr	s15, [r3]
 80023e6:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 8002738 <Kalman_Filter+0x360>
 80023ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023ee:	4bd3      	ldr	r3, [pc, #844]	; (800273c <Kalman_Filter+0x364>)
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f8:	4bd1      	ldr	r3, [pc, #836]	; (8002740 <Kalman_Filter+0x368>)
 80023fa:	edc3 7a00 	vstr	s15, [r3]
	omega_predict = omega_estimate;
 80023fe:	4bcd      	ldr	r3, [pc, #820]	; (8002734 <Kalman_Filter+0x35c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4ad0      	ldr	r2, [pc, #832]	; (8002744 <Kalman_Filter+0x36c>)
 8002404:	6013      	str	r3, [r2, #0]
	//p_predict = A*p_estimate*transpose(A) + G*Q*transpose(G)
	//p_predict = [p_predict11 p_predict12 ; p_predict21 p_predict22]
	//p_estimate = [p_estimate11 p_estimate12 ; p_estimate21 p_estimate22] -> initial [1 0; 0 1]
	//G = [0.5*dt^2 ; dt]
	//Q = Sigma_a^2
	Q = powf(Sigma_a,2);
 8002406:	4bd0      	ldr	r3, [pc, #832]	; (8002748 <Kalman_Filter+0x370>)
 8002408:	edd3 7a00 	vldr	s15, [r3]
 800240c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002410:	eeb0 0a67 	vmov.f32	s0, s15
 8002414:	f005 fb52 	bl	8007abc <powf>
 8002418:	eef0 7a40 	vmov.f32	s15, s0
 800241c:	4bcb      	ldr	r3, [pc, #812]	; (800274c <Kalman_Filter+0x374>)
 800241e:	edc3 7a00 	vstr	s15, [r3]
	p_predict11 = p_estimate11 + (p_estimate12 + p_estimate21)*CON_T + p_estimate22*powf(CON_T,2)+powf(CON_T,4)*Q/4.0;
 8002422:	4bcb      	ldr	r3, [pc, #812]	; (8002750 <Kalman_Filter+0x378>)
 8002424:	ed93 7a00 	vldr	s14, [r3]
 8002428:	4bca      	ldr	r3, [pc, #808]	; (8002754 <Kalman_Filter+0x37c>)
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002432:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 8002738 <Kalman_Filter+0x360>
 8002436:	ee27 7a87 	vmul.f32	s14, s15, s14
 800243a:	4bc7      	ldr	r3, [pc, #796]	; (8002758 <Kalman_Filter+0x380>)
 800243c:	edd3 7a00 	vldr	s15, [r3]
 8002440:	ee37 8a27 	vadd.f32	s16, s14, s15
 8002444:	eddf 7abc 	vldr	s15, [pc, #752]	; 8002738 <Kalman_Filter+0x360>
 8002448:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800244c:	eeb0 0a67 	vmov.f32	s0, s15
 8002450:	f005 fb34 	bl	8007abc <powf>
 8002454:	eeb0 7a40 	vmov.f32	s14, s0
 8002458:	4bc0      	ldr	r3, [pc, #768]	; (800275c <Kalman_Filter+0x384>)
 800245a:	edd3 7a00 	vldr	s15, [r3]
 800245e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002462:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002466:	ee17 0a90 	vmov	r0, s15
 800246a:	f7fe f819 	bl	80004a0 <__aeabi_f2d>
 800246e:	4604      	mov	r4, r0
 8002470:	460d      	mov	r5, r1
 8002472:	eddf 7ab1 	vldr	s15, [pc, #708]	; 8002738 <Kalman_Filter+0x360>
 8002476:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800247a:	eeb0 0a67 	vmov.f32	s0, s15
 800247e:	f005 fb1d 	bl	8007abc <powf>
 8002482:	eeb0 7a40 	vmov.f32	s14, s0
 8002486:	4bb1      	ldr	r3, [pc, #708]	; (800274c <Kalman_Filter+0x374>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002490:	ee17 0a90 	vmov	r0, s15
 8002494:	f7fe f804 	bl	80004a0 <__aeabi_f2d>
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	4bb0      	ldr	r3, [pc, #704]	; (8002760 <Kalman_Filter+0x388>)
 800249e:	f7fe f981 	bl	80007a4 <__aeabi_ddiv>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4620      	mov	r0, r4
 80024a8:	4629      	mov	r1, r5
 80024aa:	f7fd fe9b 	bl	80001e4 <__adddf3>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	f7fe fae5 	bl	8000a84 <__aeabi_d2f>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4aa9      	ldr	r2, [pc, #676]	; (8002764 <Kalman_Filter+0x38c>)
 80024be:	6013      	str	r3, [r2, #0]
	p_predict12 = p_estimate12 + p_estimate22*CON_T + powf(CON_T,3)*Q/2.0;
 80024c0:	4ba6      	ldr	r3, [pc, #664]	; (800275c <Kalman_Filter+0x384>)
 80024c2:	edd3 7a00 	vldr	s15, [r3]
 80024c6:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8002738 <Kalman_Filter+0x360>
 80024ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024ce:	4ba0      	ldr	r3, [pc, #640]	; (8002750 <Kalman_Filter+0x378>)
 80024d0:	edd3 7a00 	vldr	s15, [r3]
 80024d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d8:	ee17 0a90 	vmov	r0, s15
 80024dc:	f7fd ffe0 	bl	80004a0 <__aeabi_f2d>
 80024e0:	4604      	mov	r4, r0
 80024e2:	460d      	mov	r5, r1
 80024e4:	eddf 7a94 	vldr	s15, [pc, #592]	; 8002738 <Kalman_Filter+0x360>
 80024e8:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80024ec:	eeb0 0a67 	vmov.f32	s0, s15
 80024f0:	f005 fae4 	bl	8007abc <powf>
 80024f4:	eeb0 7a40 	vmov.f32	s14, s0
 80024f8:	4b94      	ldr	r3, [pc, #592]	; (800274c <Kalman_Filter+0x374>)
 80024fa:	edd3 7a00 	vldr	s15, [r3]
 80024fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002502:	ee17 0a90 	vmov	r0, s15
 8002506:	f7fd ffcb 	bl	80004a0 <__aeabi_f2d>
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002512:	f7fe f947 	bl	80007a4 <__aeabi_ddiv>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4620      	mov	r0, r4
 800251c:	4629      	mov	r1, r5
 800251e:	f7fd fe61 	bl	80001e4 <__adddf3>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4610      	mov	r0, r2
 8002528:	4619      	mov	r1, r3
 800252a:	f7fe faab 	bl	8000a84 <__aeabi_d2f>
 800252e:	4603      	mov	r3, r0
 8002530:	4a8d      	ldr	r2, [pc, #564]	; (8002768 <Kalman_Filter+0x390>)
 8002532:	6013      	str	r3, [r2, #0]
	p_predict21 = p_estimate21 + p_estimate22*CON_T + powf(CON_T,3)*Q/2.0;
 8002534:	4b89      	ldr	r3, [pc, #548]	; (800275c <Kalman_Filter+0x384>)
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8002738 <Kalman_Filter+0x360>
 800253e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002542:	4b84      	ldr	r3, [pc, #528]	; (8002754 <Kalman_Filter+0x37c>)
 8002544:	edd3 7a00 	vldr	s15, [r3]
 8002548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254c:	ee17 0a90 	vmov	r0, s15
 8002550:	f7fd ffa6 	bl	80004a0 <__aeabi_f2d>
 8002554:	4604      	mov	r4, r0
 8002556:	460d      	mov	r5, r1
 8002558:	eddf 7a77 	vldr	s15, [pc, #476]	; 8002738 <Kalman_Filter+0x360>
 800255c:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8002560:	eeb0 0a67 	vmov.f32	s0, s15
 8002564:	f005 faaa 	bl	8007abc <powf>
 8002568:	eeb0 7a40 	vmov.f32	s14, s0
 800256c:	4b77      	ldr	r3, [pc, #476]	; (800274c <Kalman_Filter+0x374>)
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002576:	ee17 0a90 	vmov	r0, s15
 800257a:	f7fd ff91 	bl	80004a0 <__aeabi_f2d>
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002586:	f7fe f90d 	bl	80007a4 <__aeabi_ddiv>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4620      	mov	r0, r4
 8002590:	4629      	mov	r1, r5
 8002592:	f7fd fe27 	bl	80001e4 <__adddf3>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	f7fe fa71 	bl	8000a84 <__aeabi_d2f>
 80025a2:	4603      	mov	r3, r0
 80025a4:	4a71      	ldr	r2, [pc, #452]	; (800276c <Kalman_Filter+0x394>)
 80025a6:	6013      	str	r3, [r2, #0]
	p_predict22 = p_estimate22 + powf(CON_T,2)*Q;
 80025a8:	eddf 7a63 	vldr	s15, [pc, #396]	; 8002738 <Kalman_Filter+0x360>
 80025ac:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80025b0:	eeb0 0a67 	vmov.f32	s0, s15
 80025b4:	f005 fa82 	bl	8007abc <powf>
 80025b8:	eeb0 7a40 	vmov.f32	s14, s0
 80025bc:	4b63      	ldr	r3, [pc, #396]	; (800274c <Kalman_Filter+0x374>)
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025c6:	4b65      	ldr	r3, [pc, #404]	; (800275c <Kalman_Filter+0x384>)
 80025c8:	edd3 7a00 	vldr	s15, [r3]
 80025cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d0:	4b67      	ldr	r3, [pc, #412]	; (8002770 <Kalman_Filter+0x398>)
 80025d2:	edc3 7a00 	vstr	s15, [r3]
	//update
	//z_predict = z - C*x_predict
	//z_predict = theta_error
	//z = sensor_theta_input
	//C = [0 1]
	z_predict = Velocity_Now_Rad - omega_predict;
 80025d6:	4b67      	ldr	r3, [pc, #412]	; (8002774 <Kalman_Filter+0x39c>)
 80025d8:	ed93 7a00 	vldr	s14, [r3]
 80025dc:	4b59      	ldr	r3, [pc, #356]	; (8002744 <Kalman_Filter+0x36c>)
 80025de:	edd3 7a00 	vldr	s15, [r3]
 80025e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e6:	4b64      	ldr	r3, [pc, #400]	; (8002778 <Kalman_Filter+0x3a0>)
 80025e8:	edc3 7a00 	vstr	s15, [r3]

	//S = C*p_predict*transpose(C) + R
	//R = Sigma_w^2
	R = powf(Sigma_w,2);
 80025ec:	4b63      	ldr	r3, [pc, #396]	; (800277c <Kalman_Filter+0x3a4>)
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80025f6:	eeb0 0a67 	vmov.f32	s0, s15
 80025fa:	f005 fa5f 	bl	8007abc <powf>
 80025fe:	eef0 7a40 	vmov.f32	s15, s0
 8002602:	4b5f      	ldr	r3, [pc, #380]	; (8002780 <Kalman_Filter+0x3a8>)
 8002604:	edc3 7a00 	vstr	s15, [r3]
	s = p_predict22 + R;
 8002608:	4b59      	ldr	r3, [pc, #356]	; (8002770 <Kalman_Filter+0x398>)
 800260a:	ed93 7a00 	vldr	s14, [r3]
 800260e:	4b5c      	ldr	r3, [pc, #368]	; (8002780 <Kalman_Filter+0x3a8>)
 8002610:	edd3 7a00 	vldr	s15, [r3]
 8002614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002618:	4b5a      	ldr	r3, [pc, #360]	; (8002784 <Kalman_Filter+0x3ac>)
 800261a:	edc3 7a00 	vstr	s15, [r3]

	//K = p_predict*transpose(C)*inv(S)
	//K = [k11;k21]
	k11 = p_predict12/s;
 800261e:	4b52      	ldr	r3, [pc, #328]	; (8002768 <Kalman_Filter+0x390>)
 8002620:	edd3 6a00 	vldr	s13, [r3]
 8002624:	4b57      	ldr	r3, [pc, #348]	; (8002784 <Kalman_Filter+0x3ac>)
 8002626:	ed93 7a00 	vldr	s14, [r3]
 800262a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800262e:	4b56      	ldr	r3, [pc, #344]	; (8002788 <Kalman_Filter+0x3b0>)
 8002630:	edc3 7a00 	vstr	s15, [r3]
	k21 = p_predict22/s;
 8002634:	4b4e      	ldr	r3, [pc, #312]	; (8002770 <Kalman_Filter+0x398>)
 8002636:	edd3 6a00 	vldr	s13, [r3]
 800263a:	4b52      	ldr	r3, [pc, #328]	; (8002784 <Kalman_Filter+0x3ac>)
 800263c:	ed93 7a00 	vldr	s14, [r3]
 8002640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002644:	4b51      	ldr	r3, [pc, #324]	; (800278c <Kalman_Filter+0x3b4>)
 8002646:	edc3 7a00 	vstr	s15, [r3]

	//x_estimate = x_predict + K*z_predict
	theta_estimate = theta_predict + k11*z_predict;
 800264a:	4b4f      	ldr	r3, [pc, #316]	; (8002788 <Kalman_Filter+0x3b0>)
 800264c:	ed93 7a00 	vldr	s14, [r3]
 8002650:	4b49      	ldr	r3, [pc, #292]	; (8002778 <Kalman_Filter+0x3a0>)
 8002652:	edd3 7a00 	vldr	s15, [r3]
 8002656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800265a:	4b39      	ldr	r3, [pc, #228]	; (8002740 <Kalman_Filter+0x368>)
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002664:	4b35      	ldr	r3, [pc, #212]	; (800273c <Kalman_Filter+0x364>)
 8002666:	edc3 7a00 	vstr	s15, [r3]
	omega_estimate = omega_predict + k21*z_predict;
 800266a:	4b48      	ldr	r3, [pc, #288]	; (800278c <Kalman_Filter+0x3b4>)
 800266c:	ed93 7a00 	vldr	s14, [r3]
 8002670:	4b41      	ldr	r3, [pc, #260]	; (8002778 <Kalman_Filter+0x3a0>)
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	ee27 7a27 	vmul.f32	s14, s14, s15
 800267a:	4b32      	ldr	r3, [pc, #200]	; (8002744 <Kalman_Filter+0x36c>)
 800267c:	edd3 7a00 	vldr	s15, [r3]
 8002680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002684:	4b2b      	ldr	r3, [pc, #172]	; (8002734 <Kalman_Filter+0x35c>)
 8002686:	edc3 7a00 	vstr	s15, [r3]

	//p_estimate = (I - K*C)*p_predict
	//I = [1 0; 0 1]
	p_estimate11 = (p_predict11*(p_predict22+R)-p_predict12*p_predict21)/s;
 800268a:	4b39      	ldr	r3, [pc, #228]	; (8002770 <Kalman_Filter+0x398>)
 800268c:	ed93 7a00 	vldr	s14, [r3]
 8002690:	4b3b      	ldr	r3, [pc, #236]	; (8002780 <Kalman_Filter+0x3a8>)
 8002692:	edd3 7a00 	vldr	s15, [r3]
 8002696:	ee37 7a27 	vadd.f32	s14, s14, s15
 800269a:	4b32      	ldr	r3, [pc, #200]	; (8002764 <Kalman_Filter+0x38c>)
 800269c:	edd3 7a00 	vldr	s15, [r3]
 80026a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026a4:	4b30      	ldr	r3, [pc, #192]	; (8002768 <Kalman_Filter+0x390>)
 80026a6:	edd3 6a00 	vldr	s13, [r3]
 80026aa:	4b30      	ldr	r3, [pc, #192]	; (800276c <Kalman_Filter+0x394>)
 80026ac:	edd3 7a00 	vldr	s15, [r3]
 80026b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026b8:	4b32      	ldr	r3, [pc, #200]	; (8002784 <Kalman_Filter+0x3ac>)
 80026ba:	ed93 7a00 	vldr	s14, [r3]
 80026be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026c2:	4b25      	ldr	r3, [pc, #148]	; (8002758 <Kalman_Filter+0x380>)
 80026c4:	edc3 7a00 	vstr	s15, [r3]
	p_estimate12 = p_predict12*R/s;
 80026c8:	4b27      	ldr	r3, [pc, #156]	; (8002768 <Kalman_Filter+0x390>)
 80026ca:	ed93 7a00 	vldr	s14, [r3]
 80026ce:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <Kalman_Filter+0x3a8>)
 80026d0:	edd3 7a00 	vldr	s15, [r3]
 80026d4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80026d8:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <Kalman_Filter+0x3ac>)
 80026da:	ed93 7a00 	vldr	s14, [r3]
 80026de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026e2:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <Kalman_Filter+0x378>)
 80026e4:	edc3 7a00 	vstr	s15, [r3]
	p_estimate21 = p_predict21*R/s;
 80026e8:	4b20      	ldr	r3, [pc, #128]	; (800276c <Kalman_Filter+0x394>)
 80026ea:	ed93 7a00 	vldr	s14, [r3]
 80026ee:	4b24      	ldr	r3, [pc, #144]	; (8002780 <Kalman_Filter+0x3a8>)
 80026f0:	edd3 7a00 	vldr	s15, [r3]
 80026f4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80026f8:	4b22      	ldr	r3, [pc, #136]	; (8002784 <Kalman_Filter+0x3ac>)
 80026fa:	ed93 7a00 	vldr	s14, [r3]
 80026fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002702:	4b14      	ldr	r3, [pc, #80]	; (8002754 <Kalman_Filter+0x37c>)
 8002704:	edc3 7a00 	vstr	s15, [r3]
	p_estimate22 = p_predict22*R/s;
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <Kalman_Filter+0x398>)
 800270a:	ed93 7a00 	vldr	s14, [r3]
 800270e:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <Kalman_Filter+0x3a8>)
 8002710:	edd3 7a00 	vldr	s15, [r3]
 8002714:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002718:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <Kalman_Filter+0x3ac>)
 800271a:	ed93 7a00 	vldr	s14, [r3]
 800271e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <Kalman_Filter+0x384>)
 8002724:	edc3 7a00 	vstr	s15, [r3]
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	ecbd 8b02 	vpop	{d8}
 8002730:	bdb0      	pop	{r4, r5, r7, pc}
 8002732:	bf00      	nop
 8002734:	2000018c 	.word	0x2000018c
 8002738:	3a83126f 	.word	0x3a83126f
 800273c:	20000188 	.word	0x20000188
 8002740:	20000180 	.word	0x20000180
 8002744:	20000184 	.word	0x20000184
 8002748:	20000030 	.word	0x20000030
 800274c:	200001d4 	.word	0x200001d4
 8002750:	200001a0 	.word	0x200001a0
 8002754:	200001a4 	.word	0x200001a4
 8002758:	20000028 	.word	0x20000028
 800275c:	2000002c 	.word	0x2000002c
 8002760:	40100000 	.word	0x40100000
 8002764:	20000190 	.word	0x20000190
 8002768:	20000194 	.word	0x20000194
 800276c:	20000198 	.word	0x20000198
 8002770:	2000019c 	.word	0x2000019c
 8002774:	20000104 	.word	0x20000104
 8002778:	200001a8 	.word	0x200001a8
 800277c:	20000034 	.word	0x20000034
 8002780:	200001d8 	.word	0x200001d8
 8002784:	200001ac 	.word	0x200001ac
 8002788:	200001b0 	.word	0x200001b0
 800278c:	200001b4 	.word	0x200001b4

08002790 <Home_Setting>:

void Home_Setting()
{
 8002790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002794:	af00      	add	r7, sp, #0
	switch (STATE_DISPLAY)
 8002796:	4bae      	ldr	r3, [pc, #696]	; (8002a50 <Home_Setting+0x2c0>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b04      	cmp	r3, #4
 800279c:	f200 8145 	bhi.w	8002a2a <Home_Setting+0x29a>
 80027a0:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <Home_Setting+0x18>)
 80027a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a6:	bf00      	nop
 80027a8:	080027bd 	.word	0x080027bd
 80027ac:	0800282b 	.word	0x0800282b
 80027b0:	080028f9 	.word	0x080028f9
 80027b4:	08002911 	.word	0x08002911
 80027b8:	08002973 	.word	0x08002973
	{
	case FindPorximity:
		PWM_Out = 5000;
 80027bc:	4ba5      	ldr	r3, [pc, #660]	; (8002a54 <Home_Setting+0x2c4>)
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, abs(PWM_Out));
 80027c4:	4ba3      	ldr	r3, [pc, #652]	; (8002a54 <Home_Setting+0x2c4>)
 80027c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	bfb8      	it	lt
 80027ce:	425b      	neglt	r3, r3
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	4ba1      	ldr	r3, [pc, #644]	; (8002a58 <Home_Setting+0x2c8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_SET);
 80027d8:	2201      	movs	r2, #1
 80027da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027de:	489f      	ldr	r0, [pc, #636]	; (8002a5c <Home_Setting+0x2cc>)
 80027e0:	f002 f8ca 	bl	8004978 <HAL_GPIO_WritePin>
		if (Proximity[0] == GPIO_PIN_SET && Proximity[1] == GPIO_PIN_RESET) //if not set home & proximity detects robot arm
 80027e4:	4b9e      	ldr	r3, [pc, #632]	; (8002a60 <Home_Setting+0x2d0>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	f040 8120 	bne.w	8002a2e <Home_Setting+0x29e>
 80027ee:	4b9c      	ldr	r3, [pc, #624]	; (8002a60 <Home_Setting+0x2d0>)
 80027f0:	785b      	ldrb	r3, [r3, #1]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f040 811b 	bne.w	8002a2e <Home_Setting+0x29e>
		{
			find_proximity = 1;
 80027f8:	4b9a      	ldr	r3, [pc, #616]	; (8002a64 <Home_Setting+0x2d4>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
			save_angle = Position_Now_Rad; //save angle that proximity detect robot arm
 80027fe:	4b9a      	ldr	r3, [pc, #616]	; (8002a68 <Home_Setting+0x2d8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a9a      	ldr	r2, [pc, #616]	; (8002a6c <Home_Setting+0x2dc>)
 8002804:	6013      	str	r3, [r2, #0]
			Time_Delay = micros();
 8002806:	f000 fe79 	bl	80034fc <micros>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4998      	ldr	r1, [pc, #608]	; (8002a70 <Home_Setting+0x2e0>)
 8002810:	e9c1 2300 	strd	r2, r3, [r1]
			Prox_Delay = micros();
 8002814:	f000 fe72 	bl	80034fc <micros>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4995      	ldr	r1, [pc, #596]	; (8002a74 <Home_Setting+0x2e4>)
 800281e:	e9c1 2300 	strd	r2, r3, [r1]
			STATE_DISPLAY = FoundProximity;
 8002822:	4b8b      	ldr	r3, [pc, #556]	; (8002a50 <Home_Setting+0x2c0>)
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002828:	e101      	b.n	8002a2e <Home_Setting+0x29e>
	case FoundProximity:
		if(micros() - Time_Delay >= 1000000){
 800282a:	f000 fe67 	bl	80034fc <micros>
 800282e:	4b90      	ldr	r3, [pc, #576]	; (8002a70 <Home_Setting+0x2e0>)
 8002830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002834:	ebb0 0a02 	subs.w	sl, r0, r2
 8002838:	eb61 0b03 	sbc.w	fp, r1, r3
 800283c:	4a8e      	ldr	r2, [pc, #568]	; (8002a78 <Home_Setting+0x2e8>)
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	455b      	cmp	r3, fp
 8002844:	bf08      	it	eq
 8002846:	4552      	cmpeq	r2, sl
 8002848:	d22b      	bcs.n	80028a2 <Home_Setting+0x112>
			Time_Delay = micros();
 800284a:	f000 fe57 	bl	80034fc <micros>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4987      	ldr	r1, [pc, #540]	; (8002a70 <Home_Setting+0x2e0>)
 8002854:	e9c1 2300 	strd	r2, r3, [r1]
			for ( i = 0; i < 8; ++i) {
 8002858:	4b88      	ldr	r3, [pc, #544]	; (8002a7c <Home_Setting+0x2ec>)
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	e01c      	b.n	800289a <Home_Setting+0x10a>
					PWM_Out = 3*PWM_Out/4;
 8002860:	4b7c      	ldr	r3, [pc, #496]	; (8002a54 <Home_Setting+0x2c4>)
 8002862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002866:	461a      	mov	r2, r3
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	da00      	bge.n	8002874 <Home_Setting+0xe4>
 8002872:	3303      	adds	r3, #3
 8002874:	109b      	asrs	r3, r3, #2
 8002876:	b21a      	sxth	r2, r3
 8002878:	4b76      	ldr	r3, [pc, #472]	; (8002a54 <Home_Setting+0x2c4>)
 800287a:	801a      	strh	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, abs(PWM_Out));
 800287c:	4b75      	ldr	r3, [pc, #468]	; (8002a54 <Home_Setting+0x2c4>)
 800287e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002882:	2b00      	cmp	r3, #0
 8002884:	bfb8      	it	lt
 8002886:	425b      	neglt	r3, r3
 8002888:	b29a      	uxth	r2, r3
 800288a:	4b73      	ldr	r3, [pc, #460]	; (8002a58 <Home_Setting+0x2c8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	641a      	str	r2, [r3, #64]	; 0x40
			for ( i = 0; i < 8; ++i) {
 8002890:	4b7a      	ldr	r3, [pc, #488]	; (8002a7c <Home_Setting+0x2ec>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	3301      	adds	r3, #1
 8002896:	4a79      	ldr	r2, [pc, #484]	; (8002a7c <Home_Setting+0x2ec>)
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	4b78      	ldr	r3, [pc, #480]	; (8002a7c <Home_Setting+0x2ec>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b07      	cmp	r3, #7
 80028a0:	ddde      	ble.n	8002860 <Home_Setting+0xd0>
			}
		}

		if(i == 8){
 80028a2:	4b76      	ldr	r3, [pc, #472]	; (8002a7c <Home_Setting+0x2ec>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	f040 80c3 	bne.w	8002a32 <Home_Setting+0x2a2>
			if (micros() - Prox_Delay >= 500000){
 80028ac:	f000 fe26 	bl	80034fc <micros>
 80028b0:	4b70      	ldr	r3, [pc, #448]	; (8002a74 <Home_Setting+0x2e4>)
 80028b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b6:	ebb0 0802 	subs.w	r8, r0, r2
 80028ba:	eb61 0903 	sbc.w	r9, r1, r3
 80028be:	4a70      	ldr	r2, [pc, #448]	; (8002a80 <Home_Setting+0x2f0>)
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	454b      	cmp	r3, r9
 80028c6:	bf08      	it	eq
 80028c8:	4542      	cmpeq	r2, r8
 80028ca:	d20c      	bcs.n	80028e6 <Home_Setting+0x156>
				Prox_Delay = micros();
 80028cc:	f000 fe16 	bl	80034fc <micros>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4967      	ldr	r1, [pc, #412]	; (8002a74 <Home_Setting+0x2e4>)
 80028d6:	e9c1 2300 	strd	r2, r3, [r1]
				Delay += 1;
 80028da:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <Home_Setting+0x2f4>)
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	3301      	adds	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	4b68      	ldr	r3, [pc, #416]	; (8002a84 <Home_Setting+0x2f4>)
 80028e4:	801a      	strh	r2, [r3, #0]
			}
			if(Delay >= 2){
 80028e6:	4b67      	ldr	r3, [pc, #412]	; (8002a84 <Home_Setting+0x2f4>)
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	f240 80a1 	bls.w	8002a32 <Home_Setting+0x2a2>
				STATE_DISPLAY = GotoProximity;
 80028f0:	4b57      	ldr	r3, [pc, #348]	; (8002a50 <Home_Setting+0x2c0>)
 80028f2:	2202      	movs	r2, #2
 80028f4:	701a      	strb	r2, [r3, #0]
			}

		}
		break;
 80028f6:	e09c      	b.n	8002a32 <Home_Setting+0x2a2>
	case GotoProximity:
		angle_rad_start = Position_Now_Rad;
 80028f8:	4b5b      	ldr	r3, [pc, #364]	; (8002a68 <Home_Setting+0x2d8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a62      	ldr	r2, [pc, #392]	; (8002a88 <Home_Setting+0x2f8>)
 80028fe:	6013      	str	r3, [r2, #0]
		angle_rad_stop = save_angle;
 8002900:	4b5a      	ldr	r3, [pc, #360]	; (8002a6c <Home_Setting+0x2dc>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a61      	ldr	r2, [pc, #388]	; (8002a8c <Home_Setting+0x2fc>)
 8002906:	6013      	str	r3, [r2, #0]
		STATE_DISPLAY = QinticFinish;
 8002908:	4b51      	ldr	r3, [pc, #324]	; (8002a50 <Home_Setting+0x2c0>)
 800290a:	2204      	movs	r2, #4
 800290c:	701a      	strb	r2, [r3, #0]
		break;
 800290e:	e095      	b.n	8002a3c <Home_Setting+0x2ac>
	case QinticStaff:
		i = 0;
 8002910:	4b5a      	ldr	r3, [pc, #360]	; (8002a7c <Home_Setting+0x2ec>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
		j=0;
 8002916:	4b5e      	ldr	r3, [pc, #376]	; (8002a90 <Home_Setting+0x300>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
		quintic();
 800291c:	f7ff f8f4 	bl	8001b08 <quintic>
		if (initial == 1){
 8002920:	4b5c      	ldr	r3, [pc, #368]	; (8002a94 <Home_Setting+0x304>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b01      	cmp	r3, #1
 8002926:	f040 8086 	bne.w	8002a36 <Home_Setting+0x2a6>
			if (micros() - Prox_Delay >= 500000){
 800292a:	f000 fde7 	bl	80034fc <micros>
 800292e:	4b51      	ldr	r3, [pc, #324]	; (8002a74 <Home_Setting+0x2e4>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	1a84      	subs	r4, r0, r2
 8002936:	eb61 0503 	sbc.w	r5, r1, r3
 800293a:	4a51      	ldr	r2, [pc, #324]	; (8002a80 <Home_Setting+0x2f0>)
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	42ab      	cmp	r3, r5
 8002942:	bf08      	it	eq
 8002944:	42a2      	cmpeq	r2, r4
 8002946:	d20c      	bcs.n	8002962 <Home_Setting+0x1d2>
				Prox_Delay = micros();
 8002948:	f000 fdd8 	bl	80034fc <micros>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4948      	ldr	r1, [pc, #288]	; (8002a74 <Home_Setting+0x2e4>)
 8002952:	e9c1 2300 	strd	r2, r3, [r1]
				Delay += 1;
 8002956:	4b4b      	ldr	r3, [pc, #300]	; (8002a84 <Home_Setting+0x2f4>)
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	3301      	adds	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	4b49      	ldr	r3, [pc, #292]	; (8002a84 <Home_Setting+0x2f4>)
 8002960:	801a      	strh	r2, [r3, #0]
			}
			if(Delay >= 5){
 8002962:	4b48      	ldr	r3, [pc, #288]	; (8002a84 <Home_Setting+0x2f4>)
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	2b04      	cmp	r3, #4
 8002968:	d965      	bls.n	8002a36 <Home_Setting+0x2a6>
				STATE_DISPLAY = GotoProximity;
 800296a:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <Home_Setting+0x2c0>)
 800296c:	2202      	movs	r2, #2
 800296e:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
 8002970:	e061      	b.n	8002a36 <Home_Setting+0x2a6>
	case QinticFinish:
		quintic();
 8002972:	f7ff f8c9 	bl	8001b08 <quintic>
		if (initial == 1){
 8002976:	4b47      	ldr	r3, [pc, #284]	; (8002a94 <Home_Setting+0x304>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d15d      	bne.n	8002a3a <Home_Setting+0x2aa>
			if (micros()/1000000.0 - time_initial >= tau_max + 2)
 800297e:	f000 fdbd 	bl	80034fc <micros>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4610      	mov	r0, r2
 8002988:	4619      	mov	r1, r3
 800298a:	f7fd fdab 	bl	80004e4 <__aeabi_ul2d>
 800298e:	a32e      	add	r3, pc, #184	; (adr r3, 8002a48 <Home_Setting+0x2b8>)
 8002990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002994:	f7fd ff06 	bl	80007a4 <__aeabi_ddiv>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4614      	mov	r4, r2
 800299e:	461d      	mov	r5, r3
 80029a0:	4b3d      	ldr	r3, [pc, #244]	; (8002a98 <Home_Setting+0x308>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fd fd7b 	bl	80004a0 <__aeabi_f2d>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4620      	mov	r0, r4
 80029b0:	4629      	mov	r1, r5
 80029b2:	f7fd fc15 	bl	80001e0 <__aeabi_dsub>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4614      	mov	r4, r2
 80029bc:	461d      	mov	r5, r3
 80029be:	4b37      	ldr	r3, [pc, #220]	; (8002a9c <Home_Setting+0x30c>)
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80029c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029cc:	ee17 0a90 	vmov	r0, s15
 80029d0:	f7fd fd66 	bl	80004a0 <__aeabi_f2d>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4620      	mov	r0, r4
 80029da:	4629      	mov	r1, r5
 80029dc:	f7fe f83e 	bl	8000a5c <__aeabi_dcmpge>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d100      	bne.n	80029e8 <Home_Setting+0x258>
				clear_counter_velocity = 1;
			}


		}
		break;
 80029e6:	e028      	b.n	8002a3a <Home_Setting+0x2aa>
				Prox_Delay = micros();
 80029e8:	f000 fd88 	bl	80034fc <micros>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4920      	ldr	r1, [pc, #128]	; (8002a74 <Home_Setting+0x2e4>)
 80029f2:	e9c1 2300 	strd	r2, r3, [r1]
				set_home_finished = 1;
 80029f6:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <Home_Setting+0x310>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
				angle_rad_start = 0;
 80029fc:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <Home_Setting+0x2f8>)
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
				angle_rad_stop = 0;
 8002a04:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <Home_Setting+0x2fc>)
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
				htim1.Instance->CNT = 0;
 8002a0c:	4b25      	ldr	r3, [pc, #148]	; (8002aa4 <Home_Setting+0x314>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2200      	movs	r2, #0
 8002a12:	625a      	str	r2, [r3, #36]	; 0x24
				Position_Now_Rad = 0;
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <Home_Setting+0x2d8>)
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
				clear_counter_position = 1;
 8002a1c:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <Home_Setting+0x318>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	701a      	strb	r2, [r3, #0]
				clear_counter_velocity = 1;
 8002a22:	4b22      	ldr	r3, [pc, #136]	; (8002aac <Home_Setting+0x31c>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
		break;
 8002a28:	e007      	b.n	8002a3a <Home_Setting+0x2aa>
	default:
		break;
 8002a2a:	bf00      	nop
 8002a2c:	e006      	b.n	8002a3c <Home_Setting+0x2ac>
		break;
 8002a2e:	bf00      	nop
 8002a30:	e004      	b.n	8002a3c <Home_Setting+0x2ac>
		break;
 8002a32:	bf00      	nop
 8002a34:	e002      	b.n	8002a3c <Home_Setting+0x2ac>
		break;
 8002a36:	bf00      	nop
 8002a38:	e000      	b.n	8002a3c <Home_Setting+0x2ac>
		break;
 8002a3a:	bf00      	nop
	}
}
 8002a3c:	bf00      	nop
 8002a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a42:	bf00      	nop
 8002a44:	f3af 8000 	nop.w
 8002a48:	00000000 	.word	0x00000000
 8002a4c:	412e8480 	.word	0x412e8480
 8002a50:	200001e8 	.word	0x200001e8
 8002a54:	20000108 	.word	0x20000108
 8002a58:	2000033c 	.word	0x2000033c
 8002a5c:	40020400 	.word	0x40020400
 8002a60:	20000384 	.word	0x20000384
 8002a64:	200001e4 	.word	0x200001e4
 8002a68:	20000110 	.word	0x20000110
 8002a6c:	200001e0 	.word	0x200001e0
 8002a70:	200001c0 	.word	0x200001c0
 8002a74:	200001b8 	.word	0x200001b8
 8002a78:	000f423f 	.word	0x000f423f
 8002a7c:	200001c8 	.word	0x200001c8
 8002a80:	0007a11f 	.word	0x0007a11f
 8002a84:	200001d0 	.word	0x200001d0
 8002a88:	20000118 	.word	0x20000118
 8002a8c:	2000011c 	.word	0x2000011c
 8002a90:	200001cc 	.word	0x200001cc
 8002a94:	20000014 	.word	0x20000014
 8002a98:	20000124 	.word	0x20000124
 8002a9c:	20000120 	.word	0x20000120
 8002aa0:	200001dc 	.word	0x200001dc
 8002aa4:	200003e8 	.word	0x200003e8
 8002aa8:	200001ea 	.word	0x200001ea
 8002aac:	200001e9 	.word	0x200001e9

08002ab0 <UARTInit>:
void UARTInit(UARTStucrture *uart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8002ab8:	4b10      	ldr	r3, [pc, #64]	; (8002afc <UARTInit+0x4c>)
 8002aba:	88db      	ldrh	r3, [r3, #6]
 8002abc:	4619      	mov	r1, r3
 8002abe:	2001      	movs	r0, #1
 8002ac0:	f004 ff2c 	bl	800791c <calloc>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <UARTInit+0x4c>)
 8002ace:	889b      	ldrh	r3, [r3, #4]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	f004 ff22 	bl	800791c <calloc>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461a      	mov	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	81da      	strh	r2, [r3, #14]

}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	200001ec 	.word	0x200001ec

08002b00 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6919      	ldr	r1, [r3, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	88db      	ldrh	r3, [r3, #6]
 8002b14:	461a      	mov	r2, r3
 8002b16:	f004 f87d 	bl	8006c14 <HAL_UART_Receive_DMA>
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	88db      	ldrh	r3, [r3, #6]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	1ad3      	subs	r3, r2, r3
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8002b50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b54:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8a9b      	ldrh	r3, [r3, #20]
 8002b5a:	461c      	mov	r4, r3
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ffe0 	bl	8002b22 <UARTGetRxHead>
 8002b62:	4603      	mov	r3, r0
 8002b64:	429c      	cmp	r4, r3
 8002b66:	d013      	beq.n	8002b90 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	8a92      	ldrh	r2, [r2, #20]
 8002b70:	4413      	add	r3, r2
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	8a9b      	ldrh	r3, [r3, #20]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	88d2      	ldrh	r2, [r2, #6]
 8002b80:	fb93 f1f2 	sdiv	r1, r3, r2
 8002b84:	fb02 f201 	mul.w	r2, r2, r1
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8002b90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd90      	pop	{r4, r7, pc}

08002b9c <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	d13d      	bne.n	8002c2e <UARTTxDumpBuffer+0x92>
 8002bb2:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <UARTTxDumpBuffer+0x9c>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d139      	bne.n	8002c2e <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 8002bba:	4b1f      	ldr	r3, [pc, #124]	; (8002c38 <UARTTxDumpBuffer+0x9c>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	89da      	ldrh	r2, [r3, #14]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	899b      	ldrh	r3, [r3, #12]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d02d      	beq.n	8002c28 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	89da      	ldrh	r2, [r3, #14]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d906      	bls.n	8002be6 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	89da      	ldrh	r2, [r3, #14]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	e005      	b.n	8002bf2 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	889a      	ldrh	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	8992      	ldrh	r2, [r2, #12]
 8002c00:	4413      	add	r3, r2
 8002c02:	89fa      	ldrh	r2, [r7, #14]
 8002c04:	4619      	mov	r1, r3
 8002c06:	f003 ff99 	bl	8006b3c <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	899b      	ldrh	r3, [r3, #12]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	89fb      	ldrh	r3, [r7, #14]
 8002c12:	4413      	add	r3, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	8892      	ldrh	r2, [r2, #4]
 8002c18:	fb93 f1f2 	sdiv	r1, r3, r2
 8002c1c:	fb02 f201 	mul.w	r2, r2, r1
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <UARTTxDumpBuffer+0x9c>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
	}
}
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000228 	.word	0x20000228

08002c3c <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	4613      	mov	r3, r2
 8002c48:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	889b      	ldrh	r3, [r3, #4]
 8002c4e:	88fa      	ldrh	r2, [r7, #6]
 8002c50:	4293      	cmp	r3, r2
 8002c52:	bf28      	it	cs
 8002c54:	4613      	movcs	r3, r2
 8002c56:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002c58:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	889b      	ldrh	r3, [r3, #4]
 8002c5e:	4619      	mov	r1, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	89db      	ldrh	r3, [r3, #14]
 8002c64:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002c66:	4293      	cmp	r3, r2
 8002c68:	bfa8      	it	ge
 8002c6a:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8002c6c:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	89d2      	ldrh	r2, [r2, #14]
 8002c76:	4413      	add	r3, r2
 8002c78:	8aba      	ldrh	r2, [r7, #20]
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f004 fe7f 	bl	8007980 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	89db      	ldrh	r3, [r3, #14]
 8002c86:	461a      	mov	r2, r3
 8002c88:	8afb      	ldrh	r3, [r7, #22]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	8892      	ldrh	r2, [r2, #4]
 8002c90:	fb93 f1f2 	sdiv	r1, r3, r2
 8002c94:	fb02 f201 	mul.w	r2, r2, r1
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8002ca0:	8afa      	ldrh	r2, [r7, #22]
 8002ca2:	8abb      	ldrh	r3, [r7, #20]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d00a      	beq.n	8002cbe <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6898      	ldr	r0, [r3, #8]
 8002cac:	8abb      	ldrh	r3, [r7, #20]
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8002cb2:	8afa      	ldrh	r2, [r7, #22]
 8002cb4:	8abb      	ldrh	r3, [r7, #20]
 8002cb6:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002cb8:	461a      	mov	r2, r3
 8002cba:	f004 fe61 	bl	8007980 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f7ff ff6c 	bl	8002b9c <UARTTxDumpBuffer>

}
 8002cc4:	bf00      	nop
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <UART_Protocol>:
void UART_Protocol(UARTStucrture *uart, int16_t dataIn)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
	if (State == Start_Mode)
 8002cd8:	4bcb      	ldr	r3, [pc, #812]	; (8003008 <UART_Protocol+0x33c>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d108      	bne.n	8002cf2 <UART_Protocol+0x26>
	{
		N_Data = 0;
 8002ce0:	4bca      	ldr	r3, [pc, #808]	; (800300c <UART_Protocol+0x340>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
		Data_List[0] = 0;
 8002ce6:	4bca      	ldr	r3, [pc, #808]	; (8003010 <UART_Protocol+0x344>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
		Data_List[1] = 0;
 8002cec:	4bc8      	ldr	r3, [pc, #800]	; (8003010 <UART_Protocol+0x344>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	705a      	strb	r2, [r3, #1]
	}
	switch (State)
 8002cf2:	4bc5      	ldr	r3, [pc, #788]	; (8003008 <UART_Protocol+0x33c>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	f200 828a 	bhi.w	8003210 <UART_Protocol+0x544>
 8002cfc:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <UART_Protocol+0x38>)
 8002cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d02:	bf00      	nop
 8002d04:	08002d15 	.word	0x08002d15
 8002d08:	08002fa3 	.word	0x08002fa3
 8002d0c:	08002fb3 	.word	0x08002fb3
 8002d10:	0800307d 	.word	0x0800307d
	{
	case Start_Mode:
		Mode = dataIn;
 8002d14:	887b      	ldrh	r3, [r7, #2]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	4bbe      	ldr	r3, [pc, #760]	; (8003014 <UART_Protocol+0x348>)
 8002d1a:	701a      	strb	r2, [r3, #0]

		switch (Mode)
 8002d1c:	4bbd      	ldr	r3, [pc, #756]	; (8003014 <UART_Protocol+0x348>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	3b46      	subs	r3, #70	; 0x46
 8002d22:	2b58      	cmp	r3, #88	; 0x58
 8002d24:	f200 8126 	bhi.w	8002f74 <UART_Protocol+0x2a8>
 8002d28:	a201      	add	r2, pc, #4	; (adr r2, 8002d30 <UART_Protocol+0x64>)
 8002d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2e:	bf00      	nop
 8002d30:	08002e95 	.word	0x08002e95
 8002d34:	08002f75 	.word	0x08002f75
 8002d38:	08002f75 	.word	0x08002f75
 8002d3c:	08002f75 	.word	0x08002f75
 8002d40:	08002f75 	.word	0x08002f75
 8002d44:	08002f75 	.word	0x08002f75
 8002d48:	08002f75 	.word	0x08002f75
 8002d4c:	08002f75 	.word	0x08002f75
 8002d50:	08002f75 	.word	0x08002f75
 8002d54:	08002f75 	.word	0x08002f75
 8002d58:	08002f75 	.word	0x08002f75
 8002d5c:	08002f75 	.word	0x08002f75
 8002d60:	08002f75 	.word	0x08002f75
 8002d64:	08002f75 	.word	0x08002f75
 8002d68:	08002f75 	.word	0x08002f75
 8002d6c:	08002f75 	.word	0x08002f75
 8002d70:	08002f75 	.word	0x08002f75
 8002d74:	08002f75 	.word	0x08002f75
 8002d78:	08002ea3 	.word	0x08002ea3
 8002d7c:	08002f75 	.word	0x08002f75
 8002d80:	08002f75 	.word	0x08002f75
 8002d84:	08002f75 	.word	0x08002f75
 8002d88:	08002f75 	.word	0x08002f75
 8002d8c:	08002f75 	.word	0x08002f75
 8002d90:	08002f75 	.word	0x08002f75
 8002d94:	08002f75 	.word	0x08002f75
 8002d98:	08002f75 	.word	0x08002f75
 8002d9c:	08002f75 	.word	0x08002f75
 8002da0:	08002f75 	.word	0x08002f75
 8002da4:	08002f75 	.word	0x08002f75
 8002da8:	08002f75 	.word	0x08002f75
 8002dac:	08002f75 	.word	0x08002f75
 8002db0:	08002f75 	.word	0x08002f75
 8002db4:	08002f75 	.word	0x08002f75
 8002db8:	08002f75 	.word	0x08002f75
 8002dbc:	08002f75 	.word	0x08002f75
 8002dc0:	08002f75 	.word	0x08002f75
 8002dc4:	08002f75 	.word	0x08002f75
 8002dc8:	08002f75 	.word	0x08002f75
 8002dcc:	08002f75 	.word	0x08002f75
 8002dd0:	08002f75 	.word	0x08002f75
 8002dd4:	08002f75 	.word	0x08002f75
 8002dd8:	08002f75 	.word	0x08002f75
 8002ddc:	08002f75 	.word	0x08002f75
 8002de0:	08002f75 	.word	0x08002f75
 8002de4:	08002f75 	.word	0x08002f75
 8002de8:	08002f75 	.word	0x08002f75
 8002dec:	08002f75 	.word	0x08002f75
 8002df0:	08002f75 	.word	0x08002f75
 8002df4:	08002f75 	.word	0x08002f75
 8002df8:	08002f75 	.word	0x08002f75
 8002dfc:	08002f75 	.word	0x08002f75
 8002e00:	08002f75 	.word	0x08002f75
 8002e04:	08002f75 	.word	0x08002f75
 8002e08:	08002f75 	.word	0x08002f75
 8002e0c:	08002f75 	.word	0x08002f75
 8002e10:	08002f75 	.word	0x08002f75
 8002e14:	08002f75 	.word	0x08002f75
 8002e18:	08002f75 	.word	0x08002f75
 8002e1c:	08002f75 	.word	0x08002f75
 8002e20:	08002f75 	.word	0x08002f75
 8002e24:	08002f75 	.word	0x08002f75
 8002e28:	08002f75 	.word	0x08002f75
 8002e2c:	08002f75 	.word	0x08002f75
 8002e30:	08002f75 	.word	0x08002f75
 8002e34:	08002f75 	.word	0x08002f75
 8002e38:	08002f75 	.word	0x08002f75
 8002e3c:	08002f75 	.word	0x08002f75
 8002e40:	08002f75 	.word	0x08002f75
 8002e44:	08002f75 	.word	0x08002f75
 8002e48:	08002f75 	.word	0x08002f75
 8002e4c:	08002f75 	.word	0x08002f75
 8002e50:	08002f75 	.word	0x08002f75
 8002e54:	08002f75 	.word	0x08002f75
 8002e58:	08002f75 	.word	0x08002f75
 8002e5c:	08002eb1 	.word	0x08002eb1
 8002e60:	08002ebf 	.word	0x08002ebf
 8002e64:	08002ecd 	.word	0x08002ecd
 8002e68:	08002edb 	.word	0x08002edb
 8002e6c:	08002ee9 	.word	0x08002ee9
 8002e70:	08002ef7 	.word	0x08002ef7
 8002e74:	08002f05 	.word	0x08002f05
 8002e78:	08002f13 	.word	0x08002f13
 8002e7c:	08002f21 	.word	0x08002f21
 8002e80:	08002f2f 	.word	0x08002f2f
 8002e84:	08002f3d 	.word	0x08002f3d
 8002e88:	08002f4b 	.word	0x08002f4b
 8002e8c:	08002f59 	.word	0x08002f59
 8002e90:	08002f67 	.word	0x08002f67
		{
		case Ack2:
			Frame = 0;
 8002e94:	4b60      	ldr	r3, [pc, #384]	; (8003018 <UART_Protocol+0x34c>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002e9a:	4b5b      	ldr	r3, [pc, #364]	; (8003008 <UART_Protocol+0x33c>)
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	701a      	strb	r2, [r3, #0]
			break;
 8002ea0:	e07e      	b.n	8002fa0 <UART_Protocol+0x2d4>
		case Ack1:
			Frame = 0;
 8002ea2:	4b5d      	ldr	r3, [pc, #372]	; (8003018 <UART_Protocol+0x34c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002ea8:	4b57      	ldr	r3, [pc, #348]	; (8003008 <UART_Protocol+0x33c>)
 8002eaa:	2203      	movs	r2, #3
 8002eac:	701a      	strb	r2, [r3, #0]
			break;
 8002eae:	e077      	b.n	8002fa0 <UART_Protocol+0x2d4>
		case Test_Command:
			Frame = 2;
 8002eb0:	4b59      	ldr	r3, [pc, #356]	; (8003018 <UART_Protocol+0x34c>)
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 8002eb6:	4b54      	ldr	r3, [pc, #336]	; (8003008 <UART_Protocol+0x33c>)
 8002eb8:	2202      	movs	r2, #2
 8002eba:	701a      	strb	r2, [r3, #0]
			break;
 8002ebc:	e070      	b.n	8002fa0 <UART_Protocol+0x2d4>
		case Connect_MCU:
			Frame = 0;
 8002ebe:	4b56      	ldr	r3, [pc, #344]	; (8003018 <UART_Protocol+0x34c>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002ec4:	4b50      	ldr	r3, [pc, #320]	; (8003008 <UART_Protocol+0x33c>)
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	701a      	strb	r2, [r3, #0]
			break;
 8002eca:	e069      	b.n	8002fa0 <UART_Protocol+0x2d4>
		case Disconnect_MCU:
			Frame = 1;
 8002ecc:	4b52      	ldr	r3, [pc, #328]	; (8003018 <UART_Protocol+0x34c>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002ed2:	4b4d      	ldr	r3, [pc, #308]	; (8003008 <UART_Protocol+0x33c>)
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	701a      	strb	r2, [r3, #0]
			break;
 8002ed8:	e062      	b.n	8002fa0 <UART_Protocol+0x2d4>
		case Velocity_Set:
			Frame = 2;
 8002eda:	4b4f      	ldr	r3, [pc, #316]	; (8003018 <UART_Protocol+0x34c>)
 8002edc:	2202      	movs	r2, #2
 8002ede:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 8002ee0:	4b49      	ldr	r3, [pc, #292]	; (8003008 <UART_Protocol+0x33c>)
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	701a      	strb	r2, [r3, #0]
			break;
 8002ee6:	e05b      	b.n	8002fa0 <UART_Protocol+0x2d4>
		case Position_Set:
			Frame = 2;
 8002ee8:	4b4b      	ldr	r3, [pc, #300]	; (8003018 <UART_Protocol+0x34c>)
 8002eea:	2202      	movs	r2, #2
 8002eec:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 8002eee:	4b46      	ldr	r3, [pc, #280]	; (8003008 <UART_Protocol+0x33c>)
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	701a      	strb	r2, [r3, #0]
			break;
 8002ef4:	e054      	b.n	8002fa0 <UART_Protocol+0x2d4>
		case Goal_1_Set:
			Frame = 2;
 8002ef6:	4b48      	ldr	r3, [pc, #288]	; (8003018 <UART_Protocol+0x34c>)
 8002ef8:	2202      	movs	r2, #2
 8002efa:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 8002efc:	4b42      	ldr	r3, [pc, #264]	; (8003008 <UART_Protocol+0x33c>)
 8002efe:	2202      	movs	r2, #2
 8002f00:	701a      	strb	r2, [r3, #0]
			break;
 8002f02:	e04d      	b.n	8002fa0 <UART_Protocol+0x2d4>
		case Goal_N_Set:
			Frame = 3;
 8002f04:	4b44      	ldr	r3, [pc, #272]	; (8003018 <UART_Protocol+0x34c>)
 8002f06:	2203      	movs	r2, #3
 8002f08:	701a      	strb	r2, [r3, #0]
			State = N_Station;
 8002f0a:	4b3f      	ldr	r3, [pc, #252]	; (8003008 <UART_Protocol+0x33c>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
			break;
 8002f10:	e046      	b.n	8002fa0 <UART_Protocol+0x2d4>
		case Go_to_Goal:
			Frame = 1;
 8002f12:	4b41      	ldr	r3, [pc, #260]	; (8003018 <UART_Protocol+0x34c>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002f18:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <UART_Protocol+0x33c>)
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	701a      	strb	r2, [r3, #0]
			break;
 8002f1e:	e03f      	b.n	8002fa0 <UART_Protocol+0x2d4>
		case Station_Request:
			Frame = 1;
 8002f20:	4b3d      	ldr	r3, [pc, #244]	; (8003018 <UART_Protocol+0x34c>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002f26:	4b38      	ldr	r3, [pc, #224]	; (8003008 <UART_Protocol+0x33c>)
 8002f28:	2203      	movs	r2, #3
 8002f2a:	701a      	strb	r2, [r3, #0]
			break;
 8002f2c:	e038      	b.n	8002fa0 <UART_Protocol+0x2d4>
		case Position_Request:
			Frame = 1;
 8002f2e:	4b3a      	ldr	r3, [pc, #232]	; (8003018 <UART_Protocol+0x34c>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002f34:	4b34      	ldr	r3, [pc, #208]	; (8003008 <UART_Protocol+0x33c>)
 8002f36:	2203      	movs	r2, #3
 8002f38:	701a      	strb	r2, [r3, #0]
			break;
 8002f3a:	e031      	b.n	8002fa0 <UART_Protocol+0x2d4>
		case Velocity_Request:
			Frame = 1;
 8002f3c:	4b36      	ldr	r3, [pc, #216]	; (8003018 <UART_Protocol+0x34c>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002f42:	4b31      	ldr	r3, [pc, #196]	; (8003008 <UART_Protocol+0x33c>)
 8002f44:	2203      	movs	r2, #3
 8002f46:	701a      	strb	r2, [r3, #0]
			break;
 8002f48:	e02a      	b.n	8002fa0 <UART_Protocol+0x2d4>
		case Gripper_On:
			Frame = 1;
 8002f4a:	4b33      	ldr	r3, [pc, #204]	; (8003018 <UART_Protocol+0x34c>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002f50:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <UART_Protocol+0x33c>)
 8002f52:	2203      	movs	r2, #3
 8002f54:	701a      	strb	r2, [r3, #0]
			break;
 8002f56:	e023      	b.n	8002fa0 <UART_Protocol+0x2d4>
		case Gripper_Off:
			Frame = 1;
 8002f58:	4b2f      	ldr	r3, [pc, #188]	; (8003018 <UART_Protocol+0x34c>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002f5e:	4b2a      	ldr	r3, [pc, #168]	; (8003008 <UART_Protocol+0x33c>)
 8002f60:	2203      	movs	r2, #3
 8002f62:	701a      	strb	r2, [r3, #0]
			break;
 8002f64:	e01c      	b.n	8002fa0 <UART_Protocol+0x2d4>
		case Home_Set:
			Frame = 1;
 8002f66:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <UART_Protocol+0x34c>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002f6c:	4b26      	ldr	r3, [pc, #152]	; (8003008 <UART_Protocol+0x33c>)
 8002f6e:	2203      	movs	r2, #3
 8002f70:	701a      	strb	r2, [r3, #0]
			break;
 8002f72:	e015      	b.n	8002fa0 <UART_Protocol+0x2d4>
		default:
			State = Start_Mode;
 8002f74:	4b24      	ldr	r3, [pc, #144]	; (8003008 <UART_Protocol+0x33c>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]
			Mode = 144;
 8002f7a:	4b26      	ldr	r3, [pc, #152]	; (8003014 <UART_Protocol+0x348>)
 8002f7c:	2290      	movs	r2, #144	; 0x90
 8002f7e:	701a      	strb	r2, [r3, #0]
			Frame = 0;
 8002f80:	4b25      	ldr	r3, [pc, #148]	; (8003018 <UART_Protocol+0x34c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
			Sum = 0;
 8002f86:	4b25      	ldr	r3, [pc, #148]	; (800301c <UART_Protocol+0x350>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]
			N = 0;
 8002f8c:	4b24      	ldr	r3, [pc, #144]	; (8003020 <UART_Protocol+0x354>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
			len = 0;
 8002f92:	4b24      	ldr	r3, [pc, #144]	; (8003024 <UART_Protocol+0x358>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]
			Error = 1;
 8002f98:	4b23      	ldr	r3, [pc, #140]	; (8003028 <UART_Protocol+0x35c>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]
			break;
 8002f9e:	bf00      	nop
		break;
		}
		break;
 8002fa0:	e136      	b.n	8003210 <UART_Protocol+0x544>
	case N_Station:
		N = dataIn;
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	4b1e      	ldr	r3, [pc, #120]	; (8003020 <UART_Protocol+0x354>)
 8002fa8:	701a      	strb	r2, [r3, #0]
		Data_List[N];
		State = Data_Frame;
 8002faa:	4b17      	ldr	r3, [pc, #92]	; (8003008 <UART_Protocol+0x33c>)
 8002fac:	2202      	movs	r2, #2
 8002fae:	701a      	strb	r2, [r3, #0]
		break;
 8002fb0:	e12e      	b.n	8003210 <UART_Protocol+0x544>
	case Data_Frame:
		Data_List[N_Data] = dataIn;
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <UART_Protocol+0x340>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	887b      	ldrh	r3, [r7, #2]
 8002fba:	b2d9      	uxtb	r1, r3
 8002fbc:	4b14      	ldr	r3, [pc, #80]	; (8003010 <UART_Protocol+0x344>)
 8002fbe:	5499      	strb	r1, [r3, r2]
		N_Data += 1;
 8002fc0:	4b12      	ldr	r3, [pc, #72]	; (800300c <UART_Protocol+0x340>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	4b10      	ldr	r3, [pc, #64]	; (800300c <UART_Protocol+0x340>)
 8002fca:	701a      	strb	r2, [r3, #0]
		switch (Mode)
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <UART_Protocol+0x348>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	3b91      	subs	r3, #145	; 0x91
 8002fd2:	2b06      	cmp	r3, #6
 8002fd4:	d84a      	bhi.n	800306c <UART_Protocol+0x3a0>
 8002fd6:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <UART_Protocol+0x310>)
 8002fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fdc:	08002ff9 	.word	0x08002ff9
 8002fe0:	0800306d 	.word	0x0800306d
 8002fe4:	0800306d 	.word	0x0800306d
 8002fe8:	0800302d 	.word	0x0800302d
 8002fec:	0800303d 	.word	0x0800303d
 8002ff0:	0800304b 	.word	0x0800304b
 8002ff4:	08003059 	.word	0x08003059
		{
		case Test_Command:
			if (N_Data == 1)
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <UART_Protocol+0x340>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d137      	bne.n	8003070 <UART_Protocol+0x3a4>
			{
				State = Check_Sum;
 8003000:	4b01      	ldr	r3, [pc, #4]	; (8003008 <UART_Protocol+0x33c>)
 8003002:	2203      	movs	r2, #3
 8003004:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003006:	e033      	b.n	8003070 <UART_Protocol+0x3a4>
 8003008:	2000020a 	.word	0x2000020a
 800300c:	20000204 	.word	0x20000204
 8003010:	20000208 	.word	0x20000208
 8003014:	2000003e 	.word	0x2000003e
 8003018:	20000338 	.word	0x20000338
 800301c:	20000430 	.word	0x20000430
 8003020:	20000238 	.word	0x20000238
 8003024:	200004c0 	.word	0x200004c0
 8003028:	200000de 	.word	0x200000de
		case Velocity_Set:
			if (N_Data == 1)
 800302c:	4b7a      	ldr	r3, [pc, #488]	; (8003218 <UART_Protocol+0x54c>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d11f      	bne.n	8003074 <UART_Protocol+0x3a8>
			{
				State = Check_Sum;
 8003034:	4b79      	ldr	r3, [pc, #484]	; (800321c <UART_Protocol+0x550>)
 8003036:	2203      	movs	r2, #3
 8003038:	701a      	strb	r2, [r3, #0]
			}
			break;
 800303a:	e01b      	b.n	8003074 <UART_Protocol+0x3a8>
		case Position_Set:
			if (N_Data == 2)
 800303c:	4b76      	ldr	r3, [pc, #472]	; (8003218 <UART_Protocol+0x54c>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d102      	bne.n	800304a <UART_Protocol+0x37e>
			{
				State = Check_Sum;
 8003044:	4b75      	ldr	r3, [pc, #468]	; (800321c <UART_Protocol+0x550>)
 8003046:	2203      	movs	r2, #3
 8003048:	701a      	strb	r2, [r3, #0]
			}
		case Goal_1_Set:
			if (N_Data == 2)
 800304a:	4b73      	ldr	r3, [pc, #460]	; (8003218 <UART_Protocol+0x54c>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d102      	bne.n	8003058 <UART_Protocol+0x38c>
			{
				State = Check_Sum;
 8003052:	4b72      	ldr	r3, [pc, #456]	; (800321c <UART_Protocol+0x550>)
 8003054:	2203      	movs	r2, #3
 8003056:	701a      	strb	r2, [r3, #0]
			}
		case Goal_N_Set:
			if (N_Data == N)
 8003058:	4b6f      	ldr	r3, [pc, #444]	; (8003218 <UART_Protocol+0x54c>)
 800305a:	781a      	ldrb	r2, [r3, #0]
 800305c:	4b70      	ldr	r3, [pc, #448]	; (8003220 <UART_Protocol+0x554>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d109      	bne.n	8003078 <UART_Protocol+0x3ac>
			{
				State = Check_Sum;
 8003064:	4b6d      	ldr	r3, [pc, #436]	; (800321c <UART_Protocol+0x550>)
 8003066:	2203      	movs	r2, #3
 8003068:	701a      	strb	r2, [r3, #0]
			}
			break;
 800306a:	e005      	b.n	8003078 <UART_Protocol+0x3ac>
		default:
			break;
 800306c:	bf00      	nop
 800306e:	e0cf      	b.n	8003210 <UART_Protocol+0x544>
			break;
 8003070:	bf00      	nop
 8003072:	e0cd      	b.n	8003210 <UART_Protocol+0x544>
			break;
 8003074:	bf00      	nop
 8003076:	e0cb      	b.n	8003210 <UART_Protocol+0x544>
			break;
 8003078:	bf00      	nop
		break;
		}

		break;
 800307a:	e0c9      	b.n	8003210 <UART_Protocol+0x544>
	case Check_Sum:
		Sum = dataIn;
 800307c:	887b      	ldrh	r3, [r7, #2]
 800307e:	b2da      	uxtb	r2, r3
 8003080:	4b68      	ldr	r3, [pc, #416]	; (8003224 <UART_Protocol+0x558>)
 8003082:	701a      	strb	r2, [r3, #0]
		uint8_t Data_Sum = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	73fb      	strb	r3, [r7, #15]
		switch (Frame)
 8003088:	4b67      	ldr	r3, [pc, #412]	; (8003228 <UART_Protocol+0x55c>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b03      	cmp	r3, #3
 800308e:	f200 80ba 	bhi.w	8003206 <UART_Protocol+0x53a>
 8003092:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <UART_Protocol+0x3cc>)
 8003094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003098:	080030a9 	.word	0x080030a9
 800309c:	080030f7 	.word	0x080030f7
 80030a0:	0800313f 	.word	0x0800313f
 80030a4:	08003197 	.word	0x08003197
		{
		case 0:
			if (Mode == Ack1)
 80030a8:	4b60      	ldr	r3, [pc, #384]	; (800322c <UART_Protocol+0x560>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b58      	cmp	r3, #88	; 0x58
 80030ae:	d107      	bne.n	80030c0 <UART_Protocol+0x3f4>
			{
				if(Sum != 117)
 80030b0:	4b5c      	ldr	r3, [pc, #368]	; (8003224 <UART_Protocol+0x558>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b75      	cmp	r3, #117	; 0x75
 80030b6:	d01e      	beq.n	80030f6 <UART_Protocol+0x42a>
				{
					Error = 3;
 80030b8:	4b5d      	ldr	r3, [pc, #372]	; (8003230 <UART_Protocol+0x564>)
 80030ba:	2203      	movs	r2, #3
 80030bc:	701a      	strb	r2, [r3, #0]
 80030be:	e01a      	b.n	80030f6 <UART_Protocol+0x42a>
				}
			}
			else if (Mode == Ack2)
 80030c0:	4b5a      	ldr	r3, [pc, #360]	; (800322c <UART_Protocol+0x560>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b46      	cmp	r3, #70	; 0x46
 80030c6:	d107      	bne.n	80030d8 <UART_Protocol+0x40c>
			{
				if(Sum != 110)
 80030c8:	4b56      	ldr	r3, [pc, #344]	; (8003224 <UART_Protocol+0x558>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b6e      	cmp	r3, #110	; 0x6e
 80030ce:	d012      	beq.n	80030f6 <UART_Protocol+0x42a>
				{
					Error = 3;
 80030d0:	4b57      	ldr	r3, [pc, #348]	; (8003230 <UART_Protocol+0x564>)
 80030d2:	2203      	movs	r2, #3
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	e00e      	b.n	80030f6 <UART_Protocol+0x42a>
				}
			}
			else if (Mode == Connect_MCU)
 80030d8:	4b54      	ldr	r3, [pc, #336]	; (800322c <UART_Protocol+0x560>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b92      	cmp	r3, #146	; 0x92
 80030de:	d10a      	bne.n	80030f6 <UART_Protocol+0x42a>
			{
				if (Sum == (uint8_t)~Mode)
 80030e0:	4b52      	ldr	r3, [pc, #328]	; (800322c <UART_Protocol+0x560>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	4b4e      	ldr	r3, [pc, #312]	; (8003224 <UART_Protocol+0x558>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d102      	bne.n	80030f6 <UART_Protocol+0x42a>
				{
					Connected = 1;
 80030f0:	4b50      	ldr	r3, [pc, #320]	; (8003234 <UART_Protocol+0x568>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]
				}
			}
		case 1:
			if (Sum == (uint8_t)~Mode)
 80030f6:	4b4d      	ldr	r3, [pc, #308]	; (800322c <UART_Protocol+0x560>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	4b49      	ldr	r3, [pc, #292]	; (8003224 <UART_Protocol+0x558>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d102      	bne.n	800310c <UART_Protocol+0x440>
			{
				UART_Do_Command();
 8003106:	f000 f89b 	bl	8003240 <UART_Do_Command>
				N = 0;
				len = 0;
				N_Data = 0;
				Error = 2;
			}
			break;
 800310a:	e07d      	b.n	8003208 <UART_Protocol+0x53c>
				State = Start_Mode;
 800310c:	4b43      	ldr	r3, [pc, #268]	; (800321c <UART_Protocol+0x550>)
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
				Mode = 144;
 8003112:	4b46      	ldr	r3, [pc, #280]	; (800322c <UART_Protocol+0x560>)
 8003114:	2290      	movs	r2, #144	; 0x90
 8003116:	701a      	strb	r2, [r3, #0]
				Frame = 0;
 8003118:	4b43      	ldr	r3, [pc, #268]	; (8003228 <UART_Protocol+0x55c>)
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
				Sum = 0;
 800311e:	4b41      	ldr	r3, [pc, #260]	; (8003224 <UART_Protocol+0x558>)
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
				N = 0;
 8003124:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <UART_Protocol+0x554>)
 8003126:	2200      	movs	r2, #0
 8003128:	701a      	strb	r2, [r3, #0]
				len = 0;
 800312a:	4b43      	ldr	r3, [pc, #268]	; (8003238 <UART_Protocol+0x56c>)
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
				N_Data = 0;
 8003130:	4b39      	ldr	r3, [pc, #228]	; (8003218 <UART_Protocol+0x54c>)
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
				Error = 2;
 8003136:	4b3e      	ldr	r3, [pc, #248]	; (8003230 <UART_Protocol+0x564>)
 8003138:	2202      	movs	r2, #2
 800313a:	701a      	strb	r2, [r3, #0]
			break;
 800313c:	e064      	b.n	8003208 <UART_Protocol+0x53c>
		case 2:
			if (Sum == (uint8_t)~(Mode+Data_List[0]+Data_List[1]))
 800313e:	4b3f      	ldr	r3, [pc, #252]	; (800323c <UART_Protocol+0x570>)
 8003140:	781a      	ldrb	r2, [r3, #0]
 8003142:	4b3a      	ldr	r3, [pc, #232]	; (800322c <UART_Protocol+0x560>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	4413      	add	r3, r2
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4b3c      	ldr	r3, [pc, #240]	; (800323c <UART_Protocol+0x570>)
 800314c:	785b      	ldrb	r3, [r3, #1]
 800314e:	4413      	add	r3, r2
 8003150:	b2db      	uxtb	r3, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	b2da      	uxtb	r2, r3
 8003156:	4b33      	ldr	r3, [pc, #204]	; (8003224 <UART_Protocol+0x558>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d102      	bne.n	8003164 <UART_Protocol+0x498>
			{
				UART_Do_Command();
 800315e:	f000 f86f 	bl	8003240 <UART_Do_Command>
				N = 0;
				len = 0;
				N_Data = 0;
				Error = 2;
			}
			break;
 8003162:	e051      	b.n	8003208 <UART_Protocol+0x53c>
				State = Start_Mode;
 8003164:	4b2d      	ldr	r3, [pc, #180]	; (800321c <UART_Protocol+0x550>)
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
				Mode = 144;
 800316a:	4b30      	ldr	r3, [pc, #192]	; (800322c <UART_Protocol+0x560>)
 800316c:	2290      	movs	r2, #144	; 0x90
 800316e:	701a      	strb	r2, [r3, #0]
				Frame = 0;
 8003170:	4b2d      	ldr	r3, [pc, #180]	; (8003228 <UART_Protocol+0x55c>)
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
				Sum = 0;
 8003176:	4b2b      	ldr	r3, [pc, #172]	; (8003224 <UART_Protocol+0x558>)
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
				N = 0;
 800317c:	4b28      	ldr	r3, [pc, #160]	; (8003220 <UART_Protocol+0x554>)
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
				len = 0;
 8003182:	4b2d      	ldr	r3, [pc, #180]	; (8003238 <UART_Protocol+0x56c>)
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]
				N_Data = 0;
 8003188:	4b23      	ldr	r3, [pc, #140]	; (8003218 <UART_Protocol+0x54c>)
 800318a:	2200      	movs	r2, #0
 800318c:	701a      	strb	r2, [r3, #0]
				Error = 2;
 800318e:	4b28      	ldr	r3, [pc, #160]	; (8003230 <UART_Protocol+0x564>)
 8003190:	2202      	movs	r2, #2
 8003192:	701a      	strb	r2, [r3, #0]
			break;
 8003194:	e038      	b.n	8003208 <UART_Protocol+0x53c>
		case 3:
			for (uint8_t i=0; i<N_Data; i++)
 8003196:	2300      	movs	r3, #0
 8003198:	73bb      	strb	r3, [r7, #14]
 800319a:	e008      	b.n	80031ae <UART_Protocol+0x4e2>
			{
				Data_Sum += Data_List[i];
 800319c:	7bbb      	ldrb	r3, [r7, #14]
 800319e:	4a27      	ldr	r2, [pc, #156]	; (800323c <UART_Protocol+0x570>)
 80031a0:	5cd2      	ldrb	r2, [r2, r3]
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	4413      	add	r3, r2
 80031a6:	73fb      	strb	r3, [r7, #15]
			for (uint8_t i=0; i<N_Data; i++)
 80031a8:	7bbb      	ldrb	r3, [r7, #14]
 80031aa:	3301      	adds	r3, #1
 80031ac:	73bb      	strb	r3, [r7, #14]
 80031ae:	4b1a      	ldr	r3, [pc, #104]	; (8003218 <UART_Protocol+0x54c>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	7bba      	ldrb	r2, [r7, #14]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d3f1      	bcc.n	800319c <UART_Protocol+0x4d0>
			}
			if (Sum == (uint8_t)~(Mode+Data_Sum))
 80031b8:	4b1c      	ldr	r3, [pc, #112]	; (800322c <UART_Protocol+0x560>)
 80031ba:	781a      	ldrb	r2, [r3, #0]
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	4413      	add	r3, r2
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	4b17      	ldr	r3, [pc, #92]	; (8003224 <UART_Protocol+0x558>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d102      	bne.n	80031d4 <UART_Protocol+0x508>
			{
				UART_Do_Command();
 80031ce:	f000 f837 	bl	8003240 <UART_Do_Command>
				N = 0;
				len = 0;
				N_Data = 0;
				Error = 2;
			}
			break;
 80031d2:	e019      	b.n	8003208 <UART_Protocol+0x53c>
				State = Start_Mode;
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <UART_Protocol+0x550>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
				Mode = 144;
 80031da:	4b14      	ldr	r3, [pc, #80]	; (800322c <UART_Protocol+0x560>)
 80031dc:	2290      	movs	r2, #144	; 0x90
 80031de:	701a      	strb	r2, [r3, #0]
				Frame = 0;
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <UART_Protocol+0x55c>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
				Sum = 0;
 80031e6:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <UART_Protocol+0x558>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]
				N = 0;
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <UART_Protocol+0x554>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
				len = 0;
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <UART_Protocol+0x56c>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
				N_Data = 0;
 80031f8:	4b07      	ldr	r3, [pc, #28]	; (8003218 <UART_Protocol+0x54c>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	701a      	strb	r2, [r3, #0]
				Error = 2;
 80031fe:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <UART_Protocol+0x564>)
 8003200:	2202      	movs	r2, #2
 8003202:	701a      	strb	r2, [r3, #0]
			break;
 8003204:	e000      	b.n	8003208 <UART_Protocol+0x53c>
		default:
			break;
 8003206:	bf00      	nop
		break;
		}

		State = Start_Mode;
 8003208:	4b04      	ldr	r3, [pc, #16]	; (800321c <UART_Protocol+0x550>)
 800320a:	2200      	movs	r2, #0
 800320c:	701a      	strb	r2, [r3, #0]
		break;
 800320e:	bf00      	nop

	break;
	}

}
 8003210:	bf00      	nop
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20000204 	.word	0x20000204
 800321c:	2000020a 	.word	0x2000020a
 8003220:	20000238 	.word	0x20000238
 8003224:	20000430 	.word	0x20000430
 8003228:	20000338 	.word	0x20000338
 800322c:	2000003e 	.word	0x2000003e
 8003230:	200000de 	.word	0x200000de
 8003234:	200000dc 	.word	0x200000dc
 8003238:	200004c0 	.word	0x200004c0
 800323c:	20000208 	.word	0x20000208

08003240 <UART_Do_Command>:
void UART_Do_Command()
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
	if (Connected)
 8003246:	4b75      	ldr	r3, [pc, #468]	; (800341c <UART_Do_Command+0x1dc>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80df 	beq.w	800340e <UART_Do_Command+0x1ce>
	{	uint8_t Answer[] = {0, 0, 0, 0};
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
		Answer[0] = Mode;
 8003254:	4b72      	ldr	r3, [pc, #456]	; (8003420 <UART_Do_Command+0x1e0>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	733b      	strb	r3, [r7, #12]
		UARTTxWrite(&UART2, UART_Ack1, 2);
 800325a:	2202      	movs	r2, #2
 800325c:	4971      	ldr	r1, [pc, #452]	; (8003424 <UART_Do_Command+0x1e4>)
 800325e:	4872      	ldr	r0, [pc, #456]	; (8003428 <UART_Do_Command+0x1e8>)
 8003260:	f7ff fcec 	bl	8002c3c <UARTTxWrite>
		HAL_Delay(1);
 8003264:	2001      	movs	r0, #1
 8003266:	f000 fcb3 	bl	8003bd0 <HAL_Delay>

		switch (Mode)
 800326a:	4b6d      	ldr	r3, [pc, #436]	; (8003420 <UART_Do_Command+0x1e0>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	3b91      	subs	r3, #145	; 0x91
 8003270:	2b0d      	cmp	r3, #13
 8003272:	f200 80cb 	bhi.w	800340c <UART_Do_Command+0x1cc>
 8003276:	a201      	add	r2, pc, #4	; (adr r2, 800327c <UART_Do_Command+0x3c>)
 8003278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327c:	080032b5 	.word	0x080032b5
 8003280:	080032d7 	.word	0x080032d7
 8003284:	080032df 	.word	0x080032df
 8003288:	080032e7 	.word	0x080032e7
 800328c:	0800330b 	.word	0x0800330b
 8003290:	0800340d 	.word	0x0800340d
 8003294:	0800340d 	.word	0x0800340d
 8003298:	08003335 	.word	0x08003335
 800329c:	0800340d 	.word	0x0800340d
 80032a0:	0800333d 	.word	0x0800333d
 80032a4:	080033ab 	.word	0x080033ab
 80032a8:	080033f1 	.word	0x080033f1
 80032ac:	080033f9 	.word	0x080033f9
 80032b0:	08003401 	.word	0x08003401
		{
		case Test_Command: //F2

			Answer[1] = Data_List[0];
 80032b4:	4b5d      	ldr	r3, [pc, #372]	; (800342c <UART_Do_Command+0x1ec>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	737b      	strb	r3, [r7, #13]
			Answer[2] = Sum;
 80032ba:	4b5d      	ldr	r3, [pc, #372]	; (8003430 <UART_Do_Command+0x1f0>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	73bb      	strb	r3, [r7, #14]
			UARTTxWrite(&UART2, Answer, 3);
 80032c0:	f107 030c 	add.w	r3, r7, #12
 80032c4:	2203      	movs	r2, #3
 80032c6:	4619      	mov	r1, r3
 80032c8:	4857      	ldr	r0, [pc, #348]	; (8003428 <UART_Do_Command+0x1e8>)
 80032ca:	f7ff fcb7 	bl	8002c3c <UARTTxWrite>
			HAL_Delay(1);
 80032ce:	2001      	movs	r0, #1
 80032d0:	f000 fc7e 	bl	8003bd0 <HAL_Delay>
			break;
 80032d4:	e09b      	b.n	800340e <UART_Do_Command+0x1ce>
		case Connect_MCU: //F1
			Connected = 1;
 80032d6:	4b51      	ldr	r3, [pc, #324]	; (800341c <UART_Do_Command+0x1dc>)
 80032d8:	2201      	movs	r2, #1
 80032da:	701a      	strb	r2, [r3, #0]
			break;
 80032dc:	e097      	b.n	800340e <UART_Do_Command+0x1ce>
		case Disconnect_MCU: //F1
			Connected = 0;
 80032de:	4b4f      	ldr	r3, [pc, #316]	; (800341c <UART_Do_Command+0x1dc>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
			break;
 80032e4:	e093      	b.n	800340e <UART_Do_Command+0x1ce>
		case Velocity_Set: //F2
			Velocity_Max_RPM = (float)Data_List[0] * 10 / 255;
 80032e6:	4b51      	ldr	r3, [pc, #324]	; (800342c <UART_Do_Command+0x1ec>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	ee07 3a90 	vmov	s15, r3
 80032ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032fa:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003434 <UART_Do_Command+0x1f4>
 80032fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003302:	4b4d      	ldr	r3, [pc, #308]	; (8003438 <UART_Do_Command+0x1f8>)
 8003304:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003308:	e081      	b.n	800340e <UART_Do_Command+0x1ce>
		case Position_Set: //F2
			Position_Want_Rad = (float)HighLow2Decimal(Data_List[0], Data_List[1])/10000;
 800330a:	4b48      	ldr	r3, [pc, #288]	; (800342c <UART_Do_Command+0x1ec>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	4a47      	ldr	r2, [pc, #284]	; (800342c <UART_Do_Command+0x1ec>)
 8003310:	7852      	ldrb	r2, [r2, #1]
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f000 f8bd 	bl	8003494 <HighLow2Decimal>
 800331a:	4603      	mov	r3, r0
 800331c:	ee07 3a90 	vmov	s15, r3
 8003320:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003324:	eddf 6a45 	vldr	s13, [pc, #276]	; 800343c <UART_Do_Command+0x1fc>
 8003328:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800332c:	4b44      	ldr	r3, [pc, #272]	; (8003440 <UART_Do_Command+0x200>)
 800332e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003332:	e06c      	b.n	800340e <UART_Do_Command+0x1ce>
		case Goal_1_Set: //F2
			break;
		case Goal_N_Set: //F3
			break;
		case Go_to_Goal: //F2
			GO = 1;
 8003334:	4b43      	ldr	r3, [pc, #268]	; (8003444 <UART_Do_Command+0x204>)
 8003336:	2201      	movs	r2, #1
 8003338:	701a      	strb	r2, [r3, #0]
			break;
 800333a:	e068      	b.n	800340e <UART_Do_Command+0x1ce>
		case Station_Request: //F1
			break;
		case Position_Request: //F1
			Answer[1] = Decimal2High(Position_Now_Rad*10000);
 800333c:	4b42      	ldr	r3, [pc, #264]	; (8003448 <UART_Do_Command+0x208>)
 800333e:	edd3 7a00 	vldr	s15, [r3]
 8003342:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800343c <UART_Do_Command+0x1fc>
 8003346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800334a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800334e:	ee17 3a90 	vmov	r3, s15
 8003352:	b29b      	uxth	r3, r3
 8003354:	4618      	mov	r0, r3
 8003356:	f000 f881 	bl	800345c <Decimal2High>
 800335a:	4603      	mov	r3, r0
 800335c:	737b      	strb	r3, [r7, #13]
			Answer[2] = Decimal2Low(Position_Now_Rad*10000);
 800335e:	4b3a      	ldr	r3, [pc, #232]	; (8003448 <UART_Do_Command+0x208>)
 8003360:	edd3 7a00 	vldr	s15, [r3]
 8003364:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800343c <UART_Do_Command+0x1fc>
 8003368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800336c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003370:	ee17 3a90 	vmov	r3, s15
 8003374:	b29b      	uxth	r3, r3
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f87f 	bl	800347a <Decimal2Low>
 800337c:	4603      	mov	r3, r0
 800337e:	73bb      	strb	r3, [r7, #14]
			Answer[3] = (uint8_t)~(Answer[0] + Answer[1] + Answer[2] + Answer[3]);
 8003380:	7b3a      	ldrb	r2, [r7, #12]
 8003382:	7b7b      	ldrb	r3, [r7, #13]
 8003384:	4413      	add	r3, r2
 8003386:	b2da      	uxtb	r2, r3
 8003388:	7bbb      	ldrb	r3, [r7, #14]
 800338a:	4413      	add	r3, r2
 800338c:	b2da      	uxtb	r2, r3
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	4413      	add	r3, r2
 8003392:	b2db      	uxtb	r3, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	73fb      	strb	r3, [r7, #15]
			UARTTxWrite(&UART2, Answer, 4);
 800339a:	f107 030c 	add.w	r3, r7, #12
 800339e:	2204      	movs	r2, #4
 80033a0:	4619      	mov	r1, r3
 80033a2:	4821      	ldr	r0, [pc, #132]	; (8003428 <UART_Do_Command+0x1e8>)
 80033a4:	f7ff fc4a 	bl	8002c3c <UARTTxWrite>
			break;
 80033a8:	e031      	b.n	800340e <UART_Do_Command+0x1ce>
		case Velocity_Request: //F1
			Answer[1] = (uint8_t)Velocity_Max_RPM /10 * 255;
 80033aa:	4b23      	ldr	r3, [pc, #140]	; (8003438 <UART_Do_Command+0x1f8>)
 80033ac:	edd3 7a00 	vldr	s15, [r3]
 80033b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033b4:	edc7 7a01 	vstr	s15, [r7, #4]
 80033b8:	793b      	ldrb	r3, [r7, #4]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	4a23      	ldr	r2, [pc, #140]	; (800344c <UART_Do_Command+0x20c>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	08db      	lsrs	r3, r3, #3
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	425b      	negs	r3, r3
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	737b      	strb	r3, [r7, #13]
			Answer[2] = (uint8_t)~(Answer[0] + Answer[1] + Answer[2]);
 80033cc:	7b3a      	ldrb	r2, [r7, #12]
 80033ce:	7b7b      	ldrb	r3, [r7, #13]
 80033d0:	4413      	add	r3, r2
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	7bbb      	ldrb	r3, [r7, #14]
 80033d6:	4413      	add	r3, r2
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	43db      	mvns	r3, r3
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	73bb      	strb	r3, [r7, #14]
			UARTTxWrite(&UART2, Answer, 3);
 80033e0:	f107 030c 	add.w	r3, r7, #12
 80033e4:	2203      	movs	r2, #3
 80033e6:	4619      	mov	r1, r3
 80033e8:	480f      	ldr	r0, [pc, #60]	; (8003428 <UART_Do_Command+0x1e8>)
 80033ea:	f7ff fc27 	bl	8002c3c <UARTTxWrite>
			break;
 80033ee:	e00e      	b.n	800340e <UART_Do_Command+0x1ce>
		case Gripper_On: //F1
			Effector_On = 1;
 80033f0:	4b17      	ldr	r3, [pc, #92]	; (8003450 <UART_Do_Command+0x210>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	701a      	strb	r2, [r3, #0]
			break;
 80033f6:	e00a      	b.n	800340e <UART_Do_Command+0x1ce>
		case Gripper_Off: //F1
			Effector_On = 0;
 80033f8:	4b15      	ldr	r3, [pc, #84]	; (8003450 <UART_Do_Command+0x210>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	701a      	strb	r2, [r3, #0]
			break;
 80033fe:	e006      	b.n	800340e <UART_Do_Command+0x1ce>
		case Home_Set: //F1
			STATE_DISPLAY = FindPorximity;
 8003400:	4b14      	ldr	r3, [pc, #80]	; (8003454 <UART_Do_Command+0x214>)
 8003402:	2200      	movs	r2, #0
 8003404:	701a      	strb	r2, [r3, #0]
			Home_Setting();
 8003406:	f7ff f9c3 	bl	8002790 <Home_Setting>
			break;
 800340a:	e000      	b.n	800340e <UART_Do_Command+0x1ce>
		default:
			break;
 800340c:	bf00      	nop
		break;
		}
	}

	len = 0;
 800340e:	4b12      	ldr	r3, [pc, #72]	; (8003458 <UART_Do_Command+0x218>)
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]

}
 8003414:	bf00      	nop
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	200000dc 	.word	0x200000dc
 8003420:	2000003e 	.word	0x2000003e
 8003424:	20000038 	.word	0x20000038
 8003428:	200001ec 	.word	0x200001ec
 800342c:	20000208 	.word	0x20000208
 8003430:	20000430 	.word	0x20000430
 8003434:	437f0000 	.word	0x437f0000
 8003438:	20000008 	.word	0x20000008
 800343c:	461c4000 	.word	0x461c4000
 8003440:	20000114 	.word	0x20000114
 8003444:	200000f8 	.word	0x200000f8
 8003448:	20000110 	.word	0x20000110
 800344c:	cccccccd 	.word	0xcccccccd
 8003450:	200000dd 	.word	0x200000dd
 8003454:	200001e8 	.word	0x200001e8
 8003458:	200004c0 	.word	0x200004c0

0800345c <Decimal2High>:
uint8_t Decimal2High(uint16_t integer)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)((integer>>8) & 0xff);
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	0a1b      	lsrs	r3, r3, #8
 800346a:	b29b      	uxth	r3, r3
 800346c:	b2db      	uxtb	r3, r3
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <Decimal2Low>:
uint8_t Decimal2Low(uint16_t integer)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	4603      	mov	r3, r0
 8003482:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)(integer & 0xff);
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	b2db      	uxtb	r3, r3
}
 8003488:	4618      	mov	r0, r3
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HighLow2Decimal>:
uint16_t HighLow2Decimal(uint8_t high_byte, uint8_t low_byte)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	460a      	mov	r2, r1
 800349e:	71fb      	strb	r3, [r7, #7]
 80034a0:	4613      	mov	r3, r2
 80034a2:	71bb      	strb	r3, [r7, #6]
	uint16_t high = (high_byte & 0xff) <<8;
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	81fb      	strh	r3, [r7, #14]
	uint16_t low = low_byte & 0xff;
 80034ac:	79bb      	ldrb	r3, [r7, #6]
 80034ae:	81bb      	strh	r3, [r7, #12]
	return high|low;
 80034b0:	89fa      	ldrh	r2, [r7, #14]
 80034b2:	89bb      	ldrh	r3, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	b29b      	uxth	r3, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034c4:	b4b0      	push	{r4, r5, r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a09      	ldr	r2, [pc, #36]	; (80034f4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d109      	bne.n	80034e8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 80034d4:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80034d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034da:	f112 34ff 	adds.w	r4, r2, #4294967295
 80034de:	f143 0500 	adc.w	r5, r3, #0
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80034e4:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bcb0      	pop	{r4, r5, r7}
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000434 	.word	0x20000434
 80034f8:	200000e0 	.word	0x200000e0

080034fc <micros>:
uint64_t micros()
{
 80034fc:	b4b0      	push	{r4, r5, r7}
 80034fe:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8003500:	4b09      	ldr	r3, [pc, #36]	; (8003528 <micros+0x2c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	4618      	mov	r0, r3
 8003508:	f04f 0100 	mov.w	r1, #0
 800350c:	4b07      	ldr	r3, [pc, #28]	; (800352c <micros+0x30>)
 800350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003512:	1884      	adds	r4, r0, r2
 8003514:	eb41 0503 	adc.w	r5, r1, r3
 8003518:	4622      	mov	r2, r4
 800351a:	462b      	mov	r3, r5
}
 800351c:	4610      	mov	r0, r2
 800351e:	4619      	mov	r1, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	bcb0      	pop	{r4, r5, r7}
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	20000434 	.word	0x20000434
 800352c:	200000e0 	.word	0x200000e0

08003530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003534:	b672      	cpsid	i
}
 8003536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003538:	e7fe      	b.n	8003538 <Error_Handler+0x8>
	...

0800353c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	4b10      	ldr	r3, [pc, #64]	; (8003588 <HAL_MspInit+0x4c>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	4a0f      	ldr	r2, [pc, #60]	; (8003588 <HAL_MspInit+0x4c>)
 800354c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003550:	6453      	str	r3, [r2, #68]	; 0x44
 8003552:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <HAL_MspInit+0x4c>)
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355a:	607b      	str	r3, [r7, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_MspInit+0x4c>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	4a08      	ldr	r2, [pc, #32]	; (8003588 <HAL_MspInit+0x4c>)
 8003568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356c:	6413      	str	r3, [r2, #64]	; 0x40
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_MspInit+0x4c>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800357a:	2007      	movs	r0, #7
 800357c:	f000 fc1c 	bl	8003db8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40023800 	.word	0x40023800

0800358c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a19      	ldr	r2, [pc, #100]	; (8003610 <HAL_I2C_MspInit+0x84>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d12c      	bne.n	8003608 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	4b18      	ldr	r3, [pc, #96]	; (8003614 <HAL_I2C_MspInit+0x88>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	4a17      	ldr	r2, [pc, #92]	; (8003614 <HAL_I2C_MspInit+0x88>)
 80035b8:	f043 0302 	orr.w	r3, r3, #2
 80035bc:	6313      	str	r3, [r2, #48]	; 0x30
 80035be:	4b15      	ldr	r3, [pc, #84]	; (8003614 <HAL_I2C_MspInit+0x88>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80035ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035d0:	2312      	movs	r3, #18
 80035d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035d4:	2301      	movs	r3, #1
 80035d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d8:	2303      	movs	r3, #3
 80035da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035dc:	2304      	movs	r3, #4
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e0:	f107 0314 	add.w	r3, r7, #20
 80035e4:	4619      	mov	r1, r3
 80035e6:	480c      	ldr	r0, [pc, #48]	; (8003618 <HAL_I2C_MspInit+0x8c>)
 80035e8:	f001 f82a 	bl	8004640 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	4b08      	ldr	r3, [pc, #32]	; (8003614 <HAL_I2C_MspInit+0x88>)
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	4a07      	ldr	r2, [pc, #28]	; (8003614 <HAL_I2C_MspInit+0x88>)
 80035f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035fa:	6413      	str	r3, [r2, #64]	; 0x40
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_I2C_MspInit+0x88>)
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003608:	bf00      	nop
 800360a:	3728      	adds	r7, #40	; 0x28
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40005400 	.word	0x40005400
 8003614:	40023800 	.word	0x40023800
 8003618:	40020400 	.word	0x40020400

0800361c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	f107 0314 	add.w	r3, r7, #20
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a19      	ldr	r2, [pc, #100]	; (80036a0 <HAL_TIM_Encoder_MspInit+0x84>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d12c      	bne.n	8003698 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	4a17      	ldr	r2, [pc, #92]	; (80036a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6453      	str	r3, [r2, #68]	; 0x44
 800364e:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	4a10      	ldr	r2, [pc, #64]	; (80036a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	6313      	str	r3, [r2, #48]	; 0x30
 800366a:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <HAL_TIM_Encoder_MspInit+0x88>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_B_Pin|Encoder_A_Pin;
 8003676:	f44f 7340 	mov.w	r3, #768	; 0x300
 800367a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367c:	2302      	movs	r3, #2
 800367e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003680:	2300      	movs	r3, #0
 8003682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003684:	2300      	movs	r3, #0
 8003686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003688:	2301      	movs	r3, #1
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368c:	f107 0314 	add.w	r3, r7, #20
 8003690:	4619      	mov	r1, r3
 8003692:	4805      	ldr	r0, [pc, #20]	; (80036a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003694:	f000 ffd4 	bl	8004640 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003698:	bf00      	nop
 800369a:	3728      	adds	r7, #40	; 0x28
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40010000 	.word	0x40010000
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40020000 	.word	0x40020000

080036ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036bc:	d116      	bne.n	80036ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	4b24      	ldr	r3, [pc, #144]	; (8003754 <HAL_TIM_Base_MspInit+0xa8>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	4a23      	ldr	r2, [pc, #140]	; (8003754 <HAL_TIM_Base_MspInit+0xa8>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6413      	str	r3, [r2, #64]	; 0x40
 80036ce:	4b21      	ldr	r3, [pc, #132]	; (8003754 <HAL_TIM_Base_MspInit+0xa8>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80036da:	2200      	movs	r2, #0
 80036dc:	2100      	movs	r1, #0
 80036de:	201c      	movs	r0, #28
 80036e0:	f000 fb75 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036e4:	201c      	movs	r0, #28
 80036e6:	f000 fb8e 	bl	8003e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80036ea:	e02e      	b.n	800374a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a19      	ldr	r2, [pc, #100]	; (8003758 <HAL_TIM_Base_MspInit+0xac>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d10e      	bne.n	8003714 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	4b16      	ldr	r3, [pc, #88]	; (8003754 <HAL_TIM_Base_MspInit+0xa8>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	4a15      	ldr	r2, [pc, #84]	; (8003754 <HAL_TIM_Base_MspInit+0xa8>)
 8003700:	f043 0302 	orr.w	r3, r3, #2
 8003704:	6413      	str	r3, [r2, #64]	; 0x40
 8003706:	4b13      	ldr	r3, [pc, #76]	; (8003754 <HAL_TIM_Base_MspInit+0xa8>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	693b      	ldr	r3, [r7, #16]
}
 8003712:	e01a      	b.n	800374a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a10      	ldr	r2, [pc, #64]	; (800375c <HAL_TIM_Base_MspInit+0xb0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d115      	bne.n	800374a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <HAL_TIM_Base_MspInit+0xa8>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	4a0b      	ldr	r2, [pc, #44]	; (8003754 <HAL_TIM_Base_MspInit+0xa8>)
 8003728:	f043 0304 	orr.w	r3, r3, #4
 800372c:	6413      	str	r3, [r2, #64]	; 0x40
 800372e:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_TIM_Base_MspInit+0xa8>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800373a:	2200      	movs	r2, #0
 800373c:	2100      	movs	r1, #0
 800373e:	201e      	movs	r0, #30
 8003740:	f000 fb45 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003744:	201e      	movs	r0, #30
 8003746:	f000 fb5e 	bl	8003e06 <HAL_NVIC_EnableIRQ>
}
 800374a:	bf00      	nop
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800
 8003758:	40000400 	.word	0x40000400
 800375c:	40000800 	.word	0x40000800

08003760 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003768:	f107 030c 	add.w	r3, r7, #12
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	605a      	str	r2, [r3, #4]
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	60da      	str	r2, [r3, #12]
 8003776:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a12      	ldr	r2, [pc, #72]	; (80037c8 <HAL_TIM_MspPostInit+0x68>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d11d      	bne.n	80037be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	4b11      	ldr	r3, [pc, #68]	; (80037cc <HAL_TIM_MspPostInit+0x6c>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	4a10      	ldr	r2, [pc, #64]	; (80037cc <HAL_TIM_MspPostInit+0x6c>)
 800378c:	f043 0302 	orr.w	r3, r3, #2
 8003790:	6313      	str	r3, [r2, #48]	; 0x30
 8003792:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <HAL_TIM_MspPostInit+0x6c>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800379e:	2302      	movs	r3, #2
 80037a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a2:	2302      	movs	r3, #2
 80037a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037aa:	2300      	movs	r3, #0
 80037ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037ae:	2302      	movs	r3, #2
 80037b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b2:	f107 030c 	add.w	r3, r7, #12
 80037b6:	4619      	mov	r1, r3
 80037b8:	4805      	ldr	r0, [pc, #20]	; (80037d0 <HAL_TIM_MspPostInit+0x70>)
 80037ba:	f000 ff41 	bl	8004640 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80037be:	bf00      	nop
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40000400 	.word	0x40000400
 80037cc:	40023800 	.word	0x40023800
 80037d0:	40020400 	.word	0x40020400

080037d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08a      	sub	sp, #40	; 0x28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037dc:	f107 0314 	add.w	r3, r7, #20
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	60da      	str	r2, [r3, #12]
 80037ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a4c      	ldr	r2, [pc, #304]	; (8003924 <HAL_UART_MspInit+0x150>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	f040 8091 	bne.w	800391a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037f8:	2300      	movs	r3, #0
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	4b4a      	ldr	r3, [pc, #296]	; (8003928 <HAL_UART_MspInit+0x154>)
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	4a49      	ldr	r2, [pc, #292]	; (8003928 <HAL_UART_MspInit+0x154>)
 8003802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003806:	6413      	str	r3, [r2, #64]	; 0x40
 8003808:	4b47      	ldr	r3, [pc, #284]	; (8003928 <HAL_UART_MspInit+0x154>)
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	4b43      	ldr	r3, [pc, #268]	; (8003928 <HAL_UART_MspInit+0x154>)
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	4a42      	ldr	r2, [pc, #264]	; (8003928 <HAL_UART_MspInit+0x154>)
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	6313      	str	r3, [r2, #48]	; 0x30
 8003824:	4b40      	ldr	r3, [pc, #256]	; (8003928 <HAL_UART_MspInit+0x154>)
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003830:	230c      	movs	r3, #12
 8003832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003834:	2302      	movs	r3, #2
 8003836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003838:	2300      	movs	r3, #0
 800383a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383c:	2303      	movs	r3, #3
 800383e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003840:	2307      	movs	r3, #7
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003844:	f107 0314 	add.w	r3, r7, #20
 8003848:	4619      	mov	r1, r3
 800384a:	4838      	ldr	r0, [pc, #224]	; (800392c <HAL_UART_MspInit+0x158>)
 800384c:	f000 fef8 	bl	8004640 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003850:	4b37      	ldr	r3, [pc, #220]	; (8003930 <HAL_UART_MspInit+0x15c>)
 8003852:	4a38      	ldr	r2, [pc, #224]	; (8003934 <HAL_UART_MspInit+0x160>)
 8003854:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003856:	4b36      	ldr	r3, [pc, #216]	; (8003930 <HAL_UART_MspInit+0x15c>)
 8003858:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800385c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800385e:	4b34      	ldr	r3, [pc, #208]	; (8003930 <HAL_UART_MspInit+0x15c>)
 8003860:	2200      	movs	r2, #0
 8003862:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003864:	4b32      	ldr	r3, [pc, #200]	; (8003930 <HAL_UART_MspInit+0x15c>)
 8003866:	2200      	movs	r2, #0
 8003868:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800386a:	4b31      	ldr	r3, [pc, #196]	; (8003930 <HAL_UART_MspInit+0x15c>)
 800386c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003870:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003872:	4b2f      	ldr	r3, [pc, #188]	; (8003930 <HAL_UART_MspInit+0x15c>)
 8003874:	2200      	movs	r2, #0
 8003876:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003878:	4b2d      	ldr	r3, [pc, #180]	; (8003930 <HAL_UART_MspInit+0x15c>)
 800387a:	2200      	movs	r2, #0
 800387c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800387e:	4b2c      	ldr	r3, [pc, #176]	; (8003930 <HAL_UART_MspInit+0x15c>)
 8003880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003884:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003886:	4b2a      	ldr	r3, [pc, #168]	; (8003930 <HAL_UART_MspInit+0x15c>)
 8003888:	2200      	movs	r2, #0
 800388a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800388c:	4b28      	ldr	r3, [pc, #160]	; (8003930 <HAL_UART_MspInit+0x15c>)
 800388e:	2200      	movs	r2, #0
 8003890:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003892:	4827      	ldr	r0, [pc, #156]	; (8003930 <HAL_UART_MspInit+0x15c>)
 8003894:	f000 fad2 	bl	8003e3c <HAL_DMA_Init>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800389e:	f7ff fe47 	bl	8003530 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a22      	ldr	r2, [pc, #136]	; (8003930 <HAL_UART_MspInit+0x15c>)
 80038a6:	639a      	str	r2, [r3, #56]	; 0x38
 80038a8:	4a21      	ldr	r2, [pc, #132]	; (8003930 <HAL_UART_MspInit+0x15c>)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80038ae:	4b22      	ldr	r3, [pc, #136]	; (8003938 <HAL_UART_MspInit+0x164>)
 80038b0:	4a22      	ldr	r2, [pc, #136]	; (800393c <HAL_UART_MspInit+0x168>)
 80038b2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80038b4:	4b20      	ldr	r3, [pc, #128]	; (8003938 <HAL_UART_MspInit+0x164>)
 80038b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038bc:	4b1e      	ldr	r3, [pc, #120]	; (8003938 <HAL_UART_MspInit+0x164>)
 80038be:	2240      	movs	r2, #64	; 0x40
 80038c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038c2:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <HAL_UART_MspInit+0x164>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038c8:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <HAL_UART_MspInit+0x164>)
 80038ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038d0:	4b19      	ldr	r3, [pc, #100]	; (8003938 <HAL_UART_MspInit+0x164>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038d6:	4b18      	ldr	r3, [pc, #96]	; (8003938 <HAL_UART_MspInit+0x164>)
 80038d8:	2200      	movs	r2, #0
 80038da:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80038dc:	4b16      	ldr	r3, [pc, #88]	; (8003938 <HAL_UART_MspInit+0x164>)
 80038de:	2200      	movs	r2, #0
 80038e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80038e2:	4b15      	ldr	r3, [pc, #84]	; (8003938 <HAL_UART_MspInit+0x164>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038e8:	4b13      	ldr	r3, [pc, #76]	; (8003938 <HAL_UART_MspInit+0x164>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80038ee:	4812      	ldr	r0, [pc, #72]	; (8003938 <HAL_UART_MspInit+0x164>)
 80038f0:	f000 faa4 	bl	8003e3c <HAL_DMA_Init>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80038fa:	f7ff fe19 	bl	8003530 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a0d      	ldr	r2, [pc, #52]	; (8003938 <HAL_UART_MspInit+0x164>)
 8003902:	635a      	str	r2, [r3, #52]	; 0x34
 8003904:	4a0c      	ldr	r2, [pc, #48]	; (8003938 <HAL_UART_MspInit+0x164>)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800390a:	2200      	movs	r2, #0
 800390c:	2100      	movs	r1, #0
 800390e:	2026      	movs	r0, #38	; 0x26
 8003910:	f000 fa5d 	bl	8003dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003914:	2026      	movs	r0, #38	; 0x26
 8003916:	f000 fa76 	bl	8003e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800391a:	bf00      	nop
 800391c:	3728      	adds	r7, #40	; 0x28
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40004400 	.word	0x40004400
 8003928:	40023800 	.word	0x40023800
 800392c:	40020000 	.word	0x40020000
 8003930:	2000023c 	.word	0x2000023c
 8003934:	40026088 	.word	0x40026088
 8003938:	20000388 	.word	0x20000388
 800393c:	400260a0 	.word	0x400260a0

08003940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003944:	e7fe      	b.n	8003944 <NMI_Handler+0x4>

08003946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800394a:	e7fe      	b.n	800394a <HardFault_Handler+0x4>

0800394c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003950:	e7fe      	b.n	8003950 <MemManage_Handler+0x4>

08003952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003952:	b480      	push	{r7}
 8003954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003956:	e7fe      	b.n	8003956 <BusFault_Handler+0x4>

08003958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800395c:	e7fe      	b.n	800395c <UsageFault_Handler+0x4>

0800395e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800397a:	b480      	push	{r7}
 800397c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800397e:	bf00      	nop
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800398c:	f000 f900 	bl	8003b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003990:	bf00      	nop
 8003992:	bd80      	pop	{r7, pc}

08003994 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003998:	4802      	ldr	r0, [pc, #8]	; (80039a4 <DMA1_Stream5_IRQHandler+0x10>)
 800399a:	f000 fbe7 	bl	800416c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	2000023c 	.word	0x2000023c

080039a8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80039ac:	4802      	ldr	r0, [pc, #8]	; (80039b8 <DMA1_Stream6_IRQHandler+0x10>)
 80039ae:	f000 fbdd 	bl	800416c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000388 	.word	0x20000388

080039bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80039c0:	4802      	ldr	r0, [pc, #8]	; (80039cc <TIM2_IRQHandler+0x10>)
 80039c2:	f002 fa6d 	bl	8005ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000434 	.word	0x20000434

080039d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80039d4:	4802      	ldr	r0, [pc, #8]	; (80039e0 <TIM4_IRQHandler+0x10>)
 80039d6:	f002 fa63 	bl	8005ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	2000029c 	.word	0x2000029c

080039e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039e8:	4802      	ldr	r0, [pc, #8]	; (80039f4 <USART2_IRQHandler+0x10>)
 80039ea:	f003 f943 	bl	8006c74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80039ee:	bf00      	nop
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	2000047c 	.word	0x2000047c

080039f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80039fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003a00:	f000 ffd4 	bl	80049ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a04:	bf00      	nop
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a10:	4a14      	ldr	r2, [pc, #80]	; (8003a64 <_sbrk+0x5c>)
 8003a12:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <_sbrk+0x60>)
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a1c:	4b13      	ldr	r3, [pc, #76]	; (8003a6c <_sbrk+0x64>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d102      	bne.n	8003a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a24:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <_sbrk+0x64>)
 8003a26:	4a12      	ldr	r2, [pc, #72]	; (8003a70 <_sbrk+0x68>)
 8003a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a2a:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <_sbrk+0x64>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4413      	add	r3, r2
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d207      	bcs.n	8003a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a38:	f003 ff78 	bl	800792c <__errno>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	220c      	movs	r2, #12
 8003a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a42:	f04f 33ff 	mov.w	r3, #4294967295
 8003a46:	e009      	b.n	8003a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a48:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <_sbrk+0x64>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a4e:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <_sbrk+0x64>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	4a05      	ldr	r2, [pc, #20]	; (8003a6c <_sbrk+0x64>)
 8003a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20020000 	.word	0x20020000
 8003a68:	00000400 	.word	0x00000400
 8003a6c:	2000022c 	.word	0x2000022c
 8003a70:	200004d8 	.word	0x200004d8

08003a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <SystemInit+0x20>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7e:	4a05      	ldr	r2, [pc, #20]	; (8003a94 <SystemInit+0x20>)
 8003a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ad0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a9c:	480d      	ldr	r0, [pc, #52]	; (8003ad4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a9e:	490e      	ldr	r1, [pc, #56]	; (8003ad8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003aa0:	4a0e      	ldr	r2, [pc, #56]	; (8003adc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003aa4:	e002      	b.n	8003aac <LoopCopyDataInit>

08003aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aaa:	3304      	adds	r3, #4

08003aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ab0:	d3f9      	bcc.n	8003aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ab2:	4a0b      	ldr	r2, [pc, #44]	; (8003ae0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ab4:	4c0b      	ldr	r4, [pc, #44]	; (8003ae4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ab8:	e001      	b.n	8003abe <LoopFillZerobss>

08003aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003abc:	3204      	adds	r2, #4

08003abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ac0:	d3fb      	bcc.n	8003aba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003ac2:	f7ff ffd7 	bl	8003a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ac6:	f003 ff37 	bl	8007938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aca:	f7fd fab5 	bl	8001038 <main>
  bx  lr    
 8003ace:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ad0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ad8:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8003adc:	080083fc 	.word	0x080083fc
  ldr r2, =_sbss
 8003ae0:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8003ae4:	200004d8 	.word	0x200004d8

08003ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ae8:	e7fe      	b.n	8003ae8 <ADC_IRQHandler>
	...

08003aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003af0:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <HAL_Init+0x40>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a0d      	ldr	r2, [pc, #52]	; (8003b2c <HAL_Init+0x40>)
 8003af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_Init+0x40>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a0a      	ldr	r2, [pc, #40]	; (8003b2c <HAL_Init+0x40>)
 8003b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b08:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <HAL_Init+0x40>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a07      	ldr	r2, [pc, #28]	; (8003b2c <HAL_Init+0x40>)
 8003b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b14:	2003      	movs	r0, #3
 8003b16:	f000 f94f 	bl	8003db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	f000 f808 	bl	8003b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b20:	f7ff fd0c 	bl	800353c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023c00 	.word	0x40023c00

08003b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b38:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <HAL_InitTick+0x54>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <HAL_InitTick+0x58>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	4619      	mov	r1, r3
 8003b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 f967 	bl	8003e22 <HAL_SYSTICK_Config>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e00e      	b.n	8003b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b0f      	cmp	r3, #15
 8003b62:	d80a      	bhi.n	8003b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b64:	2200      	movs	r2, #0
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6c:	f000 f92f 	bl	8003dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b70:	4a06      	ldr	r2, [pc, #24]	; (8003b8c <HAL_InitTick+0x5c>)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e000      	b.n	8003b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000048 	.word	0x20000048
 8003b88:	20000050 	.word	0x20000050
 8003b8c:	2000004c 	.word	0x2000004c

08003b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b94:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <HAL_IncTick+0x20>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_IncTick+0x24>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	4a04      	ldr	r2, [pc, #16]	; (8003bb4 <HAL_IncTick+0x24>)
 8003ba2:	6013      	str	r3, [r2, #0]
}
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	20000050 	.word	0x20000050
 8003bb4:	200004c4 	.word	0x200004c4

08003bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  return uwTick;
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <HAL_GetTick+0x14>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	200004c4 	.word	0x200004c4

08003bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bd8:	f7ff ffee 	bl	8003bb8 <HAL_GetTick>
 8003bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d005      	beq.n	8003bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bea:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <HAL_Delay+0x44>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bf6:	bf00      	nop
 8003bf8:	f7ff ffde 	bl	8003bb8 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d8f7      	bhi.n	8003bf8 <HAL_Delay+0x28>
  {
  }
}
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000050 	.word	0x20000050

08003c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c28:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <__NVIC_SetPriorityGrouping+0x44>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c34:	4013      	ands	r3, r2
 8003c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c4a:	4a04      	ldr	r2, [pc, #16]	; (8003c5c <__NVIC_SetPriorityGrouping+0x44>)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	60d3      	str	r3, [r2, #12]
}
 8003c50:	bf00      	nop
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	e000ed00 	.word	0xe000ed00

08003c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c64:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <__NVIC_GetPriorityGrouping+0x18>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	0a1b      	lsrs	r3, r3, #8
 8003c6a:	f003 0307 	and.w	r3, r3, #7
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	db0b      	blt.n	8003ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	f003 021f 	and.w	r2, r3, #31
 8003c94:	4907      	ldr	r1, [pc, #28]	; (8003cb4 <__NVIC_EnableIRQ+0x38>)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	e000e100 	.word	0xe000e100

08003cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	6039      	str	r1, [r7, #0]
 8003cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	db0a      	blt.n	8003ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	490c      	ldr	r1, [pc, #48]	; (8003d04 <__NVIC_SetPriority+0x4c>)
 8003cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd6:	0112      	lsls	r2, r2, #4
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	440b      	add	r3, r1
 8003cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ce0:	e00a      	b.n	8003cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	4908      	ldr	r1, [pc, #32]	; (8003d08 <__NVIC_SetPriority+0x50>)
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	3b04      	subs	r3, #4
 8003cf0:	0112      	lsls	r2, r2, #4
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	761a      	strb	r2, [r3, #24]
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	e000e100 	.word	0xe000e100
 8003d08:	e000ed00 	.word	0xe000ed00

08003d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b089      	sub	sp, #36	; 0x24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f1c3 0307 	rsb	r3, r3, #7
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	bf28      	it	cs
 8003d2a:	2304      	movcs	r3, #4
 8003d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	3304      	adds	r3, #4
 8003d32:	2b06      	cmp	r3, #6
 8003d34:	d902      	bls.n	8003d3c <NVIC_EncodePriority+0x30>
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3b03      	subs	r3, #3
 8003d3a:	e000      	b.n	8003d3e <NVIC_EncodePriority+0x32>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d40:	f04f 32ff 	mov.w	r2, #4294967295
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	401a      	ands	r2, r3
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d54:	f04f 31ff 	mov.w	r1, #4294967295
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5e:	43d9      	mvns	r1, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d64:	4313      	orrs	r3, r2
         );
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3724      	adds	r7, #36	; 0x24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d84:	d301      	bcc.n	8003d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d86:	2301      	movs	r3, #1
 8003d88:	e00f      	b.n	8003daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <SysTick_Config+0x40>)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d92:	210f      	movs	r1, #15
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295
 8003d98:	f7ff ff8e 	bl	8003cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <SysTick_Config+0x40>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003da2:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <SysTick_Config+0x40>)
 8003da4:	2207      	movs	r2, #7
 8003da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	e000e010 	.word	0xe000e010

08003db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff ff29 	bl	8003c18 <__NVIC_SetPriorityGrouping>
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b086      	sub	sp, #24
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	607a      	str	r2, [r7, #4]
 8003dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003de0:	f7ff ff3e 	bl	8003c60 <__NVIC_GetPriorityGrouping>
 8003de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	6978      	ldr	r0, [r7, #20]
 8003dec:	f7ff ff8e 	bl	8003d0c <NVIC_EncodePriority>
 8003df0:	4602      	mov	r2, r0
 8003df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff ff5d 	bl	8003cb8 <__NVIC_SetPriority>
}
 8003dfe:	bf00      	nop
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff ff31 	bl	8003c7c <__NVIC_EnableIRQ>
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff ffa2 	bl	8003d74 <SysTick_Config>
 8003e30:	4603      	mov	r3, r0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e48:	f7ff feb6 	bl	8003bb8 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e099      	b.n	8003f8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0201 	bic.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e78:	e00f      	b.n	8003e9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e7a:	f7ff fe9d 	bl	8003bb8 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b05      	cmp	r3, #5
 8003e86:	d908      	bls.n	8003e9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2203      	movs	r2, #3
 8003e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e078      	b.n	8003f8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e8      	bne.n	8003e7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4b38      	ldr	r3, [pc, #224]	; (8003f94 <HAL_DMA_Init+0x158>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d107      	bne.n	8003f04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	4313      	orrs	r3, r2
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f023 0307 	bic.w	r3, r3, #7
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d117      	bne.n	8003f5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00e      	beq.n	8003f5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fb01 	bl	8004548 <DMA_CheckFifoParam>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2240      	movs	r2, #64	; 0x40
 8003f50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e016      	b.n	8003f8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fab8 	bl	80044dc <DMA_CalcBaseAndBitshift>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f74:	223f      	movs	r2, #63	; 0x3f
 8003f76:	409a      	lsls	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	f010803f 	.word	0xf010803f

08003f98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_DMA_Start_IT+0x26>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e040      	b.n	8004040 <HAL_DMA_Start_IT+0xa8>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d12f      	bne.n	8004032 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	68b9      	ldr	r1, [r7, #8]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 fa4a 	bl	8004480 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff0:	223f      	movs	r2, #63	; 0x3f
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0216 	orr.w	r2, r2, #22
 8004006:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	2b00      	cmp	r3, #0
 800400e:	d007      	beq.n	8004020 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0208 	orr.w	r2, r2, #8
 800401e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	e005      	b.n	800403e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800403a:	2302      	movs	r3, #2
 800403c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800403e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004056:	f7ff fdaf 	bl	8003bb8 <HAL_GetTick>
 800405a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d008      	beq.n	800407a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2280      	movs	r2, #128	; 0x80
 800406c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e052      	b.n	8004120 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0216 	bic.w	r2, r2, #22
 8004088:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695a      	ldr	r2, [r3, #20]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004098:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d103      	bne.n	80040aa <HAL_DMA_Abort+0x62>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d007      	beq.n	80040ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0208 	bic.w	r2, r2, #8
 80040b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040ca:	e013      	b.n	80040f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040cc:	f7ff fd74 	bl	8003bb8 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b05      	cmp	r3, #5
 80040d8:	d90c      	bls.n	80040f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2203      	movs	r2, #3
 80040ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e015      	b.n	8004120 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e4      	bne.n	80040cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004106:	223f      	movs	r2, #63	; 0x3f
 8004108:	409a      	lsls	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d004      	beq.n	8004146 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2280      	movs	r2, #128	; 0x80
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e00c      	b.n	8004160 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2205      	movs	r2, #5
 800414a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004178:	4b92      	ldr	r3, [pc, #584]	; (80043c4 <HAL_DMA_IRQHandler+0x258>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a92      	ldr	r2, [pc, #584]	; (80043c8 <HAL_DMA_IRQHandler+0x25c>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	0a9b      	lsrs	r3, r3, #10
 8004184:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004196:	2208      	movs	r2, #8
 8004198:	409a      	lsls	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d01a      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d013      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0204 	bic.w	r2, r2, #4
 80041be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c4:	2208      	movs	r2, #8
 80041c6:	409a      	lsls	r2, r3
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d0:	f043 0201 	orr.w	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041dc:	2201      	movs	r2, #1
 80041de:	409a      	lsls	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d012      	beq.n	800420e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00b      	beq.n	800420e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fa:	2201      	movs	r2, #1
 80041fc:	409a      	lsls	r2, r3
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f043 0202 	orr.w	r2, r3, #2
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004212:	2204      	movs	r2, #4
 8004214:	409a      	lsls	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d012      	beq.n	8004244 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00b      	beq.n	8004244 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004230:	2204      	movs	r2, #4
 8004232:	409a      	lsls	r2, r3
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	f043 0204 	orr.w	r2, r3, #4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004248:	2210      	movs	r2, #16
 800424a:	409a      	lsls	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4013      	ands	r3, r2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d043      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d03c      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004266:	2210      	movs	r2, #16
 8004268:	409a      	lsls	r2, r3
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d018      	beq.n	80042ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d108      	bne.n	800429c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d024      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	4798      	blx	r3
 800429a:	e01f      	b.n	80042dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01b      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	4798      	blx	r3
 80042ac:	e016      	b.n	80042dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d107      	bne.n	80042cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0208 	bic.w	r2, r2, #8
 80042ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e0:	2220      	movs	r2, #32
 80042e2:	409a      	lsls	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 808e 	beq.w	800440a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0310 	and.w	r3, r3, #16
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 8086 	beq.w	800440a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004302:	2220      	movs	r2, #32
 8004304:	409a      	lsls	r2, r3
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b05      	cmp	r3, #5
 8004314:	d136      	bne.n	8004384 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0216 	bic.w	r2, r2, #22
 8004324:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695a      	ldr	r2, [r3, #20]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004334:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d103      	bne.n	8004346 <HAL_DMA_IRQHandler+0x1da>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004342:	2b00      	cmp	r3, #0
 8004344:	d007      	beq.n	8004356 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0208 	bic.w	r2, r2, #8
 8004354:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435a:	223f      	movs	r2, #63	; 0x3f
 800435c:	409a      	lsls	r2, r3
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004376:	2b00      	cmp	r3, #0
 8004378:	d07d      	beq.n	8004476 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	4798      	blx	r3
        }
        return;
 8004382:	e078      	b.n	8004476 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d01c      	beq.n	80043cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d108      	bne.n	80043b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d030      	beq.n	800440a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	4798      	blx	r3
 80043b0:	e02b      	b.n	800440a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d027      	beq.n	800440a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	4798      	blx	r3
 80043c2:	e022      	b.n	800440a <HAL_DMA_IRQHandler+0x29e>
 80043c4:	20000048 	.word	0x20000048
 80043c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10f      	bne.n	80043fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0210 	bic.w	r2, r2, #16
 80043e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	2b00      	cmp	r3, #0
 8004410:	d032      	beq.n	8004478 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d022      	beq.n	8004464 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2205      	movs	r2, #5
 8004422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0201 	bic.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	3301      	adds	r3, #1
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	429a      	cmp	r2, r3
 8004440:	d307      	bcc.n	8004452 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f2      	bne.n	8004436 <HAL_DMA_IRQHandler+0x2ca>
 8004450:	e000      	b.n	8004454 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004452:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004468:	2b00      	cmp	r3, #0
 800446a:	d005      	beq.n	8004478 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	4798      	blx	r3
 8004474:	e000      	b.n	8004478 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004476:	bf00      	nop
    }
  }
}
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop

08004480 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800449c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b40      	cmp	r3, #64	; 0x40
 80044ac:	d108      	bne.n	80044c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044be:	e007      	b.n	80044d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	60da      	str	r2, [r3, #12]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	3b10      	subs	r3, #16
 80044ec:	4a14      	ldr	r2, [pc, #80]	; (8004540 <DMA_CalcBaseAndBitshift+0x64>)
 80044ee:	fba2 2303 	umull	r2, r3, r2, r3
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044f6:	4a13      	ldr	r2, [pc, #76]	; (8004544 <DMA_CalcBaseAndBitshift+0x68>)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b03      	cmp	r3, #3
 8004508:	d909      	bls.n	800451e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004512:	f023 0303 	bic.w	r3, r3, #3
 8004516:	1d1a      	adds	r2, r3, #4
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	659a      	str	r2, [r3, #88]	; 0x58
 800451c:	e007      	b.n	800452e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004526:	f023 0303 	bic.w	r3, r3, #3
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	aaaaaaab 	.word	0xaaaaaaab
 8004544:	080083c0 	.word	0x080083c0

08004548 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004558:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d11f      	bne.n	80045a2 <DMA_CheckFifoParam+0x5a>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b03      	cmp	r3, #3
 8004566:	d856      	bhi.n	8004616 <DMA_CheckFifoParam+0xce>
 8004568:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <DMA_CheckFifoParam+0x28>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	08004581 	.word	0x08004581
 8004574:	08004593 	.word	0x08004593
 8004578:	08004581 	.word	0x08004581
 800457c:	08004617 	.word	0x08004617
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d046      	beq.n	800461a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004590:	e043      	b.n	800461a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800459a:	d140      	bne.n	800461e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a0:	e03d      	b.n	800461e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045aa:	d121      	bne.n	80045f0 <DMA_CheckFifoParam+0xa8>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d837      	bhi.n	8004622 <DMA_CheckFifoParam+0xda>
 80045b2:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <DMA_CheckFifoParam+0x70>)
 80045b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b8:	080045c9 	.word	0x080045c9
 80045bc:	080045cf 	.word	0x080045cf
 80045c0:	080045c9 	.word	0x080045c9
 80045c4:	080045e1 	.word	0x080045e1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
      break;
 80045cc:	e030      	b.n	8004630 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d025      	beq.n	8004626 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045de:	e022      	b.n	8004626 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045e8:	d11f      	bne.n	800462a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045ee:	e01c      	b.n	800462a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d903      	bls.n	80045fe <DMA_CheckFifoParam+0xb6>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d003      	beq.n	8004604 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045fc:	e018      	b.n	8004630 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
      break;
 8004602:	e015      	b.n	8004630 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00e      	beq.n	800462e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	73fb      	strb	r3, [r7, #15]
      break;
 8004614:	e00b      	b.n	800462e <DMA_CheckFifoParam+0xe6>
      break;
 8004616:	bf00      	nop
 8004618:	e00a      	b.n	8004630 <DMA_CheckFifoParam+0xe8>
      break;
 800461a:	bf00      	nop
 800461c:	e008      	b.n	8004630 <DMA_CheckFifoParam+0xe8>
      break;
 800461e:	bf00      	nop
 8004620:	e006      	b.n	8004630 <DMA_CheckFifoParam+0xe8>
      break;
 8004622:	bf00      	nop
 8004624:	e004      	b.n	8004630 <DMA_CheckFifoParam+0xe8>
      break;
 8004626:	bf00      	nop
 8004628:	e002      	b.n	8004630 <DMA_CheckFifoParam+0xe8>
      break;   
 800462a:	bf00      	nop
 800462c:	e000      	b.n	8004630 <DMA_CheckFifoParam+0xe8>
      break;
 800462e:	bf00      	nop
    }
  } 
  
  return status; 
 8004630:	7bfb      	ldrb	r3, [r7, #15]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop

08004640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004640:	b480      	push	{r7}
 8004642:	b089      	sub	sp, #36	; 0x24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800464a:	2300      	movs	r3, #0
 800464c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800464e:	2300      	movs	r3, #0
 8004650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004652:	2300      	movs	r3, #0
 8004654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004656:	2300      	movs	r3, #0
 8004658:	61fb      	str	r3, [r7, #28]
 800465a:	e159      	b.n	8004910 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800465c:	2201      	movs	r2, #1
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	4013      	ands	r3, r2
 800466e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	429a      	cmp	r2, r3
 8004676:	f040 8148 	bne.w	800490a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b01      	cmp	r3, #1
 8004684:	d005      	beq.n	8004692 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800468e:	2b02      	cmp	r3, #2
 8004690:	d130      	bne.n	80046f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	2203      	movs	r2, #3
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	43db      	mvns	r3, r3
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	4013      	ands	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046c8:	2201      	movs	r2, #1
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	43db      	mvns	r3, r3
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4013      	ands	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	091b      	lsrs	r3, r3, #4
 80046de:	f003 0201 	and.w	r2, r3, #1
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d017      	beq.n	8004730 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	2203      	movs	r2, #3
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	43db      	mvns	r3, r3
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4013      	ands	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4313      	orrs	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 0303 	and.w	r3, r3, #3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d123      	bne.n	8004784 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	08da      	lsrs	r2, r3, #3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3208      	adds	r2, #8
 8004744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004748:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	220f      	movs	r2, #15
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4313      	orrs	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	08da      	lsrs	r2, r3, #3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3208      	adds	r2, #8
 800477e:	69b9      	ldr	r1, [r7, #24]
 8004780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	2203      	movs	r2, #3
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4013      	ands	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 0203 	and.w	r2, r3, #3
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 80a2 	beq.w	800490a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	4b57      	ldr	r3, [pc, #348]	; (8004928 <HAL_GPIO_Init+0x2e8>)
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	4a56      	ldr	r2, [pc, #344]	; (8004928 <HAL_GPIO_Init+0x2e8>)
 80047d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047d4:	6453      	str	r3, [r2, #68]	; 0x44
 80047d6:	4b54      	ldr	r3, [pc, #336]	; (8004928 <HAL_GPIO_Init+0x2e8>)
 80047d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047e2:	4a52      	ldr	r2, [pc, #328]	; (800492c <HAL_GPIO_Init+0x2ec>)
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	089b      	lsrs	r3, r3, #2
 80047e8:	3302      	adds	r3, #2
 80047ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	220f      	movs	r2, #15
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	43db      	mvns	r3, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4013      	ands	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a49      	ldr	r2, [pc, #292]	; (8004930 <HAL_GPIO_Init+0x2f0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d019      	beq.n	8004842 <HAL_GPIO_Init+0x202>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a48      	ldr	r2, [pc, #288]	; (8004934 <HAL_GPIO_Init+0x2f4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d013      	beq.n	800483e <HAL_GPIO_Init+0x1fe>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a47      	ldr	r2, [pc, #284]	; (8004938 <HAL_GPIO_Init+0x2f8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00d      	beq.n	800483a <HAL_GPIO_Init+0x1fa>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a46      	ldr	r2, [pc, #280]	; (800493c <HAL_GPIO_Init+0x2fc>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d007      	beq.n	8004836 <HAL_GPIO_Init+0x1f6>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a45      	ldr	r2, [pc, #276]	; (8004940 <HAL_GPIO_Init+0x300>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d101      	bne.n	8004832 <HAL_GPIO_Init+0x1f2>
 800482e:	2304      	movs	r3, #4
 8004830:	e008      	b.n	8004844 <HAL_GPIO_Init+0x204>
 8004832:	2307      	movs	r3, #7
 8004834:	e006      	b.n	8004844 <HAL_GPIO_Init+0x204>
 8004836:	2303      	movs	r3, #3
 8004838:	e004      	b.n	8004844 <HAL_GPIO_Init+0x204>
 800483a:	2302      	movs	r3, #2
 800483c:	e002      	b.n	8004844 <HAL_GPIO_Init+0x204>
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <HAL_GPIO_Init+0x204>
 8004842:	2300      	movs	r3, #0
 8004844:	69fa      	ldr	r2, [r7, #28]
 8004846:	f002 0203 	and.w	r2, r2, #3
 800484a:	0092      	lsls	r2, r2, #2
 800484c:	4093      	lsls	r3, r2
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4313      	orrs	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004854:	4935      	ldr	r1, [pc, #212]	; (800492c <HAL_GPIO_Init+0x2ec>)
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	089b      	lsrs	r3, r3, #2
 800485a:	3302      	adds	r3, #2
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004862:	4b38      	ldr	r3, [pc, #224]	; (8004944 <HAL_GPIO_Init+0x304>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004886:	4a2f      	ldr	r2, [pc, #188]	; (8004944 <HAL_GPIO_Init+0x304>)
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800488c:	4b2d      	ldr	r3, [pc, #180]	; (8004944 <HAL_GPIO_Init+0x304>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	43db      	mvns	r3, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4013      	ands	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048b0:	4a24      	ldr	r2, [pc, #144]	; (8004944 <HAL_GPIO_Init+0x304>)
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048b6:	4b23      	ldr	r3, [pc, #140]	; (8004944 <HAL_GPIO_Init+0x304>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	43db      	mvns	r3, r3
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	4013      	ands	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048da:	4a1a      	ldr	r2, [pc, #104]	; (8004944 <HAL_GPIO_Init+0x304>)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048e0:	4b18      	ldr	r3, [pc, #96]	; (8004944 <HAL_GPIO_Init+0x304>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	43db      	mvns	r3, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4013      	ands	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004904:	4a0f      	ldr	r2, [pc, #60]	; (8004944 <HAL_GPIO_Init+0x304>)
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	3301      	adds	r3, #1
 800490e:	61fb      	str	r3, [r7, #28]
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	2b0f      	cmp	r3, #15
 8004914:	f67f aea2 	bls.w	800465c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop
 800491c:	3724      	adds	r7, #36	; 0x24
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40023800 	.word	0x40023800
 800492c:	40013800 	.word	0x40013800
 8004930:	40020000 	.word	0x40020000
 8004934:	40020400 	.word	0x40020400
 8004938:	40020800 	.word	0x40020800
 800493c:	40020c00 	.word	0x40020c00
 8004940:	40021000 	.word	0x40021000
 8004944:	40013c00 	.word	0x40013c00

08004948 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	887b      	ldrh	r3, [r7, #2]
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
 8004964:	e001      	b.n	800496a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004966:	2300      	movs	r3, #0
 8004968:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800496a:	7bfb      	ldrb	r3, [r7, #15]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	807b      	strh	r3, [r7, #2]
 8004984:	4613      	mov	r3, r2
 8004986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004988:	787b      	ldrb	r3, [r7, #1]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800498e:	887a      	ldrh	r2, [r7, #2]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004994:	e003      	b.n	800499e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004996:	887b      	ldrh	r3, [r7, #2]
 8004998:	041a      	lsls	r2, r3, #16
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	619a      	str	r2, [r3, #24]
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
	...

080049ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80049b6:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049b8:	695a      	ldr	r2, [r3, #20]
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	4013      	ands	r3, r2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d006      	beq.n	80049d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049c2:	4a05      	ldr	r2, [pc, #20]	; (80049d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049c8:	88fb      	ldrh	r3, [r7, #6]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 f806 	bl	80049dc <HAL_GPIO_EXTI_Callback>
  }
}
 80049d0:	bf00      	nop
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40013c00 	.word	0x40013c00

080049dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e12b      	b.n	8004c5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fe fdb6 	bl	800358c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2224      	movs	r2, #36	; 0x24
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0201 	bic.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a58:	f000 feb0 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8004a5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	4a81      	ldr	r2, [pc, #516]	; (8004c68 <HAL_I2C_Init+0x274>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d807      	bhi.n	8004a78 <HAL_I2C_Init+0x84>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4a80      	ldr	r2, [pc, #512]	; (8004c6c <HAL_I2C_Init+0x278>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	bf94      	ite	ls
 8004a70:	2301      	movls	r3, #1
 8004a72:	2300      	movhi	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	e006      	b.n	8004a86 <HAL_I2C_Init+0x92>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4a7d      	ldr	r2, [pc, #500]	; (8004c70 <HAL_I2C_Init+0x27c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	bf94      	ite	ls
 8004a80:	2301      	movls	r3, #1
 8004a82:	2300      	movhi	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e0e7      	b.n	8004c5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4a78      	ldr	r2, [pc, #480]	; (8004c74 <HAL_I2C_Init+0x280>)
 8004a92:	fba2 2303 	umull	r2, r3, r2, r3
 8004a96:	0c9b      	lsrs	r3, r3, #18
 8004a98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	4a6a      	ldr	r2, [pc, #424]	; (8004c68 <HAL_I2C_Init+0x274>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d802      	bhi.n	8004ac8 <HAL_I2C_Init+0xd4>
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	e009      	b.n	8004adc <HAL_I2C_Init+0xe8>
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ace:	fb02 f303 	mul.w	r3, r2, r3
 8004ad2:	4a69      	ldr	r2, [pc, #420]	; (8004c78 <HAL_I2C_Init+0x284>)
 8004ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad8:	099b      	lsrs	r3, r3, #6
 8004ada:	3301      	adds	r3, #1
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	430b      	orrs	r3, r1
 8004ae2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004aee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	495c      	ldr	r1, [pc, #368]	; (8004c68 <HAL_I2C_Init+0x274>)
 8004af8:	428b      	cmp	r3, r1
 8004afa:	d819      	bhi.n	8004b30 <HAL_I2C_Init+0x13c>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	1e59      	subs	r1, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b0a:	1c59      	adds	r1, r3, #1
 8004b0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b10:	400b      	ands	r3, r1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_I2C_Init+0x138>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1e59      	subs	r1, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b24:	3301      	adds	r3, #1
 8004b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b2a:	e051      	b.n	8004bd0 <HAL_I2C_Init+0x1dc>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	e04f      	b.n	8004bd0 <HAL_I2C_Init+0x1dc>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d111      	bne.n	8004b5c <HAL_I2C_Init+0x168>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	1e58      	subs	r0, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6859      	ldr	r1, [r3, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	440b      	add	r3, r1
 8004b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	bf0c      	ite	eq
 8004b54:	2301      	moveq	r3, #1
 8004b56:	2300      	movne	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	e012      	b.n	8004b82 <HAL_I2C_Init+0x18e>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	1e58      	subs	r0, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6859      	ldr	r1, [r3, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	0099      	lsls	r1, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b72:	3301      	adds	r3, #1
 8004b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf0c      	ite	eq
 8004b7c:	2301      	moveq	r3, #1
 8004b7e:	2300      	movne	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <HAL_I2C_Init+0x196>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e022      	b.n	8004bd0 <HAL_I2C_Init+0x1dc>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10e      	bne.n	8004bb0 <HAL_I2C_Init+0x1bc>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	1e58      	subs	r0, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6859      	ldr	r1, [r3, #4]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	440b      	add	r3, r1
 8004ba0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bae:	e00f      	b.n	8004bd0 <HAL_I2C_Init+0x1dc>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	1e58      	subs	r0, r3, #1
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6859      	ldr	r1, [r3, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	0099      	lsls	r1, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	6809      	ldr	r1, [r1, #0]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69da      	ldr	r2, [r3, #28]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6911      	ldr	r1, [r2, #16]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	68d2      	ldr	r2, [r2, #12]
 8004c0a:	4311      	orrs	r1, r2
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6812      	ldr	r2, [r2, #0]
 8004c10:	430b      	orrs	r3, r1
 8004c12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	000186a0 	.word	0x000186a0
 8004c6c:	001e847f 	.word	0x001e847f
 8004c70:	003d08ff 	.word	0x003d08ff
 8004c74:	431bde83 	.word	0x431bde83
 8004c78:	10624dd3 	.word	0x10624dd3

08004c7c <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	461a      	mov	r2, r3
 8004c88:	460b      	mov	r3, r1
 8004c8a:	817b      	strh	r3, [r7, #10]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	f040 8085 	bne.w	8004dac <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ca2:	4b46      	ldr	r3, [pc, #280]	; (8004dbc <HAL_I2C_Master_Transmit_IT+0x140>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	08db      	lsrs	r3, r3, #3
 8004ca8:	4a45      	ldr	r2, [pc, #276]	; (8004dc0 <HAL_I2C_Master_Transmit_IT+0x144>)
 8004caa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cae:	0a1a      	lsrs	r2, r3, #8
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009a      	lsls	r2, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d116      	bne.n	8004cf6 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f043 0220 	orr.w	r2, r3, #32
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e05b      	b.n	8004dae <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d0db      	beq.n	8004cbc <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_I2C_Master_Transmit_IT+0x96>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e04d      	b.n	8004dae <HAL_I2C_Master_Transmit_IT+0x132>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d007      	beq.n	8004d38 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2221      	movs	r2, #33	; 0x21
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2210      	movs	r2, #16
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	893a      	ldrh	r2, [r7, #8]
 8004d68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4a13      	ldr	r2, [pc, #76]	; (8004dc4 <HAL_I2C_Master_Transmit_IT+0x148>)
 8004d78:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004d7a:	897a      	ldrh	r2, [r7, #10]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d8e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004da6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	e000      	b.n	8004dae <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8004dac:	2302      	movs	r3, #2
  }
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20000048 	.word	0x20000048
 8004dc0:	14f8b589 	.word	0x14f8b589
 8004dc4:	ffff0000 	.word	0xffff0000

08004dc8 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	607a      	str	r2, [r7, #4]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	817b      	strh	r3, [r7, #10]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b20      	cmp	r3, #32
 8004dea:	f040 808d 	bne.w	8004f08 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004dee:	4b4a      	ldr	r3, [pc, #296]	; (8004f18 <HAL_I2C_Master_Receive_IT+0x150>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	08db      	lsrs	r3, r3, #3
 8004df4:	4a49      	ldr	r2, [pc, #292]	; (8004f1c <HAL_I2C_Master_Receive_IT+0x154>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	0a1a      	lsrs	r2, r3, #8
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009a      	lsls	r2, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d116      	bne.n	8004e42 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f043 0220 	orr.w	r2, r3, #32
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e063      	b.n	8004f0a <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d0db      	beq.n	8004e08 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_I2C_Master_Receive_IT+0x96>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e055      	b.n	8004f0a <HAL_I2C_Master_Receive_IT+0x142>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d007      	beq.n	8004e84 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2222      	movs	r2, #34	; 0x22
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2210      	movs	r2, #16
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	893a      	ldrh	r2, [r7, #8]
 8004eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4a17      	ldr	r2, [pc, #92]	; (8004f20 <HAL_I2C_Master_Receive_IT+0x158>)
 8004ec4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004ec6:	897a      	ldrh	r2, [r7, #10]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004eda:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eea:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004f02:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	e000      	b.n	8004f0a <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8004f08:	2302      	movs	r3, #2
  }
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	20000048 	.word	0x20000048
 8004f1c:	14f8b589 	.word	0x14f8b589
 8004f20:	ffff0000 	.word	0xffff0000

08004f24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e264      	b.n	8005400 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d075      	beq.n	800502e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f42:	4ba3      	ldr	r3, [pc, #652]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 030c 	and.w	r3, r3, #12
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d00c      	beq.n	8004f68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f4e:	4ba0      	ldr	r3, [pc, #640]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d112      	bne.n	8004f80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f5a:	4b9d      	ldr	r3, [pc, #628]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f66:	d10b      	bne.n	8004f80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f68:	4b99      	ldr	r3, [pc, #612]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d05b      	beq.n	800502c <HAL_RCC_OscConfig+0x108>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d157      	bne.n	800502c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e23f      	b.n	8005400 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f88:	d106      	bne.n	8004f98 <HAL_RCC_OscConfig+0x74>
 8004f8a:	4b91      	ldr	r3, [pc, #580]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a90      	ldr	r2, [pc, #576]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8004f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	e01d      	b.n	8004fd4 <HAL_RCC_OscConfig+0xb0>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fa0:	d10c      	bne.n	8004fbc <HAL_RCC_OscConfig+0x98>
 8004fa2:	4b8b      	ldr	r3, [pc, #556]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a8a      	ldr	r2, [pc, #552]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8004fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	4b88      	ldr	r3, [pc, #544]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a87      	ldr	r2, [pc, #540]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8004fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	e00b      	b.n	8004fd4 <HAL_RCC_OscConfig+0xb0>
 8004fbc:	4b84      	ldr	r3, [pc, #528]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a83      	ldr	r2, [pc, #524]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8004fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	4b81      	ldr	r3, [pc, #516]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a80      	ldr	r2, [pc, #512]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8004fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d013      	beq.n	8005004 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fdc:	f7fe fdec 	bl	8003bb8 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fe4:	f7fe fde8 	bl	8003bb8 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b64      	cmp	r3, #100	; 0x64
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e204      	b.n	8005400 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff6:	4b76      	ldr	r3, [pc, #472]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0xc0>
 8005002:	e014      	b.n	800502e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005004:	f7fe fdd8 	bl	8003bb8 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800500c:	f7fe fdd4 	bl	8003bb8 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b64      	cmp	r3, #100	; 0x64
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e1f0      	b.n	8005400 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800501e:	4b6c      	ldr	r3, [pc, #432]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f0      	bne.n	800500c <HAL_RCC_OscConfig+0xe8>
 800502a:	e000      	b.n	800502e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800502c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d063      	beq.n	8005102 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800503a:	4b65      	ldr	r3, [pc, #404]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 030c 	and.w	r3, r3, #12
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00b      	beq.n	800505e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005046:	4b62      	ldr	r3, [pc, #392]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800504e:	2b08      	cmp	r3, #8
 8005050:	d11c      	bne.n	800508c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005052:	4b5f      	ldr	r3, [pc, #380]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d116      	bne.n	800508c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800505e:	4b5c      	ldr	r3, [pc, #368]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d005      	beq.n	8005076 <HAL_RCC_OscConfig+0x152>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d001      	beq.n	8005076 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e1c4      	b.n	8005400 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005076:	4b56      	ldr	r3, [pc, #344]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	4952      	ldr	r1, [pc, #328]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8005086:	4313      	orrs	r3, r2
 8005088:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800508a:	e03a      	b.n	8005102 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d020      	beq.n	80050d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005094:	4b4f      	ldr	r3, [pc, #316]	; (80051d4 <HAL_RCC_OscConfig+0x2b0>)
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509a:	f7fe fd8d 	bl	8003bb8 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050a2:	f7fe fd89 	bl	8003bb8 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e1a5      	b.n	8005400 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b4:	4b46      	ldr	r3, [pc, #280]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c0:	4b43      	ldr	r3, [pc, #268]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	4940      	ldr	r1, [pc, #256]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	600b      	str	r3, [r1, #0]
 80050d4:	e015      	b.n	8005102 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050d6:	4b3f      	ldr	r3, [pc, #252]	; (80051d4 <HAL_RCC_OscConfig+0x2b0>)
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050dc:	f7fe fd6c 	bl	8003bb8 <HAL_GetTick>
 80050e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050e4:	f7fe fd68 	bl	8003bb8 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e184      	b.n	8005400 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050f6:	4b36      	ldr	r3, [pc, #216]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f0      	bne.n	80050e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b00      	cmp	r3, #0
 800510c:	d030      	beq.n	8005170 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d016      	beq.n	8005144 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005116:	4b30      	ldr	r3, [pc, #192]	; (80051d8 <HAL_RCC_OscConfig+0x2b4>)
 8005118:	2201      	movs	r2, #1
 800511a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511c:	f7fe fd4c 	bl	8003bb8 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005124:	f7fe fd48 	bl	8003bb8 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e164      	b.n	8005400 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005136:	4b26      	ldr	r3, [pc, #152]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8005138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0f0      	beq.n	8005124 <HAL_RCC_OscConfig+0x200>
 8005142:	e015      	b.n	8005170 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005144:	4b24      	ldr	r3, [pc, #144]	; (80051d8 <HAL_RCC_OscConfig+0x2b4>)
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800514a:	f7fe fd35 	bl	8003bb8 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005152:	f7fe fd31 	bl	8003bb8 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e14d      	b.n	8005400 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005164:	4b1a      	ldr	r3, [pc, #104]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8005166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1f0      	bne.n	8005152 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 80a0 	beq.w	80052be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800517e:	2300      	movs	r3, #0
 8005180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005182:	4b13      	ldr	r3, [pc, #76]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10f      	bne.n	80051ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800518e:	2300      	movs	r3, #0
 8005190:	60bb      	str	r3, [r7, #8]
 8005192:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	4a0e      	ldr	r2, [pc, #56]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 8005198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519c:	6413      	str	r3, [r2, #64]	; 0x40
 800519e:	4b0c      	ldr	r3, [pc, #48]	; (80051d0 <HAL_RCC_OscConfig+0x2ac>)
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a6:	60bb      	str	r3, [r7, #8]
 80051a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051aa:	2301      	movs	r3, #1
 80051ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ae:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <HAL_RCC_OscConfig+0x2b8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d121      	bne.n	80051fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ba:	4b08      	ldr	r3, [pc, #32]	; (80051dc <HAL_RCC_OscConfig+0x2b8>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a07      	ldr	r2, [pc, #28]	; (80051dc <HAL_RCC_OscConfig+0x2b8>)
 80051c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051c6:	f7fe fcf7 	bl	8003bb8 <HAL_GetTick>
 80051ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051cc:	e011      	b.n	80051f2 <HAL_RCC_OscConfig+0x2ce>
 80051ce:	bf00      	nop
 80051d0:	40023800 	.word	0x40023800
 80051d4:	42470000 	.word	0x42470000
 80051d8:	42470e80 	.word	0x42470e80
 80051dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e0:	f7fe fcea 	bl	8003bb8 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e106      	b.n	8005400 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f2:	4b85      	ldr	r3, [pc, #532]	; (8005408 <HAL_RCC_OscConfig+0x4e4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d106      	bne.n	8005214 <HAL_RCC_OscConfig+0x2f0>
 8005206:	4b81      	ldr	r3, [pc, #516]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520a:	4a80      	ldr	r2, [pc, #512]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 800520c:	f043 0301 	orr.w	r3, r3, #1
 8005210:	6713      	str	r3, [r2, #112]	; 0x70
 8005212:	e01c      	b.n	800524e <HAL_RCC_OscConfig+0x32a>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	2b05      	cmp	r3, #5
 800521a:	d10c      	bne.n	8005236 <HAL_RCC_OscConfig+0x312>
 800521c:	4b7b      	ldr	r3, [pc, #492]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005220:	4a7a      	ldr	r2, [pc, #488]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 8005222:	f043 0304 	orr.w	r3, r3, #4
 8005226:	6713      	str	r3, [r2, #112]	; 0x70
 8005228:	4b78      	ldr	r3, [pc, #480]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 800522a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522c:	4a77      	ldr	r2, [pc, #476]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 800522e:	f043 0301 	orr.w	r3, r3, #1
 8005232:	6713      	str	r3, [r2, #112]	; 0x70
 8005234:	e00b      	b.n	800524e <HAL_RCC_OscConfig+0x32a>
 8005236:	4b75      	ldr	r3, [pc, #468]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 8005238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523a:	4a74      	ldr	r2, [pc, #464]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 800523c:	f023 0301 	bic.w	r3, r3, #1
 8005240:	6713      	str	r3, [r2, #112]	; 0x70
 8005242:	4b72      	ldr	r3, [pc, #456]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 8005244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005246:	4a71      	ldr	r2, [pc, #452]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 8005248:	f023 0304 	bic.w	r3, r3, #4
 800524c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d015      	beq.n	8005282 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005256:	f7fe fcaf 	bl	8003bb8 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525c:	e00a      	b.n	8005274 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800525e:	f7fe fcab 	bl	8003bb8 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	f241 3288 	movw	r2, #5000	; 0x1388
 800526c:	4293      	cmp	r3, r2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e0c5      	b.n	8005400 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005274:	4b65      	ldr	r3, [pc, #404]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 8005276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0ee      	beq.n	800525e <HAL_RCC_OscConfig+0x33a>
 8005280:	e014      	b.n	80052ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005282:	f7fe fc99 	bl	8003bb8 <HAL_GetTick>
 8005286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005288:	e00a      	b.n	80052a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800528a:	f7fe fc95 	bl	8003bb8 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	f241 3288 	movw	r2, #5000	; 0x1388
 8005298:	4293      	cmp	r3, r2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e0af      	b.n	8005400 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052a0:	4b5a      	ldr	r3, [pc, #360]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 80052a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1ee      	bne.n	800528a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052ac:	7dfb      	ldrb	r3, [r7, #23]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d105      	bne.n	80052be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052b2:	4b56      	ldr	r3, [pc, #344]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	4a55      	ldr	r2, [pc, #340]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 80052b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 809b 	beq.w	80053fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052c8:	4b50      	ldr	r3, [pc, #320]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 030c 	and.w	r3, r3, #12
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d05c      	beq.n	800538e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d141      	bne.n	8005360 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052dc:	4b4c      	ldr	r3, [pc, #304]	; (8005410 <HAL_RCC_OscConfig+0x4ec>)
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e2:	f7fe fc69 	bl	8003bb8 <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ea:	f7fe fc65 	bl	8003bb8 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e081      	b.n	8005400 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fc:	4b43      	ldr	r3, [pc, #268]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1f0      	bne.n	80052ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69da      	ldr	r2, [r3, #28]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	019b      	lsls	r3, r3, #6
 8005318:	431a      	orrs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	085b      	lsrs	r3, r3, #1
 8005320:	3b01      	subs	r3, #1
 8005322:	041b      	lsls	r3, r3, #16
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	061b      	lsls	r3, r3, #24
 800532c:	4937      	ldr	r1, [pc, #220]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 800532e:	4313      	orrs	r3, r2
 8005330:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005332:	4b37      	ldr	r3, [pc, #220]	; (8005410 <HAL_RCC_OscConfig+0x4ec>)
 8005334:	2201      	movs	r2, #1
 8005336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005338:	f7fe fc3e 	bl	8003bb8 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005340:	f7fe fc3a 	bl	8003bb8 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e056      	b.n	8005400 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005352:	4b2e      	ldr	r3, [pc, #184]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0f0      	beq.n	8005340 <HAL_RCC_OscConfig+0x41c>
 800535e:	e04e      	b.n	80053fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005360:	4b2b      	ldr	r3, [pc, #172]	; (8005410 <HAL_RCC_OscConfig+0x4ec>)
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005366:	f7fe fc27 	bl	8003bb8 <HAL_GetTick>
 800536a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800536c:	e008      	b.n	8005380 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800536e:	f7fe fc23 	bl	8003bb8 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e03f      	b.n	8005400 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005380:	4b22      	ldr	r3, [pc, #136]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1f0      	bne.n	800536e <HAL_RCC_OscConfig+0x44a>
 800538c:	e037      	b.n	80053fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e032      	b.n	8005400 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800539a:	4b1c      	ldr	r3, [pc, #112]	; (800540c <HAL_RCC_OscConfig+0x4e8>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d028      	beq.n	80053fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d121      	bne.n	80053fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d11a      	bne.n	80053fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053ca:	4013      	ands	r3, r2
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d111      	bne.n	80053fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e0:	085b      	lsrs	r3, r3, #1
 80053e2:	3b01      	subs	r3, #1
 80053e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d107      	bne.n	80053fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d001      	beq.n	80053fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40007000 	.word	0x40007000
 800540c:	40023800 	.word	0x40023800
 8005410:	42470060 	.word	0x42470060

08005414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e0cc      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005428:	4b68      	ldr	r3, [pc, #416]	; (80055cc <HAL_RCC_ClockConfig+0x1b8>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d90c      	bls.n	8005450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005436:	4b65      	ldr	r3, [pc, #404]	; (80055cc <HAL_RCC_ClockConfig+0x1b8>)
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800543e:	4b63      	ldr	r3, [pc, #396]	; (80055cc <HAL_RCC_ClockConfig+0x1b8>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d001      	beq.n	8005450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e0b8      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d020      	beq.n	800549e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005468:	4b59      	ldr	r3, [pc, #356]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	4a58      	ldr	r2, [pc, #352]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 800546e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005480:	4b53      	ldr	r3, [pc, #332]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	4a52      	ldr	r2, [pc, #328]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800548a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800548c:	4b50      	ldr	r3, [pc, #320]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	494d      	ldr	r1, [pc, #308]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 800549a:	4313      	orrs	r3, r2
 800549c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d044      	beq.n	8005534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d107      	bne.n	80054c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b2:	4b47      	ldr	r3, [pc, #284]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d119      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e07f      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d003      	beq.n	80054d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d107      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d2:	4b3f      	ldr	r3, [pc, #252]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d109      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e06f      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e2:	4b3b      	ldr	r3, [pc, #236]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e067      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054f2:	4b37      	ldr	r3, [pc, #220]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f023 0203 	bic.w	r2, r3, #3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	4934      	ldr	r1, [pc, #208]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005500:	4313      	orrs	r3, r2
 8005502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005504:	f7fe fb58 	bl	8003bb8 <HAL_GetTick>
 8005508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550a:	e00a      	b.n	8005522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800550c:	f7fe fb54 	bl	8003bb8 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	f241 3288 	movw	r2, #5000	; 0x1388
 800551a:	4293      	cmp	r3, r2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e04f      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005522:	4b2b      	ldr	r3, [pc, #172]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 020c 	and.w	r2, r3, #12
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	429a      	cmp	r2, r3
 8005532:	d1eb      	bne.n	800550c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005534:	4b25      	ldr	r3, [pc, #148]	; (80055cc <HAL_RCC_ClockConfig+0x1b8>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d20c      	bcs.n	800555c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005542:	4b22      	ldr	r3, [pc, #136]	; (80055cc <HAL_RCC_ClockConfig+0x1b8>)
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800554a:	4b20      	ldr	r3, [pc, #128]	; (80055cc <HAL_RCC_ClockConfig+0x1b8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d001      	beq.n	800555c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e032      	b.n	80055c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d008      	beq.n	800557a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005568:	4b19      	ldr	r3, [pc, #100]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	4916      	ldr	r1, [pc, #88]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	4313      	orrs	r3, r2
 8005578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d009      	beq.n	800559a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005586:	4b12      	ldr	r3, [pc, #72]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	490e      	ldr	r1, [pc, #56]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005596:	4313      	orrs	r3, r2
 8005598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800559a:	f000 f821 	bl	80055e0 <HAL_RCC_GetSysClockFreq>
 800559e:	4602      	mov	r2, r0
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <HAL_RCC_ClockConfig+0x1bc>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	091b      	lsrs	r3, r3, #4
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	490a      	ldr	r1, [pc, #40]	; (80055d4 <HAL_RCC_ClockConfig+0x1c0>)
 80055ac:	5ccb      	ldrb	r3, [r1, r3]
 80055ae:	fa22 f303 	lsr.w	r3, r2, r3
 80055b2:	4a09      	ldr	r2, [pc, #36]	; (80055d8 <HAL_RCC_ClockConfig+0x1c4>)
 80055b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055b6:	4b09      	ldr	r3, [pc, #36]	; (80055dc <HAL_RCC_ClockConfig+0x1c8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fe fab8 	bl	8003b30 <HAL_InitTick>

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40023c00 	.word	0x40023c00
 80055d0:	40023800 	.word	0x40023800
 80055d4:	080083a8 	.word	0x080083a8
 80055d8:	20000048 	.word	0x20000048
 80055dc:	2000004c 	.word	0x2000004c

080055e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	607b      	str	r3, [r7, #4]
 80055ec:	2300      	movs	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	2300      	movs	r3, #0
 80055f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055f8:	4b67      	ldr	r3, [pc, #412]	; (8005798 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 030c 	and.w	r3, r3, #12
 8005600:	2b08      	cmp	r3, #8
 8005602:	d00d      	beq.n	8005620 <HAL_RCC_GetSysClockFreq+0x40>
 8005604:	2b08      	cmp	r3, #8
 8005606:	f200 80bd 	bhi.w	8005784 <HAL_RCC_GetSysClockFreq+0x1a4>
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <HAL_RCC_GetSysClockFreq+0x34>
 800560e:	2b04      	cmp	r3, #4
 8005610:	d003      	beq.n	800561a <HAL_RCC_GetSysClockFreq+0x3a>
 8005612:	e0b7      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005614:	4b61      	ldr	r3, [pc, #388]	; (800579c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005616:	60bb      	str	r3, [r7, #8]
       break;
 8005618:	e0b7      	b.n	800578a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800561a:	4b61      	ldr	r3, [pc, #388]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800561c:	60bb      	str	r3, [r7, #8]
      break;
 800561e:	e0b4      	b.n	800578a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005620:	4b5d      	ldr	r3, [pc, #372]	; (8005798 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005628:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800562a:	4b5b      	ldr	r3, [pc, #364]	; (8005798 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d04d      	beq.n	80056d2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005636:	4b58      	ldr	r3, [pc, #352]	; (8005798 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	099b      	lsrs	r3, r3, #6
 800563c:	461a      	mov	r2, r3
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005646:	f04f 0100 	mov.w	r1, #0
 800564a:	ea02 0800 	and.w	r8, r2, r0
 800564e:	ea03 0901 	and.w	r9, r3, r1
 8005652:	4640      	mov	r0, r8
 8005654:	4649      	mov	r1, r9
 8005656:	f04f 0200 	mov.w	r2, #0
 800565a:	f04f 0300 	mov.w	r3, #0
 800565e:	014b      	lsls	r3, r1, #5
 8005660:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005664:	0142      	lsls	r2, r0, #5
 8005666:	4610      	mov	r0, r2
 8005668:	4619      	mov	r1, r3
 800566a:	ebb0 0008 	subs.w	r0, r0, r8
 800566e:	eb61 0109 	sbc.w	r1, r1, r9
 8005672:	f04f 0200 	mov.w	r2, #0
 8005676:	f04f 0300 	mov.w	r3, #0
 800567a:	018b      	lsls	r3, r1, #6
 800567c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005680:	0182      	lsls	r2, r0, #6
 8005682:	1a12      	subs	r2, r2, r0
 8005684:	eb63 0301 	sbc.w	r3, r3, r1
 8005688:	f04f 0000 	mov.w	r0, #0
 800568c:	f04f 0100 	mov.w	r1, #0
 8005690:	00d9      	lsls	r1, r3, #3
 8005692:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005696:	00d0      	lsls	r0, r2, #3
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	eb12 0208 	adds.w	r2, r2, r8
 80056a0:	eb43 0309 	adc.w	r3, r3, r9
 80056a4:	f04f 0000 	mov.w	r0, #0
 80056a8:	f04f 0100 	mov.w	r1, #0
 80056ac:	0259      	lsls	r1, r3, #9
 80056ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80056b2:	0250      	lsls	r0, r2, #9
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4610      	mov	r0, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	461a      	mov	r2, r3
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	f7fb fb3c 	bl	8000d40 <__aeabi_uldivmod>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4613      	mov	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	e04a      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056d2:	4b31      	ldr	r3, [pc, #196]	; (8005798 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	099b      	lsrs	r3, r3, #6
 80056d8:	461a      	mov	r2, r3
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80056e2:	f04f 0100 	mov.w	r1, #0
 80056e6:	ea02 0400 	and.w	r4, r2, r0
 80056ea:	ea03 0501 	and.w	r5, r3, r1
 80056ee:	4620      	mov	r0, r4
 80056f0:	4629      	mov	r1, r5
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	014b      	lsls	r3, r1, #5
 80056fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005700:	0142      	lsls	r2, r0, #5
 8005702:	4610      	mov	r0, r2
 8005704:	4619      	mov	r1, r3
 8005706:	1b00      	subs	r0, r0, r4
 8005708:	eb61 0105 	sbc.w	r1, r1, r5
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	018b      	lsls	r3, r1, #6
 8005716:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800571a:	0182      	lsls	r2, r0, #6
 800571c:	1a12      	subs	r2, r2, r0
 800571e:	eb63 0301 	sbc.w	r3, r3, r1
 8005722:	f04f 0000 	mov.w	r0, #0
 8005726:	f04f 0100 	mov.w	r1, #0
 800572a:	00d9      	lsls	r1, r3, #3
 800572c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005730:	00d0      	lsls	r0, r2, #3
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	1912      	adds	r2, r2, r4
 8005738:	eb45 0303 	adc.w	r3, r5, r3
 800573c:	f04f 0000 	mov.w	r0, #0
 8005740:	f04f 0100 	mov.w	r1, #0
 8005744:	0299      	lsls	r1, r3, #10
 8005746:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800574a:	0290      	lsls	r0, r2, #10
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4610      	mov	r0, r2
 8005752:	4619      	mov	r1, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	461a      	mov	r2, r3
 8005758:	f04f 0300 	mov.w	r3, #0
 800575c:	f7fb faf0 	bl	8000d40 <__aeabi_uldivmod>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4613      	mov	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005768:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	0c1b      	lsrs	r3, r3, #16
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	3301      	adds	r3, #1
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005780:	60bb      	str	r3, [r7, #8]
      break;
 8005782:	e002      	b.n	800578a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005784:	4b05      	ldr	r3, [pc, #20]	; (800579c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005786:	60bb      	str	r3, [r7, #8]
      break;
 8005788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800578a:	68bb      	ldr	r3, [r7, #8]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005796:	bf00      	nop
 8005798:	40023800 	.word	0x40023800
 800579c:	00f42400 	.word	0x00f42400
 80057a0:	007a1200 	.word	0x007a1200

080057a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057a8:	4b03      	ldr	r3, [pc, #12]	; (80057b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057aa:	681b      	ldr	r3, [r3, #0]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	20000048 	.word	0x20000048

080057bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057c0:	f7ff fff0 	bl	80057a4 <HAL_RCC_GetHCLKFreq>
 80057c4:	4602      	mov	r2, r0
 80057c6:	4b05      	ldr	r3, [pc, #20]	; (80057dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	0a9b      	lsrs	r3, r3, #10
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	4903      	ldr	r1, [pc, #12]	; (80057e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057d2:	5ccb      	ldrb	r3, [r1, r3]
 80057d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057d8:	4618      	mov	r0, r3
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	40023800 	.word	0x40023800
 80057e0:	080083b8 	.word	0x080083b8

080057e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057e8:	f7ff ffdc 	bl	80057a4 <HAL_RCC_GetHCLKFreq>
 80057ec:	4602      	mov	r2, r0
 80057ee:	4b05      	ldr	r3, [pc, #20]	; (8005804 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	0b5b      	lsrs	r3, r3, #13
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	4903      	ldr	r1, [pc, #12]	; (8005808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057fa:	5ccb      	ldrb	r3, [r1, r3]
 80057fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005800:	4618      	mov	r0, r3
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40023800 	.word	0x40023800
 8005808:	080083b8 	.word	0x080083b8

0800580c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e041      	b.n	80058a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fd ff3a 	bl	80036ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	3304      	adds	r3, #4
 8005848:	4619      	mov	r1, r3
 800584a:	4610      	mov	r0, r2
 800584c:	f000 fdda 	bl	8006404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d001      	beq.n	80058c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e03c      	b.n	800593e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a1e      	ldr	r2, [pc, #120]	; (800594c <HAL_TIM_Base_Start+0xa0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d018      	beq.n	8005908 <HAL_TIM_Base_Start+0x5c>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058de:	d013      	beq.n	8005908 <HAL_TIM_Base_Start+0x5c>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1a      	ldr	r2, [pc, #104]	; (8005950 <HAL_TIM_Base_Start+0xa4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00e      	beq.n	8005908 <HAL_TIM_Base_Start+0x5c>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a19      	ldr	r2, [pc, #100]	; (8005954 <HAL_TIM_Base_Start+0xa8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d009      	beq.n	8005908 <HAL_TIM_Base_Start+0x5c>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a17      	ldr	r2, [pc, #92]	; (8005958 <HAL_TIM_Base_Start+0xac>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d004      	beq.n	8005908 <HAL_TIM_Base_Start+0x5c>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a16      	ldr	r2, [pc, #88]	; (800595c <HAL_TIM_Base_Start+0xb0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d111      	bne.n	800592c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b06      	cmp	r3, #6
 8005918:	d010      	beq.n	800593c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f042 0201 	orr.w	r2, r2, #1
 8005928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800592a:	e007      	b.n	800593c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0201 	orr.w	r2, r2, #1
 800593a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40010000 	.word	0x40010000
 8005950:	40000400 	.word	0x40000400
 8005954:	40000800 	.word	0x40000800
 8005958:	40000c00 	.word	0x40000c00
 800595c:	40014000 	.word	0x40014000

08005960 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b01      	cmp	r3, #1
 8005972:	d001      	beq.n	8005978 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e044      	b.n	8005a02 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0201 	orr.w	r2, r2, #1
 800598e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a1e      	ldr	r2, [pc, #120]	; (8005a10 <HAL_TIM_Base_Start_IT+0xb0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d018      	beq.n	80059cc <HAL_TIM_Base_Start_IT+0x6c>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a2:	d013      	beq.n	80059cc <HAL_TIM_Base_Start_IT+0x6c>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1a      	ldr	r2, [pc, #104]	; (8005a14 <HAL_TIM_Base_Start_IT+0xb4>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00e      	beq.n	80059cc <HAL_TIM_Base_Start_IT+0x6c>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a19      	ldr	r2, [pc, #100]	; (8005a18 <HAL_TIM_Base_Start_IT+0xb8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d009      	beq.n	80059cc <HAL_TIM_Base_Start_IT+0x6c>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a17      	ldr	r2, [pc, #92]	; (8005a1c <HAL_TIM_Base_Start_IT+0xbc>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d004      	beq.n	80059cc <HAL_TIM_Base_Start_IT+0x6c>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a16      	ldr	r2, [pc, #88]	; (8005a20 <HAL_TIM_Base_Start_IT+0xc0>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d111      	bne.n	80059f0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b06      	cmp	r3, #6
 80059dc:	d010      	beq.n	8005a00 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0201 	orr.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ee:	e007      	b.n	8005a00 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f042 0201 	orr.w	r2, r2, #1
 80059fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40010000 	.word	0x40010000
 8005a14:	40000400 	.word	0x40000400
 8005a18:	40000800 	.word	0x40000800
 8005a1c:	40000c00 	.word	0x40000c00
 8005a20:	40014000 	.word	0x40014000

08005a24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e041      	b.n	8005aba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d106      	bne.n	8005a50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f839 	bl	8005ac2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	4619      	mov	r1, r3
 8005a62:	4610      	mov	r0, r2
 8005a64:	f000 fcce 	bl	8006404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
	...

08005ad8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d109      	bne.n	8005afc <HAL_TIM_PWM_Start+0x24>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	bf14      	ite	ne
 8005af4:	2301      	movne	r3, #1
 8005af6:	2300      	moveq	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	e022      	b.n	8005b42 <HAL_TIM_PWM_Start+0x6a>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d109      	bne.n	8005b16 <HAL_TIM_PWM_Start+0x3e>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	bf14      	ite	ne
 8005b0e:	2301      	movne	r3, #1
 8005b10:	2300      	moveq	r3, #0
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	e015      	b.n	8005b42 <HAL_TIM_PWM_Start+0x6a>
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d109      	bne.n	8005b30 <HAL_TIM_PWM_Start+0x58>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	bf14      	ite	ne
 8005b28:	2301      	movne	r3, #1
 8005b2a:	2300      	moveq	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	e008      	b.n	8005b42 <HAL_TIM_PWM_Start+0x6a>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	bf14      	ite	ne
 8005b3c:	2301      	movne	r3, #1
 8005b3e:	2300      	moveq	r3, #0
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e068      	b.n	8005c1c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d104      	bne.n	8005b5a <HAL_TIM_PWM_Start+0x82>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b58:	e013      	b.n	8005b82 <HAL_TIM_PWM_Start+0xaa>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	d104      	bne.n	8005b6a <HAL_TIM_PWM_Start+0x92>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b68:	e00b      	b.n	8005b82 <HAL_TIM_PWM_Start+0xaa>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d104      	bne.n	8005b7a <HAL_TIM_PWM_Start+0xa2>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b78:	e003      	b.n	8005b82 <HAL_TIM_PWM_Start+0xaa>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2201      	movs	r2, #1
 8005b88:	6839      	ldr	r1, [r7, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fee0 	bl	8006950 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a23      	ldr	r2, [pc, #140]	; (8005c24 <HAL_TIM_PWM_Start+0x14c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d107      	bne.n	8005baa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ba8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1d      	ldr	r2, [pc, #116]	; (8005c24 <HAL_TIM_PWM_Start+0x14c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d018      	beq.n	8005be6 <HAL_TIM_PWM_Start+0x10e>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bbc:	d013      	beq.n	8005be6 <HAL_TIM_PWM_Start+0x10e>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a19      	ldr	r2, [pc, #100]	; (8005c28 <HAL_TIM_PWM_Start+0x150>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d00e      	beq.n	8005be6 <HAL_TIM_PWM_Start+0x10e>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a17      	ldr	r2, [pc, #92]	; (8005c2c <HAL_TIM_PWM_Start+0x154>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d009      	beq.n	8005be6 <HAL_TIM_PWM_Start+0x10e>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a16      	ldr	r2, [pc, #88]	; (8005c30 <HAL_TIM_PWM_Start+0x158>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d004      	beq.n	8005be6 <HAL_TIM_PWM_Start+0x10e>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a14      	ldr	r2, [pc, #80]	; (8005c34 <HAL_TIM_PWM_Start+0x15c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d111      	bne.n	8005c0a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b06      	cmp	r3, #6
 8005bf6:	d010      	beq.n	8005c1a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c08:	e007      	b.n	8005c1a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 0201 	orr.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	40010000 	.word	0x40010000
 8005c28:	40000400 	.word	0x40000400
 8005c2c:	40000800 	.word	0x40000800
 8005c30:	40000c00 	.word	0x40000c00
 8005c34:	40014000 	.word	0x40014000

08005c38 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e097      	b.n	8005d7c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d106      	bne.n	8005c66 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7fd fcdb 	bl	800361c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2202      	movs	r2, #2
 8005c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c7c:	f023 0307 	bic.w	r3, r3, #7
 8005c80:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	f000 fbb9 	bl	8006404 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cba:	f023 0303 	bic.w	r3, r3, #3
 8005cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	021b      	lsls	r3, r3, #8
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005cd8:	f023 030c 	bic.w	r3, r3, #12
 8005cdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ce4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	021b      	lsls	r3, r3, #8
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	011a      	lsls	r2, r3, #4
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	031b      	lsls	r3, r3, #12
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005d16:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005d1e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d94:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d9c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005da4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005dac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d110      	bne.n	8005dd6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d102      	bne.n	8005dc0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dba:	7b7b      	ldrb	r3, [r7, #13]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d001      	beq.n	8005dc4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e069      	b.n	8005e98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dd4:	e031      	b.n	8005e3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d110      	bne.n	8005dfe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ddc:	7bbb      	ldrb	r3, [r7, #14]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d102      	bne.n	8005de8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005de2:	7b3b      	ldrb	r3, [r7, #12]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d001      	beq.n	8005dec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e055      	b.n	8005e98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dfc:	e01d      	b.n	8005e3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d108      	bne.n	8005e16 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e04:	7bbb      	ldrb	r3, [r7, #14]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d105      	bne.n	8005e16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e0a:	7b7b      	ldrb	r3, [r7, #13]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d102      	bne.n	8005e16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e10:	7b3b      	ldrb	r3, [r7, #12]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d001      	beq.n	8005e1a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e03e      	b.n	8005e98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2202      	movs	r2, #2
 8005e26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2202      	movs	r2, #2
 8005e36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_TIM_Encoder_Start+0xc4>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d008      	beq.n	8005e58 <HAL_TIM_Encoder_Start+0xd4>
 8005e46:	e00f      	b.n	8005e68 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	2100      	movs	r1, #0
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 fd7d 	bl	8006950 <TIM_CCxChannelCmd>
      break;
 8005e56:	e016      	b.n	8005e86 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	2104      	movs	r1, #4
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 fd75 	bl	8006950 <TIM_CCxChannelCmd>
      break;
 8005e66:	e00e      	b.n	8005e86 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	2100      	movs	r1, #0
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 fd6d 	bl	8006950 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	2104      	movs	r1, #4
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fd66 	bl	8006950 <TIM_CCxChannelCmd>
      break;
 8005e84:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0201 	orr.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d122      	bne.n	8005efc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d11b      	bne.n	8005efc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0202 	mvn.w	r2, #2
 8005ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fa70 	bl	80063c8 <HAL_TIM_IC_CaptureCallback>
 8005ee8:	e005      	b.n	8005ef6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fa62 	bl	80063b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fa73 	bl	80063dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d122      	bne.n	8005f50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	d11b      	bne.n	8005f50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0204 	mvn.w	r2, #4
 8005f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2202      	movs	r2, #2
 8005f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fa46 	bl	80063c8 <HAL_TIM_IC_CaptureCallback>
 8005f3c:	e005      	b.n	8005f4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fa38 	bl	80063b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fa49 	bl	80063dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d122      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f003 0308 	and.w	r3, r3, #8
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d11b      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0208 	mvn.w	r2, #8
 8005f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2204      	movs	r2, #4
 8005f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fa1c 	bl	80063c8 <HAL_TIM_IC_CaptureCallback>
 8005f90:	e005      	b.n	8005f9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fa0e 	bl	80063b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fa1f 	bl	80063dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f003 0310 	and.w	r3, r3, #16
 8005fae:	2b10      	cmp	r3, #16
 8005fb0:	d122      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f003 0310 	and.w	r3, r3, #16
 8005fbc:	2b10      	cmp	r3, #16
 8005fbe:	d11b      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0210 	mvn.w	r2, #16
 8005fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2208      	movs	r2, #8
 8005fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f9f2 	bl	80063c8 <HAL_TIM_IC_CaptureCallback>
 8005fe4:	e005      	b.n	8005ff2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f9e4 	bl	80063b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f9f5 	bl	80063dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b01      	cmp	r3, #1
 8006004:	d10e      	bne.n	8006024 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b01      	cmp	r3, #1
 8006012:	d107      	bne.n	8006024 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0201 	mvn.w	r2, #1
 800601c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fd fa50 	bl	80034c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602e:	2b80      	cmp	r3, #128	; 0x80
 8006030:	d10e      	bne.n	8006050 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603c:	2b80      	cmp	r3, #128	; 0x80
 800603e:	d107      	bne.n	8006050 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fd1e 	bl	8006a8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605a:	2b40      	cmp	r3, #64	; 0x40
 800605c:	d10e      	bne.n	800607c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006068:	2b40      	cmp	r3, #64	; 0x40
 800606a:	d107      	bne.n	800607c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f9ba 	bl	80063f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f003 0320 	and.w	r3, r3, #32
 8006086:	2b20      	cmp	r3, #32
 8006088:	d10e      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f003 0320 	and.w	r3, r3, #32
 8006094:	2b20      	cmp	r3, #32
 8006096:	d107      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f06f 0220 	mvn.w	r2, #32
 80060a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fce8 	bl	8006a78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060a8:	bf00      	nop
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d101      	bne.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80060c6:	2302      	movs	r3, #2
 80060c8:	e0ac      	b.n	8006224 <HAL_TIM_PWM_ConfigChannel+0x174>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b0c      	cmp	r3, #12
 80060d6:	f200 809f 	bhi.w	8006218 <HAL_TIM_PWM_ConfigChannel+0x168>
 80060da:	a201      	add	r2, pc, #4	; (adr r2, 80060e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80060dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e0:	08006115 	.word	0x08006115
 80060e4:	08006219 	.word	0x08006219
 80060e8:	08006219 	.word	0x08006219
 80060ec:	08006219 	.word	0x08006219
 80060f0:	08006155 	.word	0x08006155
 80060f4:	08006219 	.word	0x08006219
 80060f8:	08006219 	.word	0x08006219
 80060fc:	08006219 	.word	0x08006219
 8006100:	08006197 	.word	0x08006197
 8006104:	08006219 	.word	0x08006219
 8006108:	08006219 	.word	0x08006219
 800610c:	08006219 	.word	0x08006219
 8006110:	080061d7 	.word	0x080061d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	4618      	mov	r0, r3
 800611c:	f000 f9f2 	bl	8006504 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699a      	ldr	r2, [r3, #24]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0208 	orr.w	r2, r2, #8
 800612e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0204 	bic.w	r2, r2, #4
 800613e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6999      	ldr	r1, [r3, #24]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	691a      	ldr	r2, [r3, #16]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	619a      	str	r2, [r3, #24]
      break;
 8006152:	e062      	b.n	800621a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68b9      	ldr	r1, [r7, #8]
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fa38 	bl	80065d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699a      	ldr	r2, [r3, #24]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800616e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699a      	ldr	r2, [r3, #24]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800617e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6999      	ldr	r1, [r3, #24]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	021a      	lsls	r2, r3, #8
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	619a      	str	r2, [r3, #24]
      break;
 8006194:	e041      	b.n	800621a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68b9      	ldr	r1, [r7, #8]
 800619c:	4618      	mov	r0, r3
 800619e:	f000 fa83 	bl	80066a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69da      	ldr	r2, [r3, #28]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f042 0208 	orr.w	r2, r2, #8
 80061b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0204 	bic.w	r2, r2, #4
 80061c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69d9      	ldr	r1, [r3, #28]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	61da      	str	r2, [r3, #28]
      break;
 80061d4:	e021      	b.n	800621a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 facd 	bl	800677c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69da      	ldr	r2, [r3, #28]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69da      	ldr	r2, [r3, #28]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69d9      	ldr	r1, [r3, #28]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	021a      	lsls	r2, r3, #8
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	61da      	str	r2, [r3, #28]
      break;
 8006216:	e000      	b.n	800621a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006218:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800623c:	2b01      	cmp	r3, #1
 800623e:	d101      	bne.n	8006244 <HAL_TIM_ConfigClockSource+0x18>
 8006240:	2302      	movs	r3, #2
 8006242:	e0b3      	b.n	80063ac <HAL_TIM_ConfigClockSource+0x180>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006262:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800626a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800627c:	d03e      	beq.n	80062fc <HAL_TIM_ConfigClockSource+0xd0>
 800627e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006282:	f200 8087 	bhi.w	8006394 <HAL_TIM_ConfigClockSource+0x168>
 8006286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800628a:	f000 8085 	beq.w	8006398 <HAL_TIM_ConfigClockSource+0x16c>
 800628e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006292:	d87f      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x168>
 8006294:	2b70      	cmp	r3, #112	; 0x70
 8006296:	d01a      	beq.n	80062ce <HAL_TIM_ConfigClockSource+0xa2>
 8006298:	2b70      	cmp	r3, #112	; 0x70
 800629a:	d87b      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x168>
 800629c:	2b60      	cmp	r3, #96	; 0x60
 800629e:	d050      	beq.n	8006342 <HAL_TIM_ConfigClockSource+0x116>
 80062a0:	2b60      	cmp	r3, #96	; 0x60
 80062a2:	d877      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x168>
 80062a4:	2b50      	cmp	r3, #80	; 0x50
 80062a6:	d03c      	beq.n	8006322 <HAL_TIM_ConfigClockSource+0xf6>
 80062a8:	2b50      	cmp	r3, #80	; 0x50
 80062aa:	d873      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x168>
 80062ac:	2b40      	cmp	r3, #64	; 0x40
 80062ae:	d058      	beq.n	8006362 <HAL_TIM_ConfigClockSource+0x136>
 80062b0:	2b40      	cmp	r3, #64	; 0x40
 80062b2:	d86f      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x168>
 80062b4:	2b30      	cmp	r3, #48	; 0x30
 80062b6:	d064      	beq.n	8006382 <HAL_TIM_ConfigClockSource+0x156>
 80062b8:	2b30      	cmp	r3, #48	; 0x30
 80062ba:	d86b      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x168>
 80062bc:	2b20      	cmp	r3, #32
 80062be:	d060      	beq.n	8006382 <HAL_TIM_ConfigClockSource+0x156>
 80062c0:	2b20      	cmp	r3, #32
 80062c2:	d867      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x168>
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d05c      	beq.n	8006382 <HAL_TIM_ConfigClockSource+0x156>
 80062c8:	2b10      	cmp	r3, #16
 80062ca:	d05a      	beq.n	8006382 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80062cc:	e062      	b.n	8006394 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6818      	ldr	r0, [r3, #0]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	6899      	ldr	r1, [r3, #8]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	f000 fb17 	bl	8006910 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	609a      	str	r2, [r3, #8]
      break;
 80062fa:	e04e      	b.n	800639a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6818      	ldr	r0, [r3, #0]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	6899      	ldr	r1, [r3, #8]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f000 fb00 	bl	8006910 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689a      	ldr	r2, [r3, #8]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800631e:	609a      	str	r2, [r3, #8]
      break;
 8006320:	e03b      	b.n	800639a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6818      	ldr	r0, [r3, #0]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	6859      	ldr	r1, [r3, #4]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	461a      	mov	r2, r3
 8006330:	f000 fa74 	bl	800681c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2150      	movs	r1, #80	; 0x50
 800633a:	4618      	mov	r0, r3
 800633c:	f000 facd 	bl	80068da <TIM_ITRx_SetConfig>
      break;
 8006340:	e02b      	b.n	800639a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6818      	ldr	r0, [r3, #0]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	6859      	ldr	r1, [r3, #4]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	461a      	mov	r2, r3
 8006350:	f000 fa93 	bl	800687a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2160      	movs	r1, #96	; 0x60
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fabd 	bl	80068da <TIM_ITRx_SetConfig>
      break;
 8006360:	e01b      	b.n	800639a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	6859      	ldr	r1, [r3, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	461a      	mov	r2, r3
 8006370:	f000 fa54 	bl	800681c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2140      	movs	r1, #64	; 0x40
 800637a:	4618      	mov	r0, r3
 800637c:	f000 faad 	bl	80068da <TIM_ITRx_SetConfig>
      break;
 8006380:	e00b      	b.n	800639a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4619      	mov	r1, r3
 800638c:	4610      	mov	r0, r2
 800638e:	f000 faa4 	bl	80068da <TIM_ITRx_SetConfig>
        break;
 8006392:	e002      	b.n	800639a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006394:	bf00      	nop
 8006396:	e000      	b.n	800639a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006398:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a34      	ldr	r2, [pc, #208]	; (80064e8 <TIM_Base_SetConfig+0xe4>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d00f      	beq.n	800643c <TIM_Base_SetConfig+0x38>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006422:	d00b      	beq.n	800643c <TIM_Base_SetConfig+0x38>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a31      	ldr	r2, [pc, #196]	; (80064ec <TIM_Base_SetConfig+0xe8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d007      	beq.n	800643c <TIM_Base_SetConfig+0x38>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a30      	ldr	r2, [pc, #192]	; (80064f0 <TIM_Base_SetConfig+0xec>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d003      	beq.n	800643c <TIM_Base_SetConfig+0x38>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a2f      	ldr	r2, [pc, #188]	; (80064f4 <TIM_Base_SetConfig+0xf0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d108      	bne.n	800644e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	4313      	orrs	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a25      	ldr	r2, [pc, #148]	; (80064e8 <TIM_Base_SetConfig+0xe4>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d01b      	beq.n	800648e <TIM_Base_SetConfig+0x8a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645c:	d017      	beq.n	800648e <TIM_Base_SetConfig+0x8a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a22      	ldr	r2, [pc, #136]	; (80064ec <TIM_Base_SetConfig+0xe8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d013      	beq.n	800648e <TIM_Base_SetConfig+0x8a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a21      	ldr	r2, [pc, #132]	; (80064f0 <TIM_Base_SetConfig+0xec>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00f      	beq.n	800648e <TIM_Base_SetConfig+0x8a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a20      	ldr	r2, [pc, #128]	; (80064f4 <TIM_Base_SetConfig+0xf0>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00b      	beq.n	800648e <TIM_Base_SetConfig+0x8a>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a1f      	ldr	r2, [pc, #124]	; (80064f8 <TIM_Base_SetConfig+0xf4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d007      	beq.n	800648e <TIM_Base_SetConfig+0x8a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a1e      	ldr	r2, [pc, #120]	; (80064fc <TIM_Base_SetConfig+0xf8>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d003      	beq.n	800648e <TIM_Base_SetConfig+0x8a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a1d      	ldr	r2, [pc, #116]	; (8006500 <TIM_Base_SetConfig+0xfc>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d108      	bne.n	80064a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a08      	ldr	r2, [pc, #32]	; (80064e8 <TIM_Base_SetConfig+0xe4>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d103      	bne.n	80064d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	691a      	ldr	r2, [r3, #16]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	615a      	str	r2, [r3, #20]
}
 80064da:	bf00      	nop
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	40010000 	.word	0x40010000
 80064ec:	40000400 	.word	0x40000400
 80064f0:	40000800 	.word	0x40000800
 80064f4:	40000c00 	.word	0x40000c00
 80064f8:	40014000 	.word	0x40014000
 80064fc:	40014400 	.word	0x40014400
 8006500:	40014800 	.word	0x40014800

08006504 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	f023 0201 	bic.w	r2, r3, #1
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 0303 	bic.w	r3, r3, #3
 800653a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f023 0302 	bic.w	r3, r3, #2
 800654c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	4313      	orrs	r3, r2
 8006556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a1c      	ldr	r2, [pc, #112]	; (80065cc <TIM_OC1_SetConfig+0xc8>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d10c      	bne.n	800657a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f023 0308 	bic.w	r3, r3, #8
 8006566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f023 0304 	bic.w	r3, r3, #4
 8006578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a13      	ldr	r2, [pc, #76]	; (80065cc <TIM_OC1_SetConfig+0xc8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d111      	bne.n	80065a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	4313      	orrs	r3, r2
 800659a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	621a      	str	r2, [r3, #32]
}
 80065c0:	bf00      	nop
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	40010000 	.word	0x40010000

080065d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f023 0210 	bic.w	r2, r3, #16
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	021b      	lsls	r3, r3, #8
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4313      	orrs	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f023 0320 	bic.w	r3, r3, #32
 800661a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	011b      	lsls	r3, r3, #4
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	4313      	orrs	r3, r2
 8006626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a1e      	ldr	r2, [pc, #120]	; (80066a4 <TIM_OC2_SetConfig+0xd4>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d10d      	bne.n	800664c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	4313      	orrs	r3, r2
 8006642:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800664a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a15      	ldr	r2, [pc, #84]	; (80066a4 <TIM_OC2_SetConfig+0xd4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d113      	bne.n	800667c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800665a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006662:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	4313      	orrs	r3, r2
 800666e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4313      	orrs	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	621a      	str	r2, [r3, #32]
}
 8006696:	bf00      	nop
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40010000 	.word	0x40010000

080066a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0303 	bic.w	r3, r3, #3
 80066de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	021b      	lsls	r3, r3, #8
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a1d      	ldr	r2, [pc, #116]	; (8006778 <TIM_OC3_SetConfig+0xd0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d10d      	bne.n	8006722 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800670c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	021b      	lsls	r3, r3, #8
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a14      	ldr	r2, [pc, #80]	; (8006778 <TIM_OC3_SetConfig+0xd0>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d113      	bne.n	8006752 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	011b      	lsls	r3, r3, #4
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	621a      	str	r2, [r3, #32]
}
 800676c:	bf00      	nop
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	40010000 	.word	0x40010000

0800677c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	021b      	lsls	r3, r3, #8
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	031b      	lsls	r3, r3, #12
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a10      	ldr	r2, [pc, #64]	; (8006818 <TIM_OC4_SetConfig+0x9c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d109      	bne.n	80067f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	019b      	lsls	r3, r3, #6
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	621a      	str	r2, [r3, #32]
}
 800680a:	bf00      	nop
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	40010000 	.word	0x40010000

0800681c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	f023 0201 	bic.w	r2, r3, #1
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	4313      	orrs	r3, r2
 8006850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f023 030a 	bic.w	r3, r3, #10
 8006858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	4313      	orrs	r3, r2
 8006860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	621a      	str	r2, [r3, #32]
}
 800686e:	bf00      	nop
 8006870:	371c      	adds	r7, #28
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800687a:	b480      	push	{r7}
 800687c:	b087      	sub	sp, #28
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	f023 0210 	bic.w	r2, r3, #16
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	031b      	lsls	r3, r3, #12
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	621a      	str	r2, [r3, #32]
}
 80068ce:	bf00      	nop
 80068d0:	371c      	adds	r7, #28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068da:	b480      	push	{r7}
 80068dc:	b085      	sub	sp, #20
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	f043 0307 	orr.w	r3, r3, #7
 80068fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	609a      	str	r2, [r3, #8]
}
 8006904:	bf00      	nop
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
 800691c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800692a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	021a      	lsls	r2, r3, #8
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	431a      	orrs	r2, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	4313      	orrs	r3, r2
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	4313      	orrs	r3, r2
 800693c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	609a      	str	r2, [r3, #8]
}
 8006944:	bf00      	nop
 8006946:	371c      	adds	r7, #28
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f003 031f 	and.w	r3, r3, #31
 8006962:	2201      	movs	r2, #1
 8006964:	fa02 f303 	lsl.w	r3, r2, r3
 8006968:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6a1a      	ldr	r2, [r3, #32]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	43db      	mvns	r3, r3
 8006972:	401a      	ands	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a1a      	ldr	r2, [r3, #32]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f003 031f 	and.w	r3, r3, #31
 8006982:	6879      	ldr	r1, [r7, #4]
 8006984:	fa01 f303 	lsl.w	r3, r1, r3
 8006988:	431a      	orrs	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	621a      	str	r2, [r3, #32]
}
 800698e:	bf00      	nop
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
	...

0800699c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d101      	bne.n	80069b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069b0:	2302      	movs	r3, #2
 80069b2:	e050      	b.n	8006a56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a1c      	ldr	r2, [pc, #112]	; (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d018      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a00:	d013      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a18      	ldr	r2, [pc, #96]	; (8006a68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00e      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a16      	ldr	r2, [pc, #88]	; (8006a6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d009      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a15      	ldr	r2, [pc, #84]	; (8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d004      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a13      	ldr	r2, [pc, #76]	; (8006a74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d10c      	bne.n	8006a44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	40010000 	.word	0x40010000
 8006a68:	40000400 	.word	0x40000400
 8006a6c:	40000800 	.word	0x40000800
 8006a70:	40000c00 	.word	0x40000c00
 8006a74:	40014000 	.word	0x40014000

08006a78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e03f      	b.n	8006b32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d106      	bne.n	8006acc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7fc fe84 	bl	80037d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2224      	movs	r2, #36	; 0x24
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ae2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fd51 	bl	800758c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	691a      	ldr	r2, [r3, #16]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006af8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	695a      	ldr	r2, [r3, #20]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68da      	ldr	r2, [r3, #12]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	4613      	mov	r3, r2
 8006b48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	d153      	bne.n	8006bfe <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <HAL_UART_Transmit_DMA+0x26>
 8006b5c:	88fb      	ldrh	r3, [r7, #6]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e04c      	b.n	8006c00 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d101      	bne.n	8006b74 <HAL_UART_Transmit_DMA+0x38>
 8006b70:	2302      	movs	r3, #2
 8006b72:	e045      	b.n	8006c00 <HAL_UART_Transmit_DMA+0xc4>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	88fa      	ldrh	r2, [r7, #6]
 8006b86:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	88fa      	ldrh	r2, [r7, #6]
 8006b8c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2221      	movs	r2, #33	; 0x21
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba0:	4a19      	ldr	r2, [pc, #100]	; (8006c08 <HAL_UART_Transmit_DMA+0xcc>)
 8006ba2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba8:	4a18      	ldr	r2, [pc, #96]	; (8006c0c <HAL_UART_Transmit_DMA+0xd0>)
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb0:	4a17      	ldr	r2, [pc, #92]	; (8006c10 <HAL_UART_Transmit_DMA+0xd4>)
 8006bb2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb8:	2200      	movs	r2, #0
 8006bba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006bbc:	f107 0308 	add.w	r3, r7, #8
 8006bc0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	6819      	ldr	r1, [r3, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3304      	adds	r3, #4
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	88fb      	ldrh	r3, [r7, #6]
 8006bd4:	f7fd f9e0 	bl	8003f98 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006be0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	695a      	ldr	r2, [r3, #20]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bf8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	e000      	b.n	8006c00 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8006bfe:	2302      	movs	r3, #2
  }
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3718      	adds	r7, #24
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	08007049 	.word	0x08007049
 8006c0c:	0800709b 	.word	0x0800709b
 8006c10:	08007183 	.word	0x08007183

08006c14 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	d11d      	bne.n	8006c6a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <HAL_UART_Receive_DMA+0x26>
 8006c34:	88fb      	ldrh	r3, [r7, #6]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e016      	b.n	8006c6c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d101      	bne.n	8006c4c <HAL_UART_Receive_DMA+0x38>
 8006c48:	2302      	movs	r3, #2
 8006c4a:	e00f      	b.n	8006c6c <HAL_UART_Receive_DMA+0x58>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8006c5a:	88fb      	ldrh	r3, [r7, #6]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	68b9      	ldr	r1, [r7, #8]
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 fad9 	bl	8007218 <UART_Start_Receive_DMA>
 8006c66:	4603      	mov	r3, r0
 8006c68:	e000      	b.n	8006c6c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006c6a:	2302      	movs	r3, #2
  }
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08a      	sub	sp, #40	; 0x28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	f003 030f 	and.w	r3, r3, #15
 8006ca2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10d      	bne.n	8006cc6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	f003 0320 	and.w	r3, r3, #32
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d008      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x52>
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	f003 0320 	and.w	r3, r3, #32
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fbcd 	bl	800745e <UART_Receive_IT>
      return;
 8006cc4:	e17c      	b.n	8006fc0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 80b1 	beq.w	8006e30 <HAL_UART_IRQHandler+0x1bc>
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d105      	bne.n	8006ce4 <HAL_UART_IRQHandler+0x70>
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 80a6 	beq.w	8006e30 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <HAL_UART_IRQHandler+0x90>
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d005      	beq.n	8006d04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfc:	f043 0201 	orr.w	r2, r3, #1
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	f003 0304 	and.w	r3, r3, #4
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <HAL_UART_IRQHandler+0xb0>
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d005      	beq.n	8006d24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1c:	f043 0202 	orr.w	r2, r3, #2
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <HAL_UART_IRQHandler+0xd0>
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d005      	beq.n	8006d44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3c:	f043 0204 	orr.w	r2, r3, #4
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	f003 0308 	and.w	r3, r3, #8
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00f      	beq.n	8006d6e <HAL_UART_IRQHandler+0xfa>
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	f003 0320 	and.w	r3, r3, #32
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d104      	bne.n	8006d62 <HAL_UART_IRQHandler+0xee>
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d005      	beq.n	8006d6e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	f043 0208 	orr.w	r2, r3, #8
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 811f 	beq.w	8006fb6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d007      	beq.n	8006d92 <HAL_UART_IRQHandler+0x11e>
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fb66 	bl	800745e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d9c:	2b40      	cmp	r3, #64	; 0x40
 8006d9e:	bf0c      	ite	eq
 8006da0:	2301      	moveq	r3, #1
 8006da2:	2300      	movne	r3, #0
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dac:	f003 0308 	and.w	r3, r3, #8
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d102      	bne.n	8006dba <HAL_UART_IRQHandler+0x146>
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d031      	beq.n	8006e1e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 faa6 	bl	800730c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dca:	2b40      	cmp	r3, #64	; 0x40
 8006dcc:	d123      	bne.n	8006e16 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	695a      	ldr	r2, [r3, #20]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ddc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d013      	beq.n	8006e0e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dea:	4a77      	ldr	r2, [pc, #476]	; (8006fc8 <HAL_UART_IRQHandler+0x354>)
 8006dec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fd f998 	bl	8004128 <HAL_DMA_Abort_IT>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d016      	beq.n	8006e2c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e0c:	e00e      	b.n	8006e2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f904 	bl	800701c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e14:	e00a      	b.n	8006e2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f900 	bl	800701c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e1c:	e006      	b.n	8006e2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f8fc 	bl	800701c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006e2a:	e0c4      	b.n	8006fb6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e2c:	bf00      	nop
    return;
 8006e2e:	e0c2      	b.n	8006fb6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	f040 80a2 	bne.w	8006f7e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	f003 0310 	and.w	r3, r3, #16
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 809c 	beq.w	8006f7e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	f003 0310 	and.w	r3, r3, #16
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 8096 	beq.w	8006f7e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e52:	2300      	movs	r3, #0
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	60fb      	str	r3, [r7, #12]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	60fb      	str	r3, [r7, #12]
 8006e66:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e72:	2b40      	cmp	r3, #64	; 0x40
 8006e74:	d14f      	bne.n	8006f16 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006e80:	8a3b      	ldrh	r3, [r7, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 8099 	beq.w	8006fba <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e8c:	8a3a      	ldrh	r2, [r7, #16]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	f080 8093 	bcs.w	8006fba <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	8a3a      	ldrh	r2, [r7, #16]
 8006e98:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ea4:	d02b      	beq.n	8006efe <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68da      	ldr	r2, [r3, #12]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006eb4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	695a      	ldr	r2, [r3, #20]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0201 	bic.w	r2, r2, #1
 8006ec4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	695a      	ldr	r2, [r3, #20]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ed4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 0210 	bic.w	r2, r2, #16
 8006ef2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fd f8a5 	bl	8004048 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f88e 	bl	8007030 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006f14:	e051      	b.n	8006fba <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d047      	beq.n	8006fbe <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006f2e:	8a7b      	ldrh	r3, [r7, #18]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d044      	beq.n	8006fbe <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68da      	ldr	r2, [r3, #12]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f42:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	695a      	ldr	r2, [r3, #20]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 0201 	bic.w	r2, r2, #1
 8006f52:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2220      	movs	r2, #32
 8006f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0210 	bic.w	r2, r2, #16
 8006f70:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f72:	8a7b      	ldrh	r3, [r7, #18]
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f85a 	bl	8007030 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006f7c:	e01f      	b.n	8006fbe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d008      	beq.n	8006f9a <HAL_UART_IRQHandler+0x326>
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f9fb 	bl	800738e <UART_Transmit_IT>
    return;
 8006f98:	e012      	b.n	8006fc0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00d      	beq.n	8006fc0 <HAL_UART_IRQHandler+0x34c>
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d008      	beq.n	8006fc0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fa3d 	bl	800742e <UART_EndTransmit_IT>
    return;
 8006fb4:	e004      	b.n	8006fc0 <HAL_UART_IRQHandler+0x34c>
    return;
 8006fb6:	bf00      	nop
 8006fb8:	e002      	b.n	8006fc0 <HAL_UART_IRQHandler+0x34c>
      return;
 8006fba:	bf00      	nop
 8006fbc:	e000      	b.n	8006fc0 <HAL_UART_IRQHandler+0x34c>
      return;
 8006fbe:	bf00      	nop
  }
}
 8006fc0:	3728      	adds	r7, #40	; 0x28
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	08007367 	.word	0x08007367

08006fcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007054:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007060:	2b00      	cmp	r3, #0
 8007062:	d113      	bne.n	800708c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	695a      	ldr	r2, [r3, #20]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007078:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007088:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800708a:	e002      	b.n	8007092 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f7ff ff9d 	bl	8006fcc <HAL_UART_TxCpltCallback>
}
 8007092:	bf00      	nop
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b084      	sub	sp, #16
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f7ff ff99 	bl	8006fe0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ae:	bf00      	nop
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b084      	sub	sp, #16
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d12a      	bne.n	8007128 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070e6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	695a      	ldr	r2, [r3, #20]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0201 	bic.w	r2, r2, #1
 80070f6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	695a      	ldr	r2, [r3, #20]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007106:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2220      	movs	r2, #32
 800710c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007114:	2b01      	cmp	r3, #1
 8007116:	d107      	bne.n	8007128 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f022 0210 	bic.w	r2, r2, #16
 8007126:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712c:	2b01      	cmp	r3, #1
 800712e:	d106      	bne.n	800713e <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007134:	4619      	mov	r1, r3
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f7ff ff7a 	bl	8007030 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800713c:	e002      	b.n	8007144 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f7ff ff58 	bl	8006ff4 <HAL_UART_RxCpltCallback>
}
 8007144:	bf00      	nop
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007158:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715e:	2b01      	cmp	r3, #1
 8007160:	d108      	bne.n	8007174 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007166:	085b      	lsrs	r3, r3, #1
 8007168:	b29b      	uxth	r3, r3
 800716a:	4619      	mov	r1, r3
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f7ff ff5f 	bl	8007030 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007172:	e002      	b.n	800717a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f7ff ff47 	bl	8007008 <HAL_UART_RxHalfCpltCallback>
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007192:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800719e:	2b80      	cmp	r3, #128	; 0x80
 80071a0:	bf0c      	ite	eq
 80071a2:	2301      	moveq	r3, #1
 80071a4:	2300      	movne	r3, #0
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b21      	cmp	r3, #33	; 0x21
 80071b4:	d108      	bne.n	80071c8 <UART_DMAError+0x46>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d005      	beq.n	80071c8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2200      	movs	r2, #0
 80071c0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80071c2:	68b8      	ldr	r0, [r7, #8]
 80071c4:	f000 f88c 	bl	80072e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d2:	2b40      	cmp	r3, #64	; 0x40
 80071d4:	bf0c      	ite	eq
 80071d6:	2301      	moveq	r3, #1
 80071d8:	2300      	movne	r3, #0
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b22      	cmp	r3, #34	; 0x22
 80071e8:	d108      	bne.n	80071fc <UART_DMAError+0x7a>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d005      	beq.n	80071fc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2200      	movs	r2, #0
 80071f4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80071f6:	68b8      	ldr	r0, [r7, #8]
 80071f8:	f000 f888 	bl	800730c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007200:	f043 0210 	orr.w	r2, r3, #16
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007208:	68b8      	ldr	r0, [r7, #8]
 800720a:	f7ff ff07 	bl	800701c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800720e:	bf00      	nop
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	4613      	mov	r3, r2
 8007224:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	88fa      	ldrh	r2, [r7, #6]
 8007230:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2222      	movs	r2, #34	; 0x22
 800723c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007244:	4a23      	ldr	r2, [pc, #140]	; (80072d4 <UART_Start_Receive_DMA+0xbc>)
 8007246:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724c:	4a22      	ldr	r2, [pc, #136]	; (80072d8 <UART_Start_Receive_DMA+0xc0>)
 800724e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007254:	4a21      	ldr	r2, [pc, #132]	; (80072dc <UART_Start_Receive_DMA+0xc4>)
 8007256:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725c:	2200      	movs	r2, #0
 800725e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007260:	f107 0308 	add.w	r3, r7, #8
 8007264:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3304      	adds	r3, #4
 8007270:	4619      	mov	r1, r3
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	88fb      	ldrh	r3, [r7, #6]
 8007278:	f7fc fe8e 	bl	8003f98 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800727c:	2300      	movs	r3, #0
 800727e:	613b      	str	r3, [r7, #16]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	613b      	str	r3, [r7, #16]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	613b      	str	r3, [r7, #16]
 8007290:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68da      	ldr	r2, [r3, #12]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072a8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	695a      	ldr	r2, [r3, #20]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f042 0201 	orr.w	r2, r2, #1
 80072b8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	695a      	ldr	r2, [r3, #20]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072c8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	080070b7 	.word	0x080070b7
 80072d8:	0800714d 	.word	0x0800714d
 80072dc:	08007183 	.word	0x08007183

080072e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80072f6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2220      	movs	r2, #32
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007322:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	695a      	ldr	r2, [r3, #20]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 0201 	bic.w	r2, r2, #1
 8007332:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007338:	2b01      	cmp	r3, #1
 800733a:	d107      	bne.n	800734c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f022 0210 	bic.w	r2, r2, #16
 800734a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2220      	movs	r2, #32
 8007350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	631a      	str	r2, [r3, #48]	; 0x30
}
 800735a:	bf00      	nop
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007372:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f7ff fe4b 	bl	800701c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007386:	bf00      	nop
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800738e:	b480      	push	{r7}
 8007390:	b085      	sub	sp, #20
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b21      	cmp	r3, #33	; 0x21
 80073a0:	d13e      	bne.n	8007420 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073aa:	d114      	bne.n	80073d6 <UART_Transmit_IT+0x48>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d110      	bne.n	80073d6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	461a      	mov	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	1c9a      	adds	r2, r3, #2
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	621a      	str	r2, [r3, #32]
 80073d4:	e008      	b.n	80073e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	1c59      	adds	r1, r3, #1
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	6211      	str	r1, [r2, #32]
 80073e0:	781a      	ldrb	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	3b01      	subs	r3, #1
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	4619      	mov	r1, r3
 80073f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10f      	bne.n	800741c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800740a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800741a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	e000      	b.n	8007422 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007420:	2302      	movs	r3, #2
  }
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b082      	sub	sp, #8
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68da      	ldr	r2, [r3, #12]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007444:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2220      	movs	r2, #32
 800744a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7ff fdbc 	bl	8006fcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b22      	cmp	r3, #34	; 0x22
 8007470:	f040 8087 	bne.w	8007582 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800747c:	d117      	bne.n	80074ae <UART_Receive_IT+0x50>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d113      	bne.n	80074ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007486:	2300      	movs	r3, #0
 8007488:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	b29b      	uxth	r3, r3
 8007498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749c:	b29a      	uxth	r2, r3
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a6:	1c9a      	adds	r2, r3, #2
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	629a      	str	r2, [r3, #40]	; 0x28
 80074ac:	e026      	b.n	80074fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074c0:	d007      	beq.n	80074d2 <UART_Receive_IT+0x74>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10a      	bne.n	80074e0 <UART_Receive_IT+0x82>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d106      	bne.n	80074e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	701a      	strb	r2, [r3, #0]
 80074de:	e008      	b.n	80074f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f6:	1c5a      	adds	r2, r3, #1
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007500:	b29b      	uxth	r3, r3
 8007502:	3b01      	subs	r3, #1
 8007504:	b29b      	uxth	r3, r3
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	4619      	mov	r1, r3
 800750a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800750c:	2b00      	cmp	r3, #0
 800750e:	d136      	bne.n	800757e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f022 0220 	bic.w	r2, r2, #32
 800751e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68da      	ldr	r2, [r3, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800752e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	695a      	ldr	r2, [r3, #20]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f022 0201 	bic.w	r2, r2, #1
 800753e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2220      	movs	r2, #32
 8007544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754c:	2b01      	cmp	r3, #1
 800754e:	d10e      	bne.n	800756e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0210 	bic.w	r2, r2, #16
 800755e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007564:	4619      	mov	r1, r3
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff fd62 	bl	8007030 <HAL_UARTEx_RxEventCallback>
 800756c:	e002      	b.n	8007574 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff fd40 	bl	8006ff4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800757a:	2300      	movs	r3, #0
 800757c:	e002      	b.n	8007584 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	e000      	b.n	8007584 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007582:	2302      	movs	r3, #2
  }
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800758c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007590:	b09f      	sub	sp, #124	; 0x7c
 8007592:	af00      	add	r7, sp, #0
 8007594:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80075a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a2:	68d9      	ldr	r1, [r3, #12]
 80075a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	ea40 0301 	orr.w	r3, r0, r1
 80075ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b0:	689a      	ldr	r2, [r3, #8]
 80075b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	431a      	orrs	r2, r3
 80075b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	431a      	orrs	r2, r3
 80075be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80075c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80075d0:	f021 010c 	bic.w	r1, r1, #12
 80075d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075da:	430b      	orrs	r3, r1
 80075dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80075e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ea:	6999      	ldr	r1, [r3, #24]
 80075ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	ea40 0301 	orr.w	r3, r0, r1
 80075f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	4bc5      	ldr	r3, [pc, #788]	; (8007910 <UART_SetConfig+0x384>)
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d004      	beq.n	800760a <UART_SetConfig+0x7e>
 8007600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	4bc3      	ldr	r3, [pc, #780]	; (8007914 <UART_SetConfig+0x388>)
 8007606:	429a      	cmp	r2, r3
 8007608:	d103      	bne.n	8007612 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800760a:	f7fe f8eb 	bl	80057e4 <HAL_RCC_GetPCLK2Freq>
 800760e:	6778      	str	r0, [r7, #116]	; 0x74
 8007610:	e002      	b.n	8007618 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007612:	f7fe f8d3 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8007616:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007620:	f040 80b6 	bne.w	8007790 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007626:	461c      	mov	r4, r3
 8007628:	f04f 0500 	mov.w	r5, #0
 800762c:	4622      	mov	r2, r4
 800762e:	462b      	mov	r3, r5
 8007630:	1891      	adds	r1, r2, r2
 8007632:	6439      	str	r1, [r7, #64]	; 0x40
 8007634:	415b      	adcs	r3, r3
 8007636:	647b      	str	r3, [r7, #68]	; 0x44
 8007638:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800763c:	1912      	adds	r2, r2, r4
 800763e:	eb45 0303 	adc.w	r3, r5, r3
 8007642:	f04f 0000 	mov.w	r0, #0
 8007646:	f04f 0100 	mov.w	r1, #0
 800764a:	00d9      	lsls	r1, r3, #3
 800764c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007650:	00d0      	lsls	r0, r2, #3
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	1911      	adds	r1, r2, r4
 8007658:	6639      	str	r1, [r7, #96]	; 0x60
 800765a:	416b      	adcs	r3, r5
 800765c:	667b      	str	r3, [r7, #100]	; 0x64
 800765e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	461a      	mov	r2, r3
 8007664:	f04f 0300 	mov.w	r3, #0
 8007668:	1891      	adds	r1, r2, r2
 800766a:	63b9      	str	r1, [r7, #56]	; 0x38
 800766c:	415b      	adcs	r3, r3
 800766e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007670:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007674:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007678:	f7f9 fb62 	bl	8000d40 <__aeabi_uldivmod>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	4ba5      	ldr	r3, [pc, #660]	; (8007918 <UART_SetConfig+0x38c>)
 8007682:	fba3 2302 	umull	r2, r3, r3, r2
 8007686:	095b      	lsrs	r3, r3, #5
 8007688:	011e      	lsls	r6, r3, #4
 800768a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800768c:	461c      	mov	r4, r3
 800768e:	f04f 0500 	mov.w	r5, #0
 8007692:	4622      	mov	r2, r4
 8007694:	462b      	mov	r3, r5
 8007696:	1891      	adds	r1, r2, r2
 8007698:	6339      	str	r1, [r7, #48]	; 0x30
 800769a:	415b      	adcs	r3, r3
 800769c:	637b      	str	r3, [r7, #52]	; 0x34
 800769e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80076a2:	1912      	adds	r2, r2, r4
 80076a4:	eb45 0303 	adc.w	r3, r5, r3
 80076a8:	f04f 0000 	mov.w	r0, #0
 80076ac:	f04f 0100 	mov.w	r1, #0
 80076b0:	00d9      	lsls	r1, r3, #3
 80076b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80076b6:	00d0      	lsls	r0, r2, #3
 80076b8:	4602      	mov	r2, r0
 80076ba:	460b      	mov	r3, r1
 80076bc:	1911      	adds	r1, r2, r4
 80076be:	65b9      	str	r1, [r7, #88]	; 0x58
 80076c0:	416b      	adcs	r3, r5
 80076c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	461a      	mov	r2, r3
 80076ca:	f04f 0300 	mov.w	r3, #0
 80076ce:	1891      	adds	r1, r2, r2
 80076d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80076d2:	415b      	adcs	r3, r3
 80076d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80076da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80076de:	f7f9 fb2f 	bl	8000d40 <__aeabi_uldivmod>
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	4b8c      	ldr	r3, [pc, #560]	; (8007918 <UART_SetConfig+0x38c>)
 80076e8:	fba3 1302 	umull	r1, r3, r3, r2
 80076ec:	095b      	lsrs	r3, r3, #5
 80076ee:	2164      	movs	r1, #100	; 0x64
 80076f0:	fb01 f303 	mul.w	r3, r1, r3
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	3332      	adds	r3, #50	; 0x32
 80076fa:	4a87      	ldr	r2, [pc, #540]	; (8007918 <UART_SetConfig+0x38c>)
 80076fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007700:	095b      	lsrs	r3, r3, #5
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007708:	441e      	add	r6, r3
 800770a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800770c:	4618      	mov	r0, r3
 800770e:	f04f 0100 	mov.w	r1, #0
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	1894      	adds	r4, r2, r2
 8007718:	623c      	str	r4, [r7, #32]
 800771a:	415b      	adcs	r3, r3
 800771c:	627b      	str	r3, [r7, #36]	; 0x24
 800771e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007722:	1812      	adds	r2, r2, r0
 8007724:	eb41 0303 	adc.w	r3, r1, r3
 8007728:	f04f 0400 	mov.w	r4, #0
 800772c:	f04f 0500 	mov.w	r5, #0
 8007730:	00dd      	lsls	r5, r3, #3
 8007732:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007736:	00d4      	lsls	r4, r2, #3
 8007738:	4622      	mov	r2, r4
 800773a:	462b      	mov	r3, r5
 800773c:	1814      	adds	r4, r2, r0
 800773e:	653c      	str	r4, [r7, #80]	; 0x50
 8007740:	414b      	adcs	r3, r1
 8007742:	657b      	str	r3, [r7, #84]	; 0x54
 8007744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	461a      	mov	r2, r3
 800774a:	f04f 0300 	mov.w	r3, #0
 800774e:	1891      	adds	r1, r2, r2
 8007750:	61b9      	str	r1, [r7, #24]
 8007752:	415b      	adcs	r3, r3
 8007754:	61fb      	str	r3, [r7, #28]
 8007756:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800775a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800775e:	f7f9 faef 	bl	8000d40 <__aeabi_uldivmod>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	4b6c      	ldr	r3, [pc, #432]	; (8007918 <UART_SetConfig+0x38c>)
 8007768:	fba3 1302 	umull	r1, r3, r3, r2
 800776c:	095b      	lsrs	r3, r3, #5
 800776e:	2164      	movs	r1, #100	; 0x64
 8007770:	fb01 f303 	mul.w	r3, r1, r3
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	3332      	adds	r3, #50	; 0x32
 800777a:	4a67      	ldr	r2, [pc, #412]	; (8007918 <UART_SetConfig+0x38c>)
 800777c:	fba2 2303 	umull	r2, r3, r2, r3
 8007780:	095b      	lsrs	r3, r3, #5
 8007782:	f003 0207 	and.w	r2, r3, #7
 8007786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4432      	add	r2, r6
 800778c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800778e:	e0b9      	b.n	8007904 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007792:	461c      	mov	r4, r3
 8007794:	f04f 0500 	mov.w	r5, #0
 8007798:	4622      	mov	r2, r4
 800779a:	462b      	mov	r3, r5
 800779c:	1891      	adds	r1, r2, r2
 800779e:	6139      	str	r1, [r7, #16]
 80077a0:	415b      	adcs	r3, r3
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80077a8:	1912      	adds	r2, r2, r4
 80077aa:	eb45 0303 	adc.w	r3, r5, r3
 80077ae:	f04f 0000 	mov.w	r0, #0
 80077b2:	f04f 0100 	mov.w	r1, #0
 80077b6:	00d9      	lsls	r1, r3, #3
 80077b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077bc:	00d0      	lsls	r0, r2, #3
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	eb12 0804 	adds.w	r8, r2, r4
 80077c6:	eb43 0905 	adc.w	r9, r3, r5
 80077ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f04f 0100 	mov.w	r1, #0
 80077d4:	f04f 0200 	mov.w	r2, #0
 80077d8:	f04f 0300 	mov.w	r3, #0
 80077dc:	008b      	lsls	r3, r1, #2
 80077de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80077e2:	0082      	lsls	r2, r0, #2
 80077e4:	4640      	mov	r0, r8
 80077e6:	4649      	mov	r1, r9
 80077e8:	f7f9 faaa 	bl	8000d40 <__aeabi_uldivmod>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4b49      	ldr	r3, [pc, #292]	; (8007918 <UART_SetConfig+0x38c>)
 80077f2:	fba3 2302 	umull	r2, r3, r3, r2
 80077f6:	095b      	lsrs	r3, r3, #5
 80077f8:	011e      	lsls	r6, r3, #4
 80077fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077fc:	4618      	mov	r0, r3
 80077fe:	f04f 0100 	mov.w	r1, #0
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	1894      	adds	r4, r2, r2
 8007808:	60bc      	str	r4, [r7, #8]
 800780a:	415b      	adcs	r3, r3
 800780c:	60fb      	str	r3, [r7, #12]
 800780e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007812:	1812      	adds	r2, r2, r0
 8007814:	eb41 0303 	adc.w	r3, r1, r3
 8007818:	f04f 0400 	mov.w	r4, #0
 800781c:	f04f 0500 	mov.w	r5, #0
 8007820:	00dd      	lsls	r5, r3, #3
 8007822:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007826:	00d4      	lsls	r4, r2, #3
 8007828:	4622      	mov	r2, r4
 800782a:	462b      	mov	r3, r5
 800782c:	1814      	adds	r4, r2, r0
 800782e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007830:	414b      	adcs	r3, r1
 8007832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	4618      	mov	r0, r3
 800783a:	f04f 0100 	mov.w	r1, #0
 800783e:	f04f 0200 	mov.w	r2, #0
 8007842:	f04f 0300 	mov.w	r3, #0
 8007846:	008b      	lsls	r3, r1, #2
 8007848:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800784c:	0082      	lsls	r2, r0, #2
 800784e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007852:	f7f9 fa75 	bl	8000d40 <__aeabi_uldivmod>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	4b2f      	ldr	r3, [pc, #188]	; (8007918 <UART_SetConfig+0x38c>)
 800785c:	fba3 1302 	umull	r1, r3, r3, r2
 8007860:	095b      	lsrs	r3, r3, #5
 8007862:	2164      	movs	r1, #100	; 0x64
 8007864:	fb01 f303 	mul.w	r3, r1, r3
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	011b      	lsls	r3, r3, #4
 800786c:	3332      	adds	r3, #50	; 0x32
 800786e:	4a2a      	ldr	r2, [pc, #168]	; (8007918 <UART_SetConfig+0x38c>)
 8007870:	fba2 2303 	umull	r2, r3, r2, r3
 8007874:	095b      	lsrs	r3, r3, #5
 8007876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800787a:	441e      	add	r6, r3
 800787c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800787e:	4618      	mov	r0, r3
 8007880:	f04f 0100 	mov.w	r1, #0
 8007884:	4602      	mov	r2, r0
 8007886:	460b      	mov	r3, r1
 8007888:	1894      	adds	r4, r2, r2
 800788a:	603c      	str	r4, [r7, #0]
 800788c:	415b      	adcs	r3, r3
 800788e:	607b      	str	r3, [r7, #4]
 8007890:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007894:	1812      	adds	r2, r2, r0
 8007896:	eb41 0303 	adc.w	r3, r1, r3
 800789a:	f04f 0400 	mov.w	r4, #0
 800789e:	f04f 0500 	mov.w	r5, #0
 80078a2:	00dd      	lsls	r5, r3, #3
 80078a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80078a8:	00d4      	lsls	r4, r2, #3
 80078aa:	4622      	mov	r2, r4
 80078ac:	462b      	mov	r3, r5
 80078ae:	eb12 0a00 	adds.w	sl, r2, r0
 80078b2:	eb43 0b01 	adc.w	fp, r3, r1
 80078b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f04f 0100 	mov.w	r1, #0
 80078c0:	f04f 0200 	mov.w	r2, #0
 80078c4:	f04f 0300 	mov.w	r3, #0
 80078c8:	008b      	lsls	r3, r1, #2
 80078ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80078ce:	0082      	lsls	r2, r0, #2
 80078d0:	4650      	mov	r0, sl
 80078d2:	4659      	mov	r1, fp
 80078d4:	f7f9 fa34 	bl	8000d40 <__aeabi_uldivmod>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4b0e      	ldr	r3, [pc, #56]	; (8007918 <UART_SetConfig+0x38c>)
 80078de:	fba3 1302 	umull	r1, r3, r3, r2
 80078e2:	095b      	lsrs	r3, r3, #5
 80078e4:	2164      	movs	r1, #100	; 0x64
 80078e6:	fb01 f303 	mul.w	r3, r1, r3
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	011b      	lsls	r3, r3, #4
 80078ee:	3332      	adds	r3, #50	; 0x32
 80078f0:	4a09      	ldr	r2, [pc, #36]	; (8007918 <UART_SetConfig+0x38c>)
 80078f2:	fba2 2303 	umull	r2, r3, r2, r3
 80078f6:	095b      	lsrs	r3, r3, #5
 80078f8:	f003 020f 	and.w	r2, r3, #15
 80078fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4432      	add	r2, r6
 8007902:	609a      	str	r2, [r3, #8]
}
 8007904:	bf00      	nop
 8007906:	377c      	adds	r7, #124	; 0x7c
 8007908:	46bd      	mov	sp, r7
 800790a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790e:	bf00      	nop
 8007910:	40011000 	.word	0x40011000
 8007914:	40011400 	.word	0x40011400
 8007918:	51eb851f 	.word	0x51eb851f

0800791c <calloc>:
 800791c:	4b02      	ldr	r3, [pc, #8]	; (8007928 <calloc+0xc>)
 800791e:	460a      	mov	r2, r1
 8007920:	4601      	mov	r1, r0
 8007922:	6818      	ldr	r0, [r3, #0]
 8007924:	f000 b842 	b.w	80079ac <_calloc_r>
 8007928:	20000054 	.word	0x20000054

0800792c <__errno>:
 800792c:	4b01      	ldr	r3, [pc, #4]	; (8007934 <__errno+0x8>)
 800792e:	6818      	ldr	r0, [r3, #0]
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	20000054 	.word	0x20000054

08007938 <__libc_init_array>:
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	4d0d      	ldr	r5, [pc, #52]	; (8007970 <__libc_init_array+0x38>)
 800793c:	4c0d      	ldr	r4, [pc, #52]	; (8007974 <__libc_init_array+0x3c>)
 800793e:	1b64      	subs	r4, r4, r5
 8007940:	10a4      	asrs	r4, r4, #2
 8007942:	2600      	movs	r6, #0
 8007944:	42a6      	cmp	r6, r4
 8007946:	d109      	bne.n	800795c <__libc_init_array+0x24>
 8007948:	4d0b      	ldr	r5, [pc, #44]	; (8007978 <__libc_init_array+0x40>)
 800794a:	4c0c      	ldr	r4, [pc, #48]	; (800797c <__libc_init_array+0x44>)
 800794c:	f000 fd20 	bl	8008390 <_init>
 8007950:	1b64      	subs	r4, r4, r5
 8007952:	10a4      	asrs	r4, r4, #2
 8007954:	2600      	movs	r6, #0
 8007956:	42a6      	cmp	r6, r4
 8007958:	d105      	bne.n	8007966 <__libc_init_array+0x2e>
 800795a:	bd70      	pop	{r4, r5, r6, pc}
 800795c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007960:	4798      	blx	r3
 8007962:	3601      	adds	r6, #1
 8007964:	e7ee      	b.n	8007944 <__libc_init_array+0xc>
 8007966:	f855 3b04 	ldr.w	r3, [r5], #4
 800796a:	4798      	blx	r3
 800796c:	3601      	adds	r6, #1
 800796e:	e7f2      	b.n	8007956 <__libc_init_array+0x1e>
 8007970:	080083f4 	.word	0x080083f4
 8007974:	080083f4 	.word	0x080083f4
 8007978:	080083f4 	.word	0x080083f4
 800797c:	080083f8 	.word	0x080083f8

08007980 <memcpy>:
 8007980:	440a      	add	r2, r1
 8007982:	4291      	cmp	r1, r2
 8007984:	f100 33ff 	add.w	r3, r0, #4294967295
 8007988:	d100      	bne.n	800798c <memcpy+0xc>
 800798a:	4770      	bx	lr
 800798c:	b510      	push	{r4, lr}
 800798e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007992:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007996:	4291      	cmp	r1, r2
 8007998:	d1f9      	bne.n	800798e <memcpy+0xe>
 800799a:	bd10      	pop	{r4, pc}

0800799c <memset>:
 800799c:	4402      	add	r2, r0
 800799e:	4603      	mov	r3, r0
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d100      	bne.n	80079a6 <memset+0xa>
 80079a4:	4770      	bx	lr
 80079a6:	f803 1b01 	strb.w	r1, [r3], #1
 80079aa:	e7f9      	b.n	80079a0 <memset+0x4>

080079ac <_calloc_r>:
 80079ac:	b513      	push	{r0, r1, r4, lr}
 80079ae:	434a      	muls	r2, r1
 80079b0:	4611      	mov	r1, r2
 80079b2:	9201      	str	r2, [sp, #4]
 80079b4:	f000 f80a 	bl	80079cc <_malloc_r>
 80079b8:	4604      	mov	r4, r0
 80079ba:	b118      	cbz	r0, 80079c4 <_calloc_r+0x18>
 80079bc:	9a01      	ldr	r2, [sp, #4]
 80079be:	2100      	movs	r1, #0
 80079c0:	f7ff ffec 	bl	800799c <memset>
 80079c4:	4620      	mov	r0, r4
 80079c6:	b002      	add	sp, #8
 80079c8:	bd10      	pop	{r4, pc}
	...

080079cc <_malloc_r>:
 80079cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ce:	1ccd      	adds	r5, r1, #3
 80079d0:	f025 0503 	bic.w	r5, r5, #3
 80079d4:	3508      	adds	r5, #8
 80079d6:	2d0c      	cmp	r5, #12
 80079d8:	bf38      	it	cc
 80079da:	250c      	movcc	r5, #12
 80079dc:	2d00      	cmp	r5, #0
 80079de:	4606      	mov	r6, r0
 80079e0:	db01      	blt.n	80079e6 <_malloc_r+0x1a>
 80079e2:	42a9      	cmp	r1, r5
 80079e4:	d903      	bls.n	80079ee <_malloc_r+0x22>
 80079e6:	230c      	movs	r3, #12
 80079e8:	6033      	str	r3, [r6, #0]
 80079ea:	2000      	movs	r0, #0
 80079ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079ee:	f000 f857 	bl	8007aa0 <__malloc_lock>
 80079f2:	4921      	ldr	r1, [pc, #132]	; (8007a78 <_malloc_r+0xac>)
 80079f4:	680a      	ldr	r2, [r1, #0]
 80079f6:	4614      	mov	r4, r2
 80079f8:	b99c      	cbnz	r4, 8007a22 <_malloc_r+0x56>
 80079fa:	4f20      	ldr	r7, [pc, #128]	; (8007a7c <_malloc_r+0xb0>)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	b923      	cbnz	r3, 8007a0a <_malloc_r+0x3e>
 8007a00:	4621      	mov	r1, r4
 8007a02:	4630      	mov	r0, r6
 8007a04:	f000 f83c 	bl	8007a80 <_sbrk_r>
 8007a08:	6038      	str	r0, [r7, #0]
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f000 f837 	bl	8007a80 <_sbrk_r>
 8007a12:	1c43      	adds	r3, r0, #1
 8007a14:	d123      	bne.n	8007a5e <_malloc_r+0x92>
 8007a16:	230c      	movs	r3, #12
 8007a18:	6033      	str	r3, [r6, #0]
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	f000 f846 	bl	8007aac <__malloc_unlock>
 8007a20:	e7e3      	b.n	80079ea <_malloc_r+0x1e>
 8007a22:	6823      	ldr	r3, [r4, #0]
 8007a24:	1b5b      	subs	r3, r3, r5
 8007a26:	d417      	bmi.n	8007a58 <_malloc_r+0x8c>
 8007a28:	2b0b      	cmp	r3, #11
 8007a2a:	d903      	bls.n	8007a34 <_malloc_r+0x68>
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	441c      	add	r4, r3
 8007a30:	6025      	str	r5, [r4, #0]
 8007a32:	e004      	b.n	8007a3e <_malloc_r+0x72>
 8007a34:	6863      	ldr	r3, [r4, #4]
 8007a36:	42a2      	cmp	r2, r4
 8007a38:	bf0c      	ite	eq
 8007a3a:	600b      	streq	r3, [r1, #0]
 8007a3c:	6053      	strne	r3, [r2, #4]
 8007a3e:	4630      	mov	r0, r6
 8007a40:	f000 f834 	bl	8007aac <__malloc_unlock>
 8007a44:	f104 000b 	add.w	r0, r4, #11
 8007a48:	1d23      	adds	r3, r4, #4
 8007a4a:	f020 0007 	bic.w	r0, r0, #7
 8007a4e:	1ac2      	subs	r2, r0, r3
 8007a50:	d0cc      	beq.n	80079ec <_malloc_r+0x20>
 8007a52:	1a1b      	subs	r3, r3, r0
 8007a54:	50a3      	str	r3, [r4, r2]
 8007a56:	e7c9      	b.n	80079ec <_malloc_r+0x20>
 8007a58:	4622      	mov	r2, r4
 8007a5a:	6864      	ldr	r4, [r4, #4]
 8007a5c:	e7cc      	b.n	80079f8 <_malloc_r+0x2c>
 8007a5e:	1cc4      	adds	r4, r0, #3
 8007a60:	f024 0403 	bic.w	r4, r4, #3
 8007a64:	42a0      	cmp	r0, r4
 8007a66:	d0e3      	beq.n	8007a30 <_malloc_r+0x64>
 8007a68:	1a21      	subs	r1, r4, r0
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	f000 f808 	bl	8007a80 <_sbrk_r>
 8007a70:	3001      	adds	r0, #1
 8007a72:	d1dd      	bne.n	8007a30 <_malloc_r+0x64>
 8007a74:	e7cf      	b.n	8007a16 <_malloc_r+0x4a>
 8007a76:	bf00      	nop
 8007a78:	20000230 	.word	0x20000230
 8007a7c:	20000234 	.word	0x20000234

08007a80 <_sbrk_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	4d06      	ldr	r5, [pc, #24]	; (8007a9c <_sbrk_r+0x1c>)
 8007a84:	2300      	movs	r3, #0
 8007a86:	4604      	mov	r4, r0
 8007a88:	4608      	mov	r0, r1
 8007a8a:	602b      	str	r3, [r5, #0]
 8007a8c:	f7fb ffbc 	bl	8003a08 <_sbrk>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	d102      	bne.n	8007a9a <_sbrk_r+0x1a>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	b103      	cbz	r3, 8007a9a <_sbrk_r+0x1a>
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}
 8007a9c:	200004c8 	.word	0x200004c8

08007aa0 <__malloc_lock>:
 8007aa0:	4801      	ldr	r0, [pc, #4]	; (8007aa8 <__malloc_lock+0x8>)
 8007aa2:	f000 b809 	b.w	8007ab8 <__retarget_lock_acquire_recursive>
 8007aa6:	bf00      	nop
 8007aa8:	200004d0 	.word	0x200004d0

08007aac <__malloc_unlock>:
 8007aac:	4801      	ldr	r0, [pc, #4]	; (8007ab4 <__malloc_unlock+0x8>)
 8007aae:	f000 b804 	b.w	8007aba <__retarget_lock_release_recursive>
 8007ab2:	bf00      	nop
 8007ab4:	200004d0 	.word	0x200004d0

08007ab8 <__retarget_lock_acquire_recursive>:
 8007ab8:	4770      	bx	lr

08007aba <__retarget_lock_release_recursive>:
 8007aba:	4770      	bx	lr

08007abc <powf>:
 8007abc:	b508      	push	{r3, lr}
 8007abe:	ed2d 8b04 	vpush	{d8-d9}
 8007ac2:	eeb0 9a40 	vmov.f32	s18, s0
 8007ac6:	eef0 8a60 	vmov.f32	s17, s1
 8007aca:	f000 f8b5 	bl	8007c38 <__ieee754_powf>
 8007ace:	4b43      	ldr	r3, [pc, #268]	; (8007bdc <powf+0x120>)
 8007ad0:	f993 3000 	ldrsb.w	r3, [r3]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	eeb0 8a40 	vmov.f32	s16, s0
 8007ada:	d012      	beq.n	8007b02 <powf+0x46>
 8007adc:	eef4 8a68 	vcmp.f32	s17, s17
 8007ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae4:	d60d      	bvs.n	8007b02 <powf+0x46>
 8007ae6:	eeb4 9a49 	vcmp.f32	s18, s18
 8007aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aee:	d70d      	bvc.n	8007b0c <powf+0x50>
 8007af0:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007afc:	bf08      	it	eq
 8007afe:	eeb0 8a67 	vmoveq.f32	s16, s15
 8007b02:	eeb0 0a48 	vmov.f32	s0, s16
 8007b06:	ecbd 8b04 	vpop	{d8-d9}
 8007b0a:	bd08      	pop	{r3, pc}
 8007b0c:	eddf 9a34 	vldr	s19, [pc, #208]	; 8007be0 <powf+0x124>
 8007b10:	eeb4 9a69 	vcmp.f32	s18, s19
 8007b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b18:	d116      	bne.n	8007b48 <powf+0x8c>
 8007b1a:	eef4 8a69 	vcmp.f32	s17, s19
 8007b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b22:	d057      	beq.n	8007bd4 <powf+0x118>
 8007b24:	eeb0 0a68 	vmov.f32	s0, s17
 8007b28:	f000 fb50 	bl	80081cc <finitef>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d0e8      	beq.n	8007b02 <powf+0x46>
 8007b30:	eef4 8ae9 	vcmpe.f32	s17, s19
 8007b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b38:	d5e3      	bpl.n	8007b02 <powf+0x46>
 8007b3a:	f7ff fef7 	bl	800792c <__errno>
 8007b3e:	2321      	movs	r3, #33	; 0x21
 8007b40:	6003      	str	r3, [r0, #0]
 8007b42:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8007be4 <powf+0x128>
 8007b46:	e7dc      	b.n	8007b02 <powf+0x46>
 8007b48:	f000 fb40 	bl	80081cc <finitef>
 8007b4c:	bb50      	cbnz	r0, 8007ba4 <powf+0xe8>
 8007b4e:	eeb0 0a49 	vmov.f32	s0, s18
 8007b52:	f000 fb3b 	bl	80081cc <finitef>
 8007b56:	b328      	cbz	r0, 8007ba4 <powf+0xe8>
 8007b58:	eeb0 0a68 	vmov.f32	s0, s17
 8007b5c:	f000 fb36 	bl	80081cc <finitef>
 8007b60:	b300      	cbz	r0, 8007ba4 <powf+0xe8>
 8007b62:	eeb4 8a48 	vcmp.f32	s16, s16
 8007b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6a:	d706      	bvc.n	8007b7a <powf+0xbe>
 8007b6c:	f7ff fede 	bl	800792c <__errno>
 8007b70:	2321      	movs	r3, #33	; 0x21
 8007b72:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8007b76:	6003      	str	r3, [r0, #0]
 8007b78:	e7c3      	b.n	8007b02 <powf+0x46>
 8007b7a:	f7ff fed7 	bl	800792c <__errno>
 8007b7e:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8007b82:	2322      	movs	r3, #34	; 0x22
 8007b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b88:	6003      	str	r3, [r0, #0]
 8007b8a:	d508      	bpl.n	8007b9e <powf+0xe2>
 8007b8c:	eeb0 0a68 	vmov.f32	s0, s17
 8007b90:	f000 fb30 	bl	80081f4 <rintf>
 8007b94:	eeb4 0a68 	vcmp.f32	s0, s17
 8007b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b9c:	d1d1      	bne.n	8007b42 <powf+0x86>
 8007b9e:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8007be8 <powf+0x12c>
 8007ba2:	e7ae      	b.n	8007b02 <powf+0x46>
 8007ba4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bac:	d1a9      	bne.n	8007b02 <powf+0x46>
 8007bae:	eeb0 0a49 	vmov.f32	s0, s18
 8007bb2:	f000 fb0b 	bl	80081cc <finitef>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d0a3      	beq.n	8007b02 <powf+0x46>
 8007bba:	eeb0 0a68 	vmov.f32	s0, s17
 8007bbe:	f000 fb05 	bl	80081cc <finitef>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d09d      	beq.n	8007b02 <powf+0x46>
 8007bc6:	f7ff feb1 	bl	800792c <__errno>
 8007bca:	2322      	movs	r3, #34	; 0x22
 8007bcc:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8007be0 <powf+0x124>
 8007bd0:	6003      	str	r3, [r0, #0]
 8007bd2:	e796      	b.n	8007b02 <powf+0x46>
 8007bd4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007bd8:	e793      	b.n	8007b02 <powf+0x46>
 8007bda:	bf00      	nop
 8007bdc:	200000b8 	.word	0x200000b8
 8007be0:	00000000 	.word	0x00000000
 8007be4:	ff800000 	.word	0xff800000
 8007be8:	7f800000 	.word	0x7f800000

08007bec <sqrtf>:
 8007bec:	b508      	push	{r3, lr}
 8007bee:	ed2d 8b02 	vpush	{d8}
 8007bf2:	eeb0 8a40 	vmov.f32	s16, s0
 8007bf6:	f000 fadf 	bl	80081b8 <__ieee754_sqrtf>
 8007bfa:	4b0d      	ldr	r3, [pc, #52]	; (8007c30 <sqrtf+0x44>)
 8007bfc:	f993 3000 	ldrsb.w	r3, [r3]
 8007c00:	3301      	adds	r3, #1
 8007c02:	d011      	beq.n	8007c28 <sqrtf+0x3c>
 8007c04:	eeb4 8a48 	vcmp.f32	s16, s16
 8007c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c0c:	d60c      	bvs.n	8007c28 <sqrtf+0x3c>
 8007c0e:	eddf 8a09 	vldr	s17, [pc, #36]	; 8007c34 <sqrtf+0x48>
 8007c12:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c1a:	d505      	bpl.n	8007c28 <sqrtf+0x3c>
 8007c1c:	f7ff fe86 	bl	800792c <__errno>
 8007c20:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007c24:	2321      	movs	r3, #33	; 0x21
 8007c26:	6003      	str	r3, [r0, #0]
 8007c28:	ecbd 8b02 	vpop	{d8}
 8007c2c:	bd08      	pop	{r3, pc}
 8007c2e:	bf00      	nop
 8007c30:	200000b8 	.word	0x200000b8
 8007c34:	00000000 	.word	0x00000000

08007c38 <__ieee754_powf>:
 8007c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3c:	ee10 5a90 	vmov	r5, s1
 8007c40:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8007c44:	ed2d 8b02 	vpush	{d8}
 8007c48:	eeb0 8a40 	vmov.f32	s16, s0
 8007c4c:	eef0 8a60 	vmov.f32	s17, s1
 8007c50:	f000 8291 	beq.w	8008176 <__ieee754_powf+0x53e>
 8007c54:	ee10 8a10 	vmov	r8, s0
 8007c58:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8007c5c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007c60:	dc06      	bgt.n	8007c70 <__ieee754_powf+0x38>
 8007c62:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007c66:	dd0a      	ble.n	8007c7e <__ieee754_powf+0x46>
 8007c68:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007c6c:	f000 8283 	beq.w	8008176 <__ieee754_powf+0x53e>
 8007c70:	ecbd 8b02 	vpop	{d8}
 8007c74:	48d8      	ldr	r0, [pc, #864]	; (8007fd8 <__ieee754_powf+0x3a0>)
 8007c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7a:	f000 bab5 	b.w	80081e8 <nanf>
 8007c7e:	f1b8 0f00 	cmp.w	r8, #0
 8007c82:	da1f      	bge.n	8007cc4 <__ieee754_powf+0x8c>
 8007c84:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8007c88:	da2e      	bge.n	8007ce8 <__ieee754_powf+0xb0>
 8007c8a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007c8e:	f2c0 827b 	blt.w	8008188 <__ieee754_powf+0x550>
 8007c92:	15fb      	asrs	r3, r7, #23
 8007c94:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007c98:	fa47 f603 	asr.w	r6, r7, r3
 8007c9c:	fa06 f303 	lsl.w	r3, r6, r3
 8007ca0:	42bb      	cmp	r3, r7
 8007ca2:	f040 8271 	bne.w	8008188 <__ieee754_powf+0x550>
 8007ca6:	f006 0601 	and.w	r6, r6, #1
 8007caa:	f1c6 0602 	rsb	r6, r6, #2
 8007cae:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007cb2:	d120      	bne.n	8007cf6 <__ieee754_powf+0xbe>
 8007cb4:	2d00      	cmp	r5, #0
 8007cb6:	f280 8264 	bge.w	8008182 <__ieee754_powf+0x54a>
 8007cba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007cbe:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007cc2:	e00d      	b.n	8007ce0 <__ieee754_powf+0xa8>
 8007cc4:	2600      	movs	r6, #0
 8007cc6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007cca:	d1f0      	bne.n	8007cae <__ieee754_powf+0x76>
 8007ccc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007cd0:	f000 8251 	beq.w	8008176 <__ieee754_powf+0x53e>
 8007cd4:	dd0a      	ble.n	8007cec <__ieee754_powf+0xb4>
 8007cd6:	2d00      	cmp	r5, #0
 8007cd8:	f280 8250 	bge.w	800817c <__ieee754_powf+0x544>
 8007cdc:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8007fdc <__ieee754_powf+0x3a4>
 8007ce0:	ecbd 8b02 	vpop	{d8}
 8007ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ce8:	2602      	movs	r6, #2
 8007cea:	e7ec      	b.n	8007cc6 <__ieee754_powf+0x8e>
 8007cec:	2d00      	cmp	r5, #0
 8007cee:	daf5      	bge.n	8007cdc <__ieee754_powf+0xa4>
 8007cf0:	eeb1 0a68 	vneg.f32	s0, s17
 8007cf4:	e7f4      	b.n	8007ce0 <__ieee754_powf+0xa8>
 8007cf6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8007cfa:	d102      	bne.n	8007d02 <__ieee754_powf+0xca>
 8007cfc:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007d00:	e7ee      	b.n	8007ce0 <__ieee754_powf+0xa8>
 8007d02:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8007d06:	eeb0 0a48 	vmov.f32	s0, s16
 8007d0a:	d108      	bne.n	8007d1e <__ieee754_powf+0xe6>
 8007d0c:	f1b8 0f00 	cmp.w	r8, #0
 8007d10:	db05      	blt.n	8007d1e <__ieee754_powf+0xe6>
 8007d12:	ecbd 8b02 	vpop	{d8}
 8007d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1a:	f000 ba4d 	b.w	80081b8 <__ieee754_sqrtf>
 8007d1e:	f000 fa4e 	bl	80081be <fabsf>
 8007d22:	b124      	cbz	r4, 8007d2e <__ieee754_powf+0xf6>
 8007d24:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8007d28:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007d2c:	d117      	bne.n	8007d5e <__ieee754_powf+0x126>
 8007d2e:	2d00      	cmp	r5, #0
 8007d30:	bfbc      	itt	lt
 8007d32:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8007d36:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007d3a:	f1b8 0f00 	cmp.w	r8, #0
 8007d3e:	dacf      	bge.n	8007ce0 <__ieee754_powf+0xa8>
 8007d40:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8007d44:	ea54 0306 	orrs.w	r3, r4, r6
 8007d48:	d104      	bne.n	8007d54 <__ieee754_powf+0x11c>
 8007d4a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007d4e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007d52:	e7c5      	b.n	8007ce0 <__ieee754_powf+0xa8>
 8007d54:	2e01      	cmp	r6, #1
 8007d56:	d1c3      	bne.n	8007ce0 <__ieee754_powf+0xa8>
 8007d58:	eeb1 0a40 	vneg.f32	s0, s0
 8007d5c:	e7c0      	b.n	8007ce0 <__ieee754_powf+0xa8>
 8007d5e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8007d62:	3801      	subs	r0, #1
 8007d64:	ea56 0300 	orrs.w	r3, r6, r0
 8007d68:	d104      	bne.n	8007d74 <__ieee754_powf+0x13c>
 8007d6a:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007d6e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007d72:	e7b5      	b.n	8007ce0 <__ieee754_powf+0xa8>
 8007d74:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8007d78:	dd6b      	ble.n	8007e52 <__ieee754_powf+0x21a>
 8007d7a:	4b99      	ldr	r3, [pc, #612]	; (8007fe0 <__ieee754_powf+0x3a8>)
 8007d7c:	429c      	cmp	r4, r3
 8007d7e:	dc06      	bgt.n	8007d8e <__ieee754_powf+0x156>
 8007d80:	2d00      	cmp	r5, #0
 8007d82:	daab      	bge.n	8007cdc <__ieee754_powf+0xa4>
 8007d84:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8007fe4 <__ieee754_powf+0x3ac>
 8007d88:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007d8c:	e7a8      	b.n	8007ce0 <__ieee754_powf+0xa8>
 8007d8e:	4b96      	ldr	r3, [pc, #600]	; (8007fe8 <__ieee754_powf+0x3b0>)
 8007d90:	429c      	cmp	r4, r3
 8007d92:	dd02      	ble.n	8007d9a <__ieee754_powf+0x162>
 8007d94:	2d00      	cmp	r5, #0
 8007d96:	dcf5      	bgt.n	8007d84 <__ieee754_powf+0x14c>
 8007d98:	e7a0      	b.n	8007cdc <__ieee754_powf+0xa4>
 8007d9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007d9e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007da2:	eddf 6a92 	vldr	s13, [pc, #584]	; 8007fec <__ieee754_powf+0x3b4>
 8007da6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007daa:	eee0 6a67 	vfms.f32	s13, s0, s15
 8007dae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007db2:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8007db6:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dbe:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8007ff0 <__ieee754_powf+0x3b8>
 8007dc2:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8007dc6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8007ff4 <__ieee754_powf+0x3bc>
 8007dca:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007dce:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8007ff8 <__ieee754_powf+0x3c0>
 8007dd2:	eef0 6a67 	vmov.f32	s13, s15
 8007dd6:	eee0 6a07 	vfma.f32	s13, s0, s14
 8007dda:	ee16 3a90 	vmov	r3, s13
 8007dde:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007de2:	f023 030f 	bic.w	r3, r3, #15
 8007de6:	ee00 3a90 	vmov	s1, r3
 8007dea:	eee0 0a47 	vfms.f32	s1, s0, s14
 8007dee:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007df2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8007df6:	f025 050f 	bic.w	r5, r5, #15
 8007dfa:	ee07 5a10 	vmov	s14, r5
 8007dfe:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007e02:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8007e06:	ee07 3a90 	vmov	s15, r3
 8007e0a:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007e0e:	3e01      	subs	r6, #1
 8007e10:	ea56 0200 	orrs.w	r2, r6, r0
 8007e14:	ee07 5a10 	vmov	s14, r5
 8007e18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e1c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007e20:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007e24:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007e28:	ee17 4a10 	vmov	r4, s14
 8007e2c:	bf08      	it	eq
 8007e2e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8007e32:	2c00      	cmp	r4, #0
 8007e34:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007e38:	f340 8184 	ble.w	8008144 <__ieee754_powf+0x50c>
 8007e3c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007e40:	f340 80fc 	ble.w	800803c <__ieee754_powf+0x404>
 8007e44:	eddf 7a67 	vldr	s15, [pc, #412]	; 8007fe4 <__ieee754_powf+0x3ac>
 8007e48:	ee28 0a27 	vmul.f32	s0, s16, s15
 8007e4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007e50:	e746      	b.n	8007ce0 <__ieee754_powf+0xa8>
 8007e52:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8007e56:	bf01      	itttt	eq
 8007e58:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8007ffc <__ieee754_powf+0x3c4>
 8007e5c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8007e60:	f06f 0217 	mvneq.w	r2, #23
 8007e64:	ee17 4a90 	vmoveq	r4, s15
 8007e68:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8007e6c:	bf18      	it	ne
 8007e6e:	2200      	movne	r2, #0
 8007e70:	3b7f      	subs	r3, #127	; 0x7f
 8007e72:	4413      	add	r3, r2
 8007e74:	4a62      	ldr	r2, [pc, #392]	; (8008000 <__ieee754_powf+0x3c8>)
 8007e76:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8007e7a:	4294      	cmp	r4, r2
 8007e7c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8007e80:	dd06      	ble.n	8007e90 <__ieee754_powf+0x258>
 8007e82:	4a60      	ldr	r2, [pc, #384]	; (8008004 <__ieee754_powf+0x3cc>)
 8007e84:	4294      	cmp	r4, r2
 8007e86:	f340 80a4 	ble.w	8007fd2 <__ieee754_powf+0x39a>
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8007e90:	2400      	movs	r4, #0
 8007e92:	4a5d      	ldr	r2, [pc, #372]	; (8008008 <__ieee754_powf+0x3d0>)
 8007e94:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007e98:	ee07 1a90 	vmov	s15, r1
 8007e9c:	ed92 7a00 	vldr	s14, [r2]
 8007ea0:	4a5a      	ldr	r2, [pc, #360]	; (800800c <__ieee754_powf+0x3d4>)
 8007ea2:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007ea6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007eaa:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8007eae:	1049      	asrs	r1, r1, #1
 8007eb0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007eb4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007eb8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8007ebc:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8007ec0:	ee06 1a10 	vmov	s12, r1
 8007ec4:	ee65 4a26 	vmul.f32	s9, s10, s13
 8007ec8:	ee36 7a47 	vsub.f32	s14, s12, s14
 8007ecc:	ee14 7a90 	vmov	r7, s9
 8007ed0:	4017      	ands	r7, r2
 8007ed2:	ee05 7a90 	vmov	s11, r7
 8007ed6:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8007eda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ede:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8008010 <__ieee754_powf+0x3d8>
 8007ee2:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8007ee6:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8007eea:	ee25 6a26 	vmul.f32	s12, s10, s13
 8007eee:	eddf 6a49 	vldr	s13, [pc, #292]	; 8008014 <__ieee754_powf+0x3dc>
 8007ef2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007ef6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008018 <__ieee754_powf+0x3e0>
 8007efa:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007efe:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007fec <__ieee754_powf+0x3b4>
 8007f02:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f06:	eddf 6a45 	vldr	s13, [pc, #276]	; 800801c <__ieee754_powf+0x3e4>
 8007f0a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007f0e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8008020 <__ieee754_powf+0x3e8>
 8007f12:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f16:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8007f1a:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8007f1e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007f22:	eee5 6a07 	vfma.f32	s13, s10, s14
 8007f26:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8007f2a:	eef0 7a45 	vmov.f32	s15, s10
 8007f2e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8007f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f36:	ee17 1a90 	vmov	r1, s15
 8007f3a:	4011      	ands	r1, r2
 8007f3c:	ee07 1a90 	vmov	s15, r1
 8007f40:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8007f44:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8007f48:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007f4c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8007f50:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007f54:	eeb0 6a47 	vmov.f32	s12, s14
 8007f58:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8007f5c:	ee16 1a10 	vmov	r1, s12
 8007f60:	4011      	ands	r1, r2
 8007f62:	ee06 1a90 	vmov	s13, r1
 8007f66:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8007f6a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8008024 <__ieee754_powf+0x3ec>
 8007f6e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008028 <__ieee754_powf+0x3f0>
 8007f72:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007f76:	ee06 1a10 	vmov	s12, r1
 8007f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f7e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800802c <__ieee754_powf+0x3f4>
 8007f82:	492b      	ldr	r1, [pc, #172]	; (8008030 <__ieee754_powf+0x3f8>)
 8007f84:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007f88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f8c:	edd1 7a00 	vldr	s15, [r1]
 8007f90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f94:	ee07 3a90 	vmov	s15, r3
 8007f98:	4b26      	ldr	r3, [pc, #152]	; (8008034 <__ieee754_powf+0x3fc>)
 8007f9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007f9e:	eef0 7a47 	vmov.f32	s15, s14
 8007fa2:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007fa6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007faa:	edd4 0a00 	vldr	s1, [r4]
 8007fae:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fb6:	ee17 3a90 	vmov	r3, s15
 8007fba:	4013      	ands	r3, r2
 8007fbc:	ee07 3a90 	vmov	s15, r3
 8007fc0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8007fc4:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8007fc8:	eee6 6a65 	vfms.f32	s13, s12, s11
 8007fcc:	ee77 7a66 	vsub.f32	s15, s14, s13
 8007fd0:	e70f      	b.n	8007df2 <__ieee754_powf+0x1ba>
 8007fd2:	2401      	movs	r4, #1
 8007fd4:	e75d      	b.n	8007e92 <__ieee754_powf+0x25a>
 8007fd6:	bf00      	nop
 8007fd8:	080083c8 	.word	0x080083c8
 8007fdc:	00000000 	.word	0x00000000
 8007fe0:	3f7ffff7 	.word	0x3f7ffff7
 8007fe4:	7149f2ca 	.word	0x7149f2ca
 8007fe8:	3f800007 	.word	0x3f800007
 8007fec:	3eaaaaab 	.word	0x3eaaaaab
 8007ff0:	3fb8aa3b 	.word	0x3fb8aa3b
 8007ff4:	36eca570 	.word	0x36eca570
 8007ff8:	3fb8aa00 	.word	0x3fb8aa00
 8007ffc:	4b800000 	.word	0x4b800000
 8008000:	001cc471 	.word	0x001cc471
 8008004:	005db3d6 	.word	0x005db3d6
 8008008:	080083cc 	.word	0x080083cc
 800800c:	fffff000 	.word	0xfffff000
 8008010:	3e6c3255 	.word	0x3e6c3255
 8008014:	3e53f142 	.word	0x3e53f142
 8008018:	3e8ba305 	.word	0x3e8ba305
 800801c:	3edb6db7 	.word	0x3edb6db7
 8008020:	3f19999a 	.word	0x3f19999a
 8008024:	3f76384f 	.word	0x3f76384f
 8008028:	3f763800 	.word	0x3f763800
 800802c:	369dc3a0 	.word	0x369dc3a0
 8008030:	080083dc 	.word	0x080083dc
 8008034:	080083d4 	.word	0x080083d4
 8008038:	3338aa3c 	.word	0x3338aa3c
 800803c:	f040 8092 	bne.w	8008164 <__ieee754_powf+0x52c>
 8008040:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8008038 <__ieee754_powf+0x400>
 8008044:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008048:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800804c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8008050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008054:	f73f aef6 	bgt.w	8007e44 <__ieee754_powf+0x20c>
 8008058:	15db      	asrs	r3, r3, #23
 800805a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800805e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008062:	4103      	asrs	r3, r0
 8008064:	4423      	add	r3, r4
 8008066:	4949      	ldr	r1, [pc, #292]	; (800818c <__ieee754_powf+0x554>)
 8008068:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800806c:	3a7f      	subs	r2, #127	; 0x7f
 800806e:	4111      	asrs	r1, r2
 8008070:	ea23 0101 	bic.w	r1, r3, r1
 8008074:	ee07 1a10 	vmov	s14, r1
 8008078:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800807c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008080:	f1c2 0217 	rsb	r2, r2, #23
 8008084:	4110      	asrs	r0, r2
 8008086:	2c00      	cmp	r4, #0
 8008088:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800808c:	bfb8      	it	lt
 800808e:	4240      	neglt	r0, r0
 8008090:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8008094:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8008190 <__ieee754_powf+0x558>
 8008098:	ee17 3a10 	vmov	r3, s14
 800809c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80080a0:	f023 030f 	bic.w	r3, r3, #15
 80080a4:	ee07 3a10 	vmov	s14, r3
 80080a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080ac:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80080b0:	eddf 7a38 	vldr	s15, [pc, #224]	; 8008194 <__ieee754_powf+0x55c>
 80080b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80080bc:	eddf 6a36 	vldr	s13, [pc, #216]	; 8008198 <__ieee754_powf+0x560>
 80080c0:	eeb0 0a67 	vmov.f32	s0, s15
 80080c4:	eea7 0a26 	vfma.f32	s0, s14, s13
 80080c8:	eeb0 6a40 	vmov.f32	s12, s0
 80080cc:	eea7 6a66 	vfms.f32	s12, s14, s13
 80080d0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80080d4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80080d8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800819c <__ieee754_powf+0x564>
 80080dc:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80081a0 <__ieee754_powf+0x568>
 80080e0:	eea7 6a26 	vfma.f32	s12, s14, s13
 80080e4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80081a4 <__ieee754_powf+0x56c>
 80080e8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80080ec:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 80081a8 <__ieee754_powf+0x570>
 80080f0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80080f4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80081ac <__ieee754_powf+0x574>
 80080f8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80080fc:	eeb0 6a40 	vmov.f32	s12, s0
 8008100:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8008104:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008108:	eeb0 7a46 	vmov.f32	s14, s12
 800810c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8008110:	ee20 6a06 	vmul.f32	s12, s0, s12
 8008114:	eee0 7a27 	vfma.f32	s15, s0, s15
 8008118:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800811c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008120:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008124:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008128:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800812c:	ee10 3a10 	vmov	r3, s0
 8008130:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8008134:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008138:	da1a      	bge.n	8008170 <__ieee754_powf+0x538>
 800813a:	f000 f8b7 	bl	80082ac <scalbnf>
 800813e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8008142:	e5cd      	b.n	8007ce0 <__ieee754_powf+0xa8>
 8008144:	4a1a      	ldr	r2, [pc, #104]	; (80081b0 <__ieee754_powf+0x578>)
 8008146:	4293      	cmp	r3, r2
 8008148:	dd02      	ble.n	8008150 <__ieee754_powf+0x518>
 800814a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80081b4 <__ieee754_powf+0x57c>
 800814e:	e67b      	b.n	8007e48 <__ieee754_powf+0x210>
 8008150:	d108      	bne.n	8008164 <__ieee754_powf+0x52c>
 8008152:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008156:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800815a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800815e:	f6ff af7b 	blt.w	8008058 <__ieee754_powf+0x420>
 8008162:	e7f2      	b.n	800814a <__ieee754_powf+0x512>
 8008164:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8008168:	f73f af76 	bgt.w	8008058 <__ieee754_powf+0x420>
 800816c:	2000      	movs	r0, #0
 800816e:	e78f      	b.n	8008090 <__ieee754_powf+0x458>
 8008170:	ee00 3a10 	vmov	s0, r3
 8008174:	e7e3      	b.n	800813e <__ieee754_powf+0x506>
 8008176:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800817a:	e5b1      	b.n	8007ce0 <__ieee754_powf+0xa8>
 800817c:	eeb0 0a68 	vmov.f32	s0, s17
 8008180:	e5ae      	b.n	8007ce0 <__ieee754_powf+0xa8>
 8008182:	eeb0 0a48 	vmov.f32	s0, s16
 8008186:	e5ab      	b.n	8007ce0 <__ieee754_powf+0xa8>
 8008188:	2600      	movs	r6, #0
 800818a:	e590      	b.n	8007cae <__ieee754_powf+0x76>
 800818c:	007fffff 	.word	0x007fffff
 8008190:	3f317218 	.word	0x3f317218
 8008194:	35bfbe8c 	.word	0x35bfbe8c
 8008198:	3f317200 	.word	0x3f317200
 800819c:	3331bb4c 	.word	0x3331bb4c
 80081a0:	b5ddea0e 	.word	0xb5ddea0e
 80081a4:	388ab355 	.word	0x388ab355
 80081a8:	bb360b61 	.word	0xbb360b61
 80081ac:	3e2aaaab 	.word	0x3e2aaaab
 80081b0:	43160000 	.word	0x43160000
 80081b4:	0da24260 	.word	0x0da24260

080081b8 <__ieee754_sqrtf>:
 80081b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80081bc:	4770      	bx	lr

080081be <fabsf>:
 80081be:	ee10 3a10 	vmov	r3, s0
 80081c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081c6:	ee00 3a10 	vmov	s0, r3
 80081ca:	4770      	bx	lr

080081cc <finitef>:
 80081cc:	b082      	sub	sp, #8
 80081ce:	ed8d 0a01 	vstr	s0, [sp, #4]
 80081d2:	9801      	ldr	r0, [sp, #4]
 80081d4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80081d8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80081dc:	bfac      	ite	ge
 80081de:	2000      	movge	r0, #0
 80081e0:	2001      	movlt	r0, #1
 80081e2:	b002      	add	sp, #8
 80081e4:	4770      	bx	lr
	...

080081e8 <nanf>:
 80081e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80081f0 <nanf+0x8>
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	7fc00000 	.word	0x7fc00000

080081f4 <rintf>:
 80081f4:	ee10 2a10 	vmov	r2, s0
 80081f8:	b513      	push	{r0, r1, r4, lr}
 80081fa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80081fe:	397f      	subs	r1, #127	; 0x7f
 8008200:	2916      	cmp	r1, #22
 8008202:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8008206:	dc47      	bgt.n	8008298 <rintf+0xa4>
 8008208:	b32b      	cbz	r3, 8008256 <rintf+0x62>
 800820a:	2900      	cmp	r1, #0
 800820c:	ee10 3a10 	vmov	r3, s0
 8008210:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8008214:	da21      	bge.n	800825a <rintf+0x66>
 8008216:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800821a:	425b      	negs	r3, r3
 800821c:	4921      	ldr	r1, [pc, #132]	; (80082a4 <rintf+0xb0>)
 800821e:	0a5b      	lsrs	r3, r3, #9
 8008220:	0d12      	lsrs	r2, r2, #20
 8008222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008226:	0512      	lsls	r2, r2, #20
 8008228:	4313      	orrs	r3, r2
 800822a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800822e:	ee07 3a90 	vmov	s15, r3
 8008232:	edd1 6a00 	vldr	s13, [r1]
 8008236:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800823a:	ed8d 7a01 	vstr	s14, [sp, #4]
 800823e:	eddd 7a01 	vldr	s15, [sp, #4]
 8008242:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008246:	ee17 3a90 	vmov	r3, s15
 800824a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800824e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8008252:	ee00 3a10 	vmov	s0, r3
 8008256:	b002      	add	sp, #8
 8008258:	bd10      	pop	{r4, pc}
 800825a:	4a13      	ldr	r2, [pc, #76]	; (80082a8 <rintf+0xb4>)
 800825c:	410a      	asrs	r2, r1
 800825e:	4213      	tst	r3, r2
 8008260:	d0f9      	beq.n	8008256 <rintf+0x62>
 8008262:	0854      	lsrs	r4, r2, #1
 8008264:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8008268:	d006      	beq.n	8008278 <rintf+0x84>
 800826a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800826e:	ea23 0304 	bic.w	r3, r3, r4
 8008272:	fa42 f101 	asr.w	r1, r2, r1
 8008276:	430b      	orrs	r3, r1
 8008278:	4a0a      	ldr	r2, [pc, #40]	; (80082a4 <rintf+0xb0>)
 800827a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800827e:	ed90 7a00 	vldr	s14, [r0]
 8008282:	ee07 3a90 	vmov	s15, r3
 8008286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800828a:	edcd 7a01 	vstr	s15, [sp, #4]
 800828e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008292:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008296:	e7de      	b.n	8008256 <rintf+0x62>
 8008298:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800829c:	d3db      	bcc.n	8008256 <rintf+0x62>
 800829e:	ee30 0a00 	vadd.f32	s0, s0, s0
 80082a2:	e7d8      	b.n	8008256 <rintf+0x62>
 80082a4:	080083e4 	.word	0x080083e4
 80082a8:	007fffff 	.word	0x007fffff

080082ac <scalbnf>:
 80082ac:	ee10 3a10 	vmov	r3, s0
 80082b0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80082b4:	d025      	beq.n	8008302 <scalbnf+0x56>
 80082b6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80082ba:	d302      	bcc.n	80082c2 <scalbnf+0x16>
 80082bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80082c0:	4770      	bx	lr
 80082c2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80082c6:	d122      	bne.n	800830e <scalbnf+0x62>
 80082c8:	4b2a      	ldr	r3, [pc, #168]	; (8008374 <scalbnf+0xc8>)
 80082ca:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008378 <scalbnf+0xcc>
 80082ce:	4298      	cmp	r0, r3
 80082d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80082d4:	db16      	blt.n	8008304 <scalbnf+0x58>
 80082d6:	ee10 3a10 	vmov	r3, s0
 80082da:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80082de:	3a19      	subs	r2, #25
 80082e0:	4402      	add	r2, r0
 80082e2:	2afe      	cmp	r2, #254	; 0xfe
 80082e4:	dd15      	ble.n	8008312 <scalbnf+0x66>
 80082e6:	ee10 3a10 	vmov	r3, s0
 80082ea:	eddf 7a24 	vldr	s15, [pc, #144]	; 800837c <scalbnf+0xd0>
 80082ee:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008380 <scalbnf+0xd4>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	eeb0 7a67 	vmov.f32	s14, s15
 80082f8:	bfb8      	it	lt
 80082fa:	eef0 7a66 	vmovlt.f32	s15, s13
 80082fe:	ee27 0a27 	vmul.f32	s0, s14, s15
 8008302:	4770      	bx	lr
 8008304:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008384 <scalbnf+0xd8>
 8008308:	ee20 0a27 	vmul.f32	s0, s0, s15
 800830c:	4770      	bx	lr
 800830e:	0dd2      	lsrs	r2, r2, #23
 8008310:	e7e6      	b.n	80082e0 <scalbnf+0x34>
 8008312:	2a00      	cmp	r2, #0
 8008314:	dd06      	ble.n	8008324 <scalbnf+0x78>
 8008316:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800831a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800831e:	ee00 3a10 	vmov	s0, r3
 8008322:	4770      	bx	lr
 8008324:	f112 0f16 	cmn.w	r2, #22
 8008328:	da1a      	bge.n	8008360 <scalbnf+0xb4>
 800832a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800832e:	4298      	cmp	r0, r3
 8008330:	ee10 3a10 	vmov	r3, s0
 8008334:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008338:	dd0a      	ble.n	8008350 <scalbnf+0xa4>
 800833a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800837c <scalbnf+0xd0>
 800833e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008380 <scalbnf+0xd4>
 8008342:	eef0 7a40 	vmov.f32	s15, s0
 8008346:	2b00      	cmp	r3, #0
 8008348:	bf18      	it	ne
 800834a:	eeb0 0a47 	vmovne.f32	s0, s14
 800834e:	e7db      	b.n	8008308 <scalbnf+0x5c>
 8008350:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008384 <scalbnf+0xd8>
 8008354:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008388 <scalbnf+0xdc>
 8008358:	eef0 7a40 	vmov.f32	s15, s0
 800835c:	2b00      	cmp	r3, #0
 800835e:	e7f3      	b.n	8008348 <scalbnf+0x9c>
 8008360:	3219      	adds	r2, #25
 8008362:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008366:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800836a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800838c <scalbnf+0xe0>
 800836e:	ee07 3a10 	vmov	s14, r3
 8008372:	e7c4      	b.n	80082fe <scalbnf+0x52>
 8008374:	ffff3cb0 	.word	0xffff3cb0
 8008378:	4c000000 	.word	0x4c000000
 800837c:	7149f2ca 	.word	0x7149f2ca
 8008380:	f149f2ca 	.word	0xf149f2ca
 8008384:	0da24260 	.word	0x0da24260
 8008388:	8da24260 	.word	0x8da24260
 800838c:	33000000 	.word	0x33000000

08008390 <_init>:
 8008390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008392:	bf00      	nop
 8008394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008396:	bc08      	pop	{r3}
 8008398:	469e      	mov	lr, r3
 800839a:	4770      	bx	lr

0800839c <_fini>:
 800839c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839e:	bf00      	nop
 80083a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083a2:	bc08      	pop	{r3}
 80083a4:	469e      	mov	lr, r3
 80083a6:	4770      	bx	lr
