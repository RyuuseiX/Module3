
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005450  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080055e8  080055e8  000155e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800560c  0800560c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800560c  0800560c  0001560c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005614  08005614  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005614  08005614  00015614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005618  08005618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800561c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000078  08005690  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08005690  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108ac  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002020  00000000  00000000  00030950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00032970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  00033900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f0e  00000000  00000000  00034800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e12  00000000  00000000  0004b70e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000917f9  00000000  00000000  0005c520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edd19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004508  00000000  00000000  000edd6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080055d0 	.word	0x080055d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	080055d0 	.word	0x080055d0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f001 f9ff 	bl	80018d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f877 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 facd 	bl	8000a7c <MX_GPIO_Init>
  MX_DMA_Init();
 80004e2:	f000 faa3 	bl	8000a2c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 fa75 	bl	80009d4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004ea:	f000 f905 	bl	80006f8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80004ee:	f000 f9ad 	bl	800084c <MX_TIM3_Init>
  MX_TIM2_Init();
 80004f2:	f000 f959 	bl	80007a8 <MX_TIM2_Init>
  MX_I2C1_Init();
 80004f6:	f000 f8d1 	bl	800069c <MX_I2C1_Init>
  MX_TIM4_Init();
 80004fa:	f000 fa1d 	bl	8000938 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);					//micros()
 80004fe:	4829      	ldr	r0, [pc, #164]	; (80005a4 <main+0xd4>)
 8000500:	f002 ffb8 	bl	8003474 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);   //Start reading encoder
 8000504:	213c      	movs	r1, #60	; 0x3c
 8000506:	4828      	ldr	r0, [pc, #160]	; (80005a8 <main+0xd8>)
 8000508:	f003 f9c6 	bl	8003898 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim3);						//Start TIM3
 800050c:	4827      	ldr	r0, [pc, #156]	; (80005ac <main+0xdc>)
 800050e:	f002 ff57 	bl	80033c0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);			//Start PWM TIM3
 8000512:	210c      	movs	r1, #12
 8000514:	4825      	ldr	r0, [pc, #148]	; (80005ac <main+0xdc>)
 8000516:	f003 f869 	bl	80035ec <HAL_TIM_PWM_Start>

  UART2.huart = &huart2;
 800051a:	4b25      	ldr	r3, [pc, #148]	; (80005b0 <main+0xe0>)
 800051c:	4a25      	ldr	r2, [pc, #148]	; (80005b4 <main+0xe4>)
 800051e:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 8000520:	4b23      	ldr	r3, [pc, #140]	; (80005b0 <main+0xe0>)
 8000522:	22ff      	movs	r2, #255	; 0xff
 8000524:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8000526:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <main+0xe0>)
 8000528:	22ff      	movs	r2, #255	; 0xff
 800052a:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 800052c:	4820      	ldr	r0, [pc, #128]	; (80005b0 <main+0xe0>)
 800052e:	f000 fb4b 	bl	8000bc8 <UARTInit>
  UARTResetStart(&UART2);
 8000532:	481f      	ldr	r0, [pc, #124]	; (80005b0 <main+0xe0>)
 8000534:	f000 fb70 	bl	8000c18 <UARTResetStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	hightest = Decimal2High(15634);
 8000538:	f643 5012 	movw	r0, #15634	; 0x3d12
 800053c:	f000 fe9e 	bl	800127c <Decimal2High>
 8000540:	4603      	mov	r3, r0
 8000542:	461a      	mov	r2, r3
 8000544:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <main+0xe8>)
 8000546:	701a      	strb	r2, [r3, #0]
	  	lowtest = Decimal2Low(15634);
 8000548:	f643 5012 	movw	r0, #15634	; 0x3d12
 800054c:	f000 fea5 	bl	800129a <Decimal2Low>
 8000550:	4603      	mov	r3, r0
 8000552:	461a      	mov	r2, r3
 8000554:	4b19      	ldr	r3, [pc, #100]	; (80005bc <main+0xec>)
 8000556:	701a      	strb	r2, [r3, #0]
	  	inttest = HighLow2Decimal(hightest, lowtest);
 8000558:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <main+0xe8>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4a17      	ldr	r2, [pc, #92]	; (80005bc <main+0xec>)
 800055e:	7812      	ldrb	r2, [r2, #0]
 8000560:	4611      	mov	r1, r2
 8000562:	4618      	mov	r0, r3
 8000564:	f000 fea6 	bl	80012b4 <HighLow2Decimal>
 8000568:	4603      	mov	r3, r0
 800056a:	461a      	mov	r2, r3
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <main+0xf0>)
 800056e:	801a      	strh	r2, [r3, #0]

	  	int16_t inputChar = UARTReadChar(&UART2);
 8000570:	480f      	ldr	r0, [pc, #60]	; (80005b0 <main+0xe0>)
 8000572:	f000 fb75 	bl	8000c60 <UARTReadChar>
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	  	if (inputChar != -1)
 800057a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800057e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000582:	d00b      	beq.n	800059c <main+0xcc>
	  	{
	  		len+=1;
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <main+0xf4>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	b2da      	uxtb	r2, r3
 800058c:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <main+0xf4>)
 800058e:	701a      	strb	r2, [r3, #0]
	  		UART_Protocol(&UART2, inputChar);
 8000590:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000594:	4619      	mov	r1, r3
 8000596:	4806      	ldr	r0, [pc, #24]	; (80005b0 <main+0xe0>)
 8000598:	f000 fc24 	bl	8000de4 <UART_Protocol>
	  	}

	  	if (Connected)
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <main+0xf8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
  {
 80005a2:	e7c9      	b.n	8000538 <main+0x68>
 80005a4:	200002c8 	.word	0x200002c8
 80005a8:	2000027c 	.word	0x2000027c
 80005ac:	200001d4 	.word	0x200001d4
 80005b0:	200000a4 	.word	0x200000a4
 80005b4:	20000310 	.word	0x20000310
 80005b8:	200001d2 	.word	0x200001d2
 80005bc:	200001d1 	.word	0x200001d1
 80005c0:	20000354 	.word	0x20000354
 80005c4:	20000356 	.word	0x20000356
 80005c8:	20000094 	.word	0x20000094

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 ff68 	bl	80054b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b27      	ldr	r3, [pc, #156]	; (8000694 <SystemClock_Config+0xc8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a26      	ldr	r2, [pc, #152]	; (8000694 <SystemClock_Config+0xc8>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b24      	ldr	r3, [pc, #144]	; (8000694 <SystemClock_Config+0xc8>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b21      	ldr	r3, [pc, #132]	; (8000698 <SystemClock_Config+0xcc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a20      	ldr	r2, [pc, #128]	; (8000698 <SystemClock_Config+0xcc>)
 8000616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <SystemClock_Config+0xcc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000630:	2310      	movs	r3, #16
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000638:	2300      	movs	r3, #0
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800063c:	2308      	movs	r3, #8
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f002 f9f1 	bl	8002a38 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800065c:	f000 fe5e 	bl	800131c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2302      	movs	r3, #2
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2103      	movs	r1, #3
 800067c:	4618      	mov	r0, r3
 800067e:	f002 fc53 	bl	8002f28 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000688:	f000 fe48 	bl	800131c <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3750      	adds	r7, #80	; 0x50
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_I2C1_Init+0x50>)
 80006a2:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <MX_I2C1_Init+0x54>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_I2C1_Init+0x50>)
 80006a8:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_I2C1_Init+0x58>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_I2C1_Init+0x50>)
 80006da:	f002 f869 	bl	80027b0 <HAL_I2C_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e4:	f000 fe1a 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	2000017c 	.word	0x2000017c
 80006f0:	40005400 	.word	0x40005400
 80006f4:	000186a0 	.word	0x000186a0

080006f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08c      	sub	sp, #48	; 0x30
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2224      	movs	r2, #36	; 0x24
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f004 fed2 	bl	80054b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <MX_TIM1_Init+0xa8>)
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <MX_TIM1_Init+0xac>)
 8000718:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_TIM1_Init+0xa8>)
 800071c:	2200      	movs	r2, #0
 800071e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_TIM1_Init+0xa8>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8191;
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_TIM1_Init+0xa8>)
 8000728:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800072c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_TIM1_Init+0xa8>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_TIM1_Init+0xa8>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_TIM1_Init+0xa8>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000740:	2303      	movs	r3, #3
 8000742:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000748:	2301      	movs	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000758:	2301      	movs	r3, #1
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	4619      	mov	r1, r3
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <MX_TIM1_Init+0xa8>)
 800076c:	f002 ffee 	bl	800374c <HAL_TIM_Encoder_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000776:	f000 fdd1 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4619      	mov	r1, r3
 8000786:	4806      	ldr	r0, [pc, #24]	; (80007a0 <MX_TIM1_Init+0xa8>)
 8000788:	f003 fe92 	bl	80044b0 <HAL_TIMEx_MasterConfigSynchronization>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000792:	f000 fdc3 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	3730      	adds	r7, #48	; 0x30
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000027c 	.word	0x2000027c
 80007a4:	40010000 	.word	0x40010000

080007a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007bc:	463b      	mov	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c4:	4b20      	ldr	r3, [pc, #128]	; (8000848 <MX_TIM2_Init+0xa0>)
 80007c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_TIM2_Init+0xa0>)
 80007ce:	2263      	movs	r2, #99	; 0x63
 80007d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_TIM2_Init+0xa0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_TIM2_Init+0xa0>)
 80007da:	f04f 32ff 	mov.w	r2, #4294967295
 80007de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_TIM2_Init+0xa0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_TIM2_Init+0xa0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ec:	4816      	ldr	r0, [pc, #88]	; (8000848 <MX_TIM2_Init+0xa0>)
 80007ee:	f002 fd97 	bl	8003320 <HAL_TIM_Base_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007f8:	f000 fd90 	bl	800131c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000800:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	4619      	mov	r1, r3
 8000808:	480f      	ldr	r0, [pc, #60]	; (8000848 <MX_TIM2_Init+0xa0>)
 800080a:	f003 fa99 	bl	8003d40 <HAL_TIM_ConfigClockSource>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000814:	f000 fd82 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000818:	2300      	movs	r3, #0
 800081a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000820:	463b      	mov	r3, r7
 8000822:	4619      	mov	r1, r3
 8000824:	4808      	ldr	r0, [pc, #32]	; (8000848 <MX_TIM2_Init+0xa0>)
 8000826:	f003 fe43 	bl	80044b0 <HAL_TIMEx_MasterConfigSynchronization>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000830:	f000 fd74 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <MX_TIM2_Init+0xa0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f06f 0201 	mvn.w	r2, #1
 800083c:	611a      	str	r2, [r3, #16]

  /* USER CODE END TIM2_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200002c8 	.word	0x200002c8

0800084c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08e      	sub	sp, #56	; 0x38
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000860:	f107 0320 	add.w	r3, r7, #32
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
 8000878:	615a      	str	r2, [r3, #20]
 800087a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800087c:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <MX_TIM3_Init+0xe4>)
 800087e:	4a2d      	ldr	r2, [pc, #180]	; (8000934 <MX_TIM3_Init+0xe8>)
 8000880:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000882:	4b2b      	ldr	r3, [pc, #172]	; (8000930 <MX_TIM3_Init+0xe4>)
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000888:	4b29      	ldr	r3, [pc, #164]	; (8000930 <MX_TIM3_Init+0xe4>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800088e:	4b28      	ldr	r3, [pc, #160]	; (8000930 <MX_TIM3_Init+0xe4>)
 8000890:	f242 7210 	movw	r2, #10000	; 0x2710
 8000894:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000896:	4b26      	ldr	r3, [pc, #152]	; (8000930 <MX_TIM3_Init+0xe4>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089c:	4b24      	ldr	r3, [pc, #144]	; (8000930 <MX_TIM3_Init+0xe4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008a2:	4823      	ldr	r0, [pc, #140]	; (8000930 <MX_TIM3_Init+0xe4>)
 80008a4:	f002 fd3c 	bl	8003320 <HAL_TIM_Base_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80008ae:	f000 fd35 	bl	800131c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008bc:	4619      	mov	r1, r3
 80008be:	481c      	ldr	r0, [pc, #112]	; (8000930 <MX_TIM3_Init+0xe4>)
 80008c0:	f003 fa3e 	bl	8003d40 <HAL_TIM_ConfigClockSource>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80008ca:	f000 fd27 	bl	800131c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008ce:	4818      	ldr	r0, [pc, #96]	; (8000930 <MX_TIM3_Init+0xe4>)
 80008d0:	f002 fe32 	bl	8003538 <HAL_TIM_PWM_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80008da:	f000 fd1f 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008e6:	f107 0320 	add.w	r3, r7, #32
 80008ea:	4619      	mov	r1, r3
 80008ec:	4810      	ldr	r0, [pc, #64]	; (8000930 <MX_TIM3_Init+0xe4>)
 80008ee:	f003 fddf 	bl	80044b0 <HAL_TIMEx_MasterConfigSynchronization>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80008f8:	f000 fd10 	bl	800131c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fc:	2360      	movs	r3, #96	; 0x60
 80008fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	220c      	movs	r2, #12
 8000910:	4619      	mov	r1, r3
 8000912:	4807      	ldr	r0, [pc, #28]	; (8000930 <MX_TIM3_Init+0xe4>)
 8000914:	f003 f956 	bl	8003bc4 <HAL_TIM_PWM_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800091e:	f000 fcfd 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000922:	4803      	ldr	r0, [pc, #12]	; (8000930 <MX_TIM3_Init+0xe4>)
 8000924:	f000 fe12 	bl	800154c <HAL_TIM_MspPostInit>

}
 8000928:	bf00      	nop
 800092a:	3738      	adds	r7, #56	; 0x38
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200001d4 	.word	0x200001d4
 8000934:	40000400 	.word	0x40000400

08000938 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094c:	463b      	mov	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_TIM4_Init+0x94>)
 8000956:	4a1e      	ldr	r2, [pc, #120]	; (80009d0 <MX_TIM4_Init+0x98>)
 8000958:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_TIM4_Init+0x94>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_TIM4_Init+0x94>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_TIM4_Init+0x94>)
 8000968:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800096c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_TIM4_Init+0x94>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_TIM4_Init+0x94>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800097a:	4814      	ldr	r0, [pc, #80]	; (80009cc <MX_TIM4_Init+0x94>)
 800097c:	f002 fcd0 	bl	8003320 <HAL_TIM_Base_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000986:	f000 fcc9 	bl	800131c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	4619      	mov	r1, r3
 8000996:	480d      	ldr	r0, [pc, #52]	; (80009cc <MX_TIM4_Init+0x94>)
 8000998:	f003 f9d2 	bl	8003d40 <HAL_TIM_ConfigClockSource>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80009a2:	f000 fcbb 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	4619      	mov	r1, r3
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <MX_TIM4_Init+0x94>)
 80009b4:	f003 fd7c 	bl	80044b0 <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80009be:	f000 fcad 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000134 	.word	0x20000134
 80009d0:	40000800 	.word	0x40000800

080009d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_USART2_UART_Init+0x50>)
 80009da:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <MX_USART2_UART_Init+0x54>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_USART2_UART_Init+0x50>)
 80009e0:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80009e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_USART2_UART_Init+0x50>)
 80009e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ec:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <MX_USART2_UART_Init+0x50>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_USART2_UART_Init+0x50>)
 80009f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_USART2_UART_Init+0x50>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_USART2_UART_Init+0x50>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_USART2_UART_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_USART2_UART_Init+0x50>)
 8000a10:	f003 fdd0 	bl	80045b4 <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000a1a:	f000 fc7f 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000310 	.word	0x20000310
 8000a28:	40004400 	.word	0x40004400

08000a2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <MX_DMA_Init+0x4c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <MX_DMA_Init+0x4c>)
 8000a3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <MX_DMA_Init+0x4c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2010      	movs	r0, #16
 8000a54:	f001 f8b1 	bl	8001bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a58:	2010      	movs	r0, #16
 8000a5a:	f001 f8ca 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	2011      	movs	r0, #17
 8000a64:	f001 f8a9 	bl	8001bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a68:	2011      	movs	r0, #17
 8000a6a:	f001 f8c2 	bl	8001bf2 <HAL_NVIC_EnableIRQ>

}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b47      	ldr	r3, [pc, #284]	; (8000bb4 <MX_GPIO_Init+0x138>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a46      	ldr	r2, [pc, #280]	; (8000bb4 <MX_GPIO_Init+0x138>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b44      	ldr	r3, [pc, #272]	; (8000bb4 <MX_GPIO_Init+0x138>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0304 	and.w	r3, r3, #4
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b40      	ldr	r3, [pc, #256]	; (8000bb4 <MX_GPIO_Init+0x138>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a3f      	ldr	r2, [pc, #252]	; (8000bb4 <MX_GPIO_Init+0x138>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b3d      	ldr	r3, [pc, #244]	; (8000bb4 <MX_GPIO_Init+0x138>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <MX_GPIO_Init+0x138>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a38      	ldr	r2, [pc, #224]	; (8000bb4 <MX_GPIO_Init+0x138>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b36      	ldr	r3, [pc, #216]	; (8000bb4 <MX_GPIO_Init+0x138>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b32      	ldr	r3, [pc, #200]	; (8000bb4 <MX_GPIO_Init+0x138>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a31      	ldr	r2, [pc, #196]	; (8000bb4 <MX_GPIO_Init+0x138>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <MX_GPIO_Init+0x138>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2120      	movs	r1, #32
 8000b06:	482c      	ldr	r0, [pc, #176]	; (8000bb8 <MX_GPIO_Init+0x13c>)
 8000b08:	f001 fe14 	bl	8002734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b12:	482a      	ldr	r0, [pc, #168]	; (8000bbc <MX_GPIO_Init+0x140>)
 8000b14:	f001 fe0e 	bl	8002734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b1e:	4b28      	ldr	r3, [pc, #160]	; (8000bc0 <MX_GPIO_Init+0x144>)
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4825      	ldr	r0, [pc, #148]	; (8000bc4 <MX_GPIO_Init+0x148>)
 8000b2e:	f001 fc7d 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Input_Proxreal_Pin Encoder_X_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxreal_Pin|Encoder_X_Pin;
 8000b32:	2381      	movs	r3, #129	; 0x81
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	481f      	ldr	r0, [pc, #124]	; (8000bc4 <MX_GPIO_Init+0x148>)
 8000b46:	f001 fc71 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Input_Proxtest_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxtest_Pin;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_Input_Proxtest_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4816      	ldr	r0, [pc, #88]	; (8000bb8 <MX_GPIO_Init+0x13c>)
 8000b5e:	f001 fc65 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b62:	2320      	movs	r3, #32
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	480f      	ldr	r0, [pc, #60]	; (8000bb8 <MX_GPIO_Init+0x13c>)
 8000b7a:	f001 fc57 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	4809      	ldr	r0, [pc, #36]	; (8000bbc <MX_GPIO_Init+0x140>)
 8000b98:	f001 fc48 	bl	800242c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2028      	movs	r0, #40	; 0x28
 8000ba2:	f001 f80a 	bl	8001bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ba6:	2028      	movs	r0, #40	; 0x28
 8000ba8:	f001 f823 	bl	8001bf2 <HAL_NVIC_EnableIRQ>

}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	; 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	10210000 	.word	0x10210000
 8000bc4:	40020800 	.word	0x40020800

08000bc8 <UARTInit>:

/* USER CODE BEGIN 4 */

void UARTInit(UARTStucrture *uart)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8000bd0:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <UARTInit+0x4c>)
 8000bd2:	88db      	ldrh	r3, [r3, #6]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f004 fc2a 	bl	8005430 <calloc>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461a      	mov	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <UARTInit+0x4c>)
 8000be6:	889b      	ldrh	r3, [r3, #4]
 8000be8:	4619      	mov	r1, r3
 8000bea:	2001      	movs	r0, #1
 8000bec:	f004 fc20 	bl	8005430 <calloc>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	81da      	strh	r2, [r3, #14]

}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200000a4 	.word	0x200000a4

08000c18 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6818      	ldr	r0, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6919      	ldr	r1, [r3, #16]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	88db      	ldrh	r3, [r3, #6]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	f003 fd7b 	bl	8004728 <HAL_UART_Receive_DMA>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	88db      	ldrh	r3, [r3, #6]
 8000c46:	461a      	mov	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	1ad3      	subs	r3, r2, r3
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8000c68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c6c:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	8a9b      	ldrh	r3, [r3, #20]
 8000c72:	461c      	mov	r4, r3
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ffe0 	bl	8000c3a <UARTGetRxHead>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	429c      	cmp	r4, r3
 8000c7e:	d013      	beq.n	8000ca8 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	8a92      	ldrh	r2, [r2, #20]
 8000c88:	4413      	add	r3, r2
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	8a9b      	ldrh	r3, [r3, #20]
 8000c92:	3301      	adds	r3, #1
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	88d2      	ldrh	r2, [r2, #6]
 8000c98:	fb93 f1f2 	sdiv	r1, r3, r2
 8000c9c:	fb02 f201 	mul.w	r2, r2, r1
 8000ca0:	1a9b      	subs	r3, r3, r2
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8000ca8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd90      	pop	{r4, r7, pc}

08000cb4 <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b20      	cmp	r3, #32
 8000cc8:	d13d      	bne.n	8000d46 <UARTTxDumpBuffer+0x92>
 8000cca:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <UARTTxDumpBuffer+0x9c>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d139      	bne.n	8000d46 <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <UARTTxDumpBuffer+0x9c>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	89da      	ldrh	r2, [r3, #14]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	899b      	ldrh	r3, [r3, #12]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d02d      	beq.n	8000d40 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	89da      	ldrh	r2, [r3, #14]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d906      	bls.n	8000cfe <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	89da      	ldrh	r2, [r3, #14]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	e005      	b.n	8000d0a <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	889a      	ldrh	r2, [r3, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6818      	ldr	r0, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	8992      	ldrh	r2, [r2, #12]
 8000d18:	4413      	add	r3, r2
 8000d1a:	89fa      	ldrh	r2, [r7, #14]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f003 fc97 	bl	8004650 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	899b      	ldrh	r3, [r3, #12]
 8000d26:	461a      	mov	r2, r3
 8000d28:	89fb      	ldrh	r3, [r7, #14]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	8892      	ldrh	r2, [r2, #4]
 8000d30:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d34:	fb02 f201 	mul.w	r2, r2, r1
 8000d38:	1a9b      	subs	r3, r3, r2
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <UARTTxDumpBuffer+0x9c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
	}
}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200000c2 	.word	0x200000c2

08000d54 <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	889b      	ldrh	r3, [r3, #4]
 8000d66:	88fa      	ldrh	r2, [r7, #6]
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	bf28      	it	cs
 8000d6c:	4613      	movcs	r3, r2
 8000d6e:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8000d70:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	889b      	ldrh	r3, [r3, #4]
 8000d76:	4619      	mov	r1, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	89db      	ldrh	r3, [r3, #14]
 8000d7c:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	bfa8      	it	ge
 8000d82:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8000d84:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	89d2      	ldrh	r2, [r2, #14]
 8000d8e:	4413      	add	r3, r2
 8000d90:	8aba      	ldrh	r2, [r7, #20]
 8000d92:	68b9      	ldr	r1, [r7, #8]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f004 fb7d 	bl	8005494 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	89db      	ldrh	r3, [r3, #14]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	8afb      	ldrh	r3, [r7, #22]
 8000da2:	4413      	add	r3, r2
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	8892      	ldrh	r2, [r2, #4]
 8000da8:	fb93 f1f2 	sdiv	r1, r3, r2
 8000dac:	fb02 f201 	mul.w	r2, r2, r1
 8000db0:	1a9b      	subs	r3, r3, r2
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8000db8:	8afa      	ldrh	r2, [r7, #22]
 8000dba:	8abb      	ldrh	r3, [r7, #20]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d00a      	beq.n	8000dd6 <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	6898      	ldr	r0, [r3, #8]
 8000dc4:	8abb      	ldrh	r3, [r7, #20]
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8000dca:	8afa      	ldrh	r2, [r7, #22]
 8000dcc:	8abb      	ldrh	r3, [r7, #20]
 8000dce:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	f004 fb5f 	bl	8005494 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f7ff ff6c 	bl	8000cb4 <UARTTxDumpBuffer>

}
 8000ddc:	bf00      	nop
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <UART_Protocol>:
void UART_Protocol(UARTStucrture *uart, int16_t dataIn)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	807b      	strh	r3, [r7, #2]
	if (State == Start_Mode)
 8000df0:	4bab      	ldr	r3, [pc, #684]	; (80010a0 <UART_Protocol+0x2bc>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d103      	bne.n	8000e00 <UART_Protocol+0x1c>
	{
		uint8_t N_Data = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	737b      	strb	r3, [r7, #13]
		uint8_t Data_List[] = {0, 0};
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	813b      	strh	r3, [r7, #8]
	}
	switch (State)
 8000e00:	4ba7      	ldr	r3, [pc, #668]	; (80010a0 <UART_Protocol+0x2bc>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	f200 81ab 	bhi.w	8001160 <UART_Protocol+0x37c>
 8000e0a:	a201      	add	r2, pc, #4	; (adr r2, 8000e10 <UART_Protocol+0x2c>)
 8000e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e10:	08000e21 	.word	0x08000e21
 8000e14:	08000f61 	.word	0x08000f61
 8000e18:	08000f71 	.word	0x08000f71
 8000e1c:	08001013 	.word	0x08001013
	{
	case Start_Mode:
		Mode = dataIn;
 8000e20:	887b      	ldrh	r3, [r7, #2]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b9f      	ldr	r3, [pc, #636]	; (80010a4 <UART_Protocol+0x2c0>)
 8000e26:	701a      	strb	r2, [r3, #0]

		switch (Mode)
 8000e28:	4b9e      	ldr	r3, [pc, #632]	; (80010a4 <UART_Protocol+0x2c0>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	3b91      	subs	r3, #145	; 0x91
 8000e2e:	2b0d      	cmp	r3, #13
 8000e30:	f200 8082 	bhi.w	8000f38 <UART_Protocol+0x154>
 8000e34:	a201      	add	r2, pc, #4	; (adr r2, 8000e3c <UART_Protocol+0x58>)
 8000e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3a:	bf00      	nop
 8000e3c:	08000e75 	.word	0x08000e75
 8000e40:	08000e83 	.word	0x08000e83
 8000e44:	08000e91 	.word	0x08000e91
 8000e48:	08000e9f 	.word	0x08000e9f
 8000e4c:	08000ead 	.word	0x08000ead
 8000e50:	08000ebb 	.word	0x08000ebb
 8000e54:	08000ec9 	.word	0x08000ec9
 8000e58:	08000ed7 	.word	0x08000ed7
 8000e5c:	08000ee5 	.word	0x08000ee5
 8000e60:	08000ef3 	.word	0x08000ef3
 8000e64:	08000f01 	.word	0x08000f01
 8000e68:	08000f0f 	.word	0x08000f0f
 8000e6c:	08000f1d 	.word	0x08000f1d
 8000e70:	08000f2b 	.word	0x08000f2b
		{
		case Test_Command:
			Frame = 2;
 8000e74:	4b8c      	ldr	r3, [pc, #560]	; (80010a8 <UART_Protocol+0x2c4>)
 8000e76:	2202      	movs	r2, #2
 8000e78:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 8000e7a:	4b89      	ldr	r3, [pc, #548]	; (80010a0 <UART_Protocol+0x2bc>)
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	701a      	strb	r2, [r3, #0]
			break;
 8000e80:	e06d      	b.n	8000f5e <UART_Protocol+0x17a>
		case Connect_MCU:
			Frame = 1;
 8000e82:	4b89      	ldr	r3, [pc, #548]	; (80010a8 <UART_Protocol+0x2c4>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8000e88:	4b85      	ldr	r3, [pc, #532]	; (80010a0 <UART_Protocol+0x2bc>)
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	701a      	strb	r2, [r3, #0]
			break;
 8000e8e:	e066      	b.n	8000f5e <UART_Protocol+0x17a>
		case Disconnect_MCU:
			Frame = 1;
 8000e90:	4b85      	ldr	r3, [pc, #532]	; (80010a8 <UART_Protocol+0x2c4>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8000e96:	4b82      	ldr	r3, [pc, #520]	; (80010a0 <UART_Protocol+0x2bc>)
 8000e98:	2203      	movs	r2, #3
 8000e9a:	701a      	strb	r2, [r3, #0]
			break;
 8000e9c:	e05f      	b.n	8000f5e <UART_Protocol+0x17a>
		case Velocity_Set:
			Frame = 2;
 8000e9e:	4b82      	ldr	r3, [pc, #520]	; (80010a8 <UART_Protocol+0x2c4>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 8000ea4:	4b7e      	ldr	r3, [pc, #504]	; (80010a0 <UART_Protocol+0x2bc>)
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	701a      	strb	r2, [r3, #0]
			break;
 8000eaa:	e058      	b.n	8000f5e <UART_Protocol+0x17a>
		case Position_Set:
			Frame = 2;
 8000eac:	4b7e      	ldr	r3, [pc, #504]	; (80010a8 <UART_Protocol+0x2c4>)
 8000eae:	2202      	movs	r2, #2
 8000eb0:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 8000eb2:	4b7b      	ldr	r3, [pc, #492]	; (80010a0 <UART_Protocol+0x2bc>)
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	701a      	strb	r2, [r3, #0]
			break;
 8000eb8:	e051      	b.n	8000f5e <UART_Protocol+0x17a>
		case Goal_1_Set:
			Frame = 2;
 8000eba:	4b7b      	ldr	r3, [pc, #492]	; (80010a8 <UART_Protocol+0x2c4>)
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 8000ec0:	4b77      	ldr	r3, [pc, #476]	; (80010a0 <UART_Protocol+0x2bc>)
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	701a      	strb	r2, [r3, #0]
			break;
 8000ec6:	e04a      	b.n	8000f5e <UART_Protocol+0x17a>
		case Goal_N_Set:
			Frame = 3;
 8000ec8:	4b77      	ldr	r3, [pc, #476]	; (80010a8 <UART_Protocol+0x2c4>)
 8000eca:	2203      	movs	r2, #3
 8000ecc:	701a      	strb	r2, [r3, #0]
			State = N_Station;
 8000ece:	4b74      	ldr	r3, [pc, #464]	; (80010a0 <UART_Protocol+0x2bc>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
			break;
 8000ed4:	e043      	b.n	8000f5e <UART_Protocol+0x17a>
		case Go_to_Goal:
			Frame = 1;
 8000ed6:	4b74      	ldr	r3, [pc, #464]	; (80010a8 <UART_Protocol+0x2c4>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8000edc:	4b70      	ldr	r3, [pc, #448]	; (80010a0 <UART_Protocol+0x2bc>)
 8000ede:	2203      	movs	r2, #3
 8000ee0:	701a      	strb	r2, [r3, #0]
			break;
 8000ee2:	e03c      	b.n	8000f5e <UART_Protocol+0x17a>
		case Station_Request:
			Frame = 1;
 8000ee4:	4b70      	ldr	r3, [pc, #448]	; (80010a8 <UART_Protocol+0x2c4>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8000eea:	4b6d      	ldr	r3, [pc, #436]	; (80010a0 <UART_Protocol+0x2bc>)
 8000eec:	2203      	movs	r2, #3
 8000eee:	701a      	strb	r2, [r3, #0]
			break;
 8000ef0:	e035      	b.n	8000f5e <UART_Protocol+0x17a>
		case Position_Request:
			Frame = 1;
 8000ef2:	4b6d      	ldr	r3, [pc, #436]	; (80010a8 <UART_Protocol+0x2c4>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8000ef8:	4b69      	ldr	r3, [pc, #420]	; (80010a0 <UART_Protocol+0x2bc>)
 8000efa:	2203      	movs	r2, #3
 8000efc:	701a      	strb	r2, [r3, #0]
			break;
 8000efe:	e02e      	b.n	8000f5e <UART_Protocol+0x17a>
		case Velocity_Request:
			Frame = 1;
 8000f00:	4b69      	ldr	r3, [pc, #420]	; (80010a8 <UART_Protocol+0x2c4>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8000f06:	4b66      	ldr	r3, [pc, #408]	; (80010a0 <UART_Protocol+0x2bc>)
 8000f08:	2203      	movs	r2, #3
 8000f0a:	701a      	strb	r2, [r3, #0]
			break;
 8000f0c:	e027      	b.n	8000f5e <UART_Protocol+0x17a>
		case Gripper_On:
			Frame = 1;
 8000f0e:	4b66      	ldr	r3, [pc, #408]	; (80010a8 <UART_Protocol+0x2c4>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8000f14:	4b62      	ldr	r3, [pc, #392]	; (80010a0 <UART_Protocol+0x2bc>)
 8000f16:	2203      	movs	r2, #3
 8000f18:	701a      	strb	r2, [r3, #0]
			break;
 8000f1a:	e020      	b.n	8000f5e <UART_Protocol+0x17a>
		case Gripper_Off:
			Frame = 1;
 8000f1c:	4b62      	ldr	r3, [pc, #392]	; (80010a8 <UART_Protocol+0x2c4>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8000f22:	4b5f      	ldr	r3, [pc, #380]	; (80010a0 <UART_Protocol+0x2bc>)
 8000f24:	2203      	movs	r2, #3
 8000f26:	701a      	strb	r2, [r3, #0]
			break;
 8000f28:	e019      	b.n	8000f5e <UART_Protocol+0x17a>
		case Home_Set:
			Frame = 1;
 8000f2a:	4b5f      	ldr	r3, [pc, #380]	; (80010a8 <UART_Protocol+0x2c4>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8000f30:	4b5b      	ldr	r3, [pc, #364]	; (80010a0 <UART_Protocol+0x2bc>)
 8000f32:	2203      	movs	r2, #3
 8000f34:	701a      	strb	r2, [r3, #0]
			break;
 8000f36:	e012      	b.n	8000f5e <UART_Protocol+0x17a>
		default:
			State = Start_Mode;
 8000f38:	4b59      	ldr	r3, [pc, #356]	; (80010a0 <UART_Protocol+0x2bc>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
			Mode = 144;
 8000f3e:	4b59      	ldr	r3, [pc, #356]	; (80010a4 <UART_Protocol+0x2c0>)
 8000f40:	2290      	movs	r2, #144	; 0x90
 8000f42:	701a      	strb	r2, [r3, #0]
			Frame = 0;
 8000f44:	4b58      	ldr	r3, [pc, #352]	; (80010a8 <UART_Protocol+0x2c4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
			Sum = 0;
 8000f4a:	4b58      	ldr	r3, [pc, #352]	; (80010ac <UART_Protocol+0x2c8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
			N = 0;
 8000f50:	4b57      	ldr	r3, [pc, #348]	; (80010b0 <UART_Protocol+0x2cc>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
			len = 0;
 8000f56:	4b57      	ldr	r3, [pc, #348]	; (80010b4 <UART_Protocol+0x2d0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
			break;
 8000f5c:	bf00      	nop
		break;
		}
		break;
 8000f5e:	e0ff      	b.n	8001160 <UART_Protocol+0x37c>
	case N_Station:
		N = dataIn;
 8000f60:	887b      	ldrh	r3, [r7, #2]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	4b52      	ldr	r3, [pc, #328]	; (80010b0 <UART_Protocol+0x2cc>)
 8000f66:	701a      	strb	r2, [r3, #0]
		Data_List[N];
		State = Data_Frame;
 8000f68:	4b4d      	ldr	r3, [pc, #308]	; (80010a0 <UART_Protocol+0x2bc>)
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	701a      	strb	r2, [r3, #0]
		break;
 8000f6e:	e0f7      	b.n	8001160 <UART_Protocol+0x37c>
	case Data_Frame:
		Data_List[N_Data] = dataIn;
 8000f70:	4b51      	ldr	r3, [pc, #324]	; (80010b8 <UART_Protocol+0x2d4>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	887b      	ldrh	r3, [r7, #2]
 8000f78:	b2d9      	uxtb	r1, r3
 8000f7a:	4b50      	ldr	r3, [pc, #320]	; (80010bc <UART_Protocol+0x2d8>)
 8000f7c:	5499      	strb	r1, [r3, r2]
		N_Data += 1;
 8000f7e:	4b4e      	ldr	r3, [pc, #312]	; (80010b8 <UART_Protocol+0x2d4>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b4c      	ldr	r3, [pc, #304]	; (80010b8 <UART_Protocol+0x2d4>)
 8000f88:	701a      	strb	r2, [r3, #0]
		switch (Mode)
 8000f8a:	4b46      	ldr	r3, [pc, #280]	; (80010a4 <UART_Protocol+0x2c0>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	3b91      	subs	r3, #145	; 0x91
 8000f90:	2b06      	cmp	r3, #6
 8000f92:	d838      	bhi.n	8001006 <UART_Protocol+0x222>
 8000f94:	a201      	add	r2, pc, #4	; (adr r2, 8000f9c <UART_Protocol+0x1b8>)
 8000f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9a:	bf00      	nop
 8000f9c:	08000fb9 	.word	0x08000fb9
 8000fa0:	08001007 	.word	0x08001007
 8000fa4:	08001007 	.word	0x08001007
 8000fa8:	08000fc7 	.word	0x08000fc7
 8000fac:	08000fd7 	.word	0x08000fd7
 8000fb0:	08000fe5 	.word	0x08000fe5
 8000fb4:	08000ff3 	.word	0x08000ff3
		{
		case Test_Command:
			Data_List[1] = 0;
 8000fb8:	4b40      	ldr	r3, [pc, #256]	; (80010bc <UART_Protocol+0x2d8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	705a      	strb	r2, [r3, #1]
			State = Check_Sum;
 8000fbe:	4b38      	ldr	r3, [pc, #224]	; (80010a0 <UART_Protocol+0x2bc>)
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	701a      	strb	r2, [r3, #0]
			break;
 8000fc4:	e024      	b.n	8001010 <UART_Protocol+0x22c>
		case Velocity_Set:
			if (N_Data == 2)
 8000fc6:	4b3c      	ldr	r3, [pc, #240]	; (80010b8 <UART_Protocol+0x2d4>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d11d      	bne.n	800100a <UART_Protocol+0x226>
			{
				State = Check_Sum;
 8000fce:	4b34      	ldr	r3, [pc, #208]	; (80010a0 <UART_Protocol+0x2bc>)
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000fd4:	e019      	b.n	800100a <UART_Protocol+0x226>
		case Position_Set:
			if (N_Data == 2)
 8000fd6:	4b38      	ldr	r3, [pc, #224]	; (80010b8 <UART_Protocol+0x2d4>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d102      	bne.n	8000fe4 <UART_Protocol+0x200>
			{
				State = Check_Sum;
 8000fde:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <UART_Protocol+0x2bc>)
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	701a      	strb	r2, [r3, #0]
			}
		case Goal_1_Set:
			if (N_Data == 2)
 8000fe4:	4b34      	ldr	r3, [pc, #208]	; (80010b8 <UART_Protocol+0x2d4>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d102      	bne.n	8000ff2 <UART_Protocol+0x20e>
			{
				State = Check_Sum;
 8000fec:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <UART_Protocol+0x2bc>)
 8000fee:	2203      	movs	r2, #3
 8000ff0:	701a      	strb	r2, [r3, #0]
			}
		case Goal_N_Set:
			if (N_Data == N)
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <UART_Protocol+0x2d4>)
 8000ff4:	781a      	ldrb	r2, [r3, #0]
 8000ff6:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <UART_Protocol+0x2cc>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d107      	bne.n	800100e <UART_Protocol+0x22a>
			{
				State = Check_Sum;
 8000ffe:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <UART_Protocol+0x2bc>)
 8001000:	2203      	movs	r2, #3
 8001002:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001004:	e003      	b.n	800100e <UART_Protocol+0x22a>
		default:
			break;
 8001006:	bf00      	nop
 8001008:	e0aa      	b.n	8001160 <UART_Protocol+0x37c>
			break;
 800100a:	bf00      	nop
 800100c:	e0a8      	b.n	8001160 <UART_Protocol+0x37c>
			break;
 800100e:	bf00      	nop
		break;
		}

		break;
 8001010:	e0a6      	b.n	8001160 <UART_Protocol+0x37c>
	case Check_Sum:
		Sum = dataIn;
 8001012:	887b      	ldrh	r3, [r7, #2]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <UART_Protocol+0x2c8>)
 8001018:	701a      	strb	r2, [r3, #0]
		uint8_t Data_Sum = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
		switch (Frame)
 800101e:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <UART_Protocol+0x2c4>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b03      	cmp	r3, #3
 8001024:	d062      	beq.n	80010ec <UART_Protocol+0x308>
 8001026:	2b03      	cmp	r3, #3
 8001028:	f300 8095 	bgt.w	8001156 <UART_Protocol+0x372>
 800102c:	2b01      	cmp	r3, #1
 800102e:	d002      	beq.n	8001036 <UART_Protocol+0x252>
 8001030:	2b02      	cmp	r3, #2
 8001032:	d021      	beq.n	8001078 <UART_Protocol+0x294>
				len = 0;
				N_Data = 0;
			}
			break;
		default:
			break;
 8001034:	e08f      	b.n	8001156 <UART_Protocol+0x372>
			if (Sum == (uint8_t)~Mode)
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <UART_Protocol+0x2c0>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	43db      	mvns	r3, r3
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <UART_Protocol+0x2c8>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	429a      	cmp	r2, r3
 8001044:	d102      	bne.n	800104c <UART_Protocol+0x268>
				UART_Do_Command();
 8001046:	f000 f89f 	bl	8001188 <UART_Do_Command>
			break;
 800104a:	e085      	b.n	8001158 <UART_Protocol+0x374>
				State = Start_Mode;
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <UART_Protocol+0x2bc>)
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
				Mode = 144;
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <UART_Protocol+0x2c0>)
 8001054:	2290      	movs	r2, #144	; 0x90
 8001056:	701a      	strb	r2, [r3, #0]
				Frame = 0;
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <UART_Protocol+0x2c4>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
				Sum = 0;
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <UART_Protocol+0x2c8>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
				N = 0;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <UART_Protocol+0x2cc>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
				len = 0;
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <UART_Protocol+0x2d0>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
				N_Data = 0;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <UART_Protocol+0x2d4>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
			break;
 8001076:	e06f      	b.n	8001158 <UART_Protocol+0x374>
			if (Sum == (uint8_t)~(Mode+Data_List[0]+Data_List[1]))
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <UART_Protocol+0x2d8>)
 800107a:	781a      	ldrb	r2, [r3, #0]
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <UART_Protocol+0x2c0>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4413      	add	r3, r2
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <UART_Protocol+0x2d8>)
 8001086:	785b      	ldrb	r3, [r3, #1]
 8001088:	4413      	add	r3, r2
 800108a:	b2db      	uxtb	r3, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <UART_Protocol+0x2c8>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d113      	bne.n	80010c0 <UART_Protocol+0x2dc>
				UART_Do_Command();
 8001098:	f000 f876 	bl	8001188 <UART_Do_Command>
			break;
 800109c:	e05c      	b.n	8001158 <UART_Protocol+0x374>
 800109e:	bf00      	nop
 80010a0:	200000bc 	.word	0x200000bc
 80010a4:	20000002 	.word	0x20000002
 80010a8:	200001d0 	.word	0x200001d0
 80010ac:	200002c4 	.word	0x200002c4
 80010b0:	200000d0 	.word	0x200000d0
 80010b4:	20000356 	.word	0x20000356
 80010b8:	200000bd 	.word	0x200000bd
 80010bc:	200000c0 	.word	0x200000c0
				State = Start_Mode;
 80010c0:	4b29      	ldr	r3, [pc, #164]	; (8001168 <UART_Protocol+0x384>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
				Mode = 144;
 80010c6:	4b29      	ldr	r3, [pc, #164]	; (800116c <UART_Protocol+0x388>)
 80010c8:	2290      	movs	r2, #144	; 0x90
 80010ca:	701a      	strb	r2, [r3, #0]
				Frame = 0;
 80010cc:	4b28      	ldr	r3, [pc, #160]	; (8001170 <UART_Protocol+0x38c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
				Sum = 0;
 80010d2:	4b28      	ldr	r3, [pc, #160]	; (8001174 <UART_Protocol+0x390>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
				N = 0;
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <UART_Protocol+0x394>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
				len = 0;
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <UART_Protocol+0x398>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
				N_Data = 0;
 80010e4:	4b26      	ldr	r3, [pc, #152]	; (8001180 <UART_Protocol+0x39c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
			break;
 80010ea:	e035      	b.n	8001158 <UART_Protocol+0x374>
			for (uint8_t i=0; i<N_Data; i++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	73bb      	strb	r3, [r7, #14]
 80010f0:	e008      	b.n	8001104 <UART_Protocol+0x320>
				Data_Sum += Data_List[i];
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	4a23      	ldr	r2, [pc, #140]	; (8001184 <UART_Protocol+0x3a0>)
 80010f6:	5cd2      	ldrb	r2, [r2, r3]
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	4413      	add	r3, r2
 80010fc:	73fb      	strb	r3, [r7, #15]
			for (uint8_t i=0; i<N_Data; i++)
 80010fe:	7bbb      	ldrb	r3, [r7, #14]
 8001100:	3301      	adds	r3, #1
 8001102:	73bb      	strb	r3, [r7, #14]
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <UART_Protocol+0x39c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	7bba      	ldrb	r2, [r7, #14]
 800110a:	429a      	cmp	r2, r3
 800110c:	d3f1      	bcc.n	80010f2 <UART_Protocol+0x30e>
			if (Sum == (uint8_t)~(Mode+Data_Sum))
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <UART_Protocol+0x388>)
 8001110:	781a      	ldrb	r2, [r3, #0]
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	4413      	add	r3, r2
 8001116:	b2db      	uxtb	r3, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b15      	ldr	r3, [pc, #84]	; (8001174 <UART_Protocol+0x390>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d102      	bne.n	800112a <UART_Protocol+0x346>
				UART_Do_Command();
 8001124:	f000 f830 	bl	8001188 <UART_Do_Command>
			break;
 8001128:	e016      	b.n	8001158 <UART_Protocol+0x374>
				State = Start_Mode;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <UART_Protocol+0x384>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
				Mode = 144;
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <UART_Protocol+0x388>)
 8001132:	2290      	movs	r2, #144	; 0x90
 8001134:	701a      	strb	r2, [r3, #0]
				Frame = 0;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <UART_Protocol+0x38c>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
				Sum = 0;
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <UART_Protocol+0x390>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
				N = 0;
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <UART_Protocol+0x394>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
				len = 0;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <UART_Protocol+0x398>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
				N_Data = 0;
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <UART_Protocol+0x39c>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
			break;
 8001154:	e000      	b.n	8001158 <UART_Protocol+0x374>
			break;
 8001156:	bf00      	nop
		break;
		}

		State = Start_Mode;
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <UART_Protocol+0x384>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
		break;
 800115e:	bf00      	nop

	break;
	}

}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200000bc 	.word	0x200000bc
 800116c:	20000002 	.word	0x20000002
 8001170:	200001d0 	.word	0x200001d0
 8001174:	200002c4 	.word	0x200002c4
 8001178:	200000d0 	.word	0x200000d0
 800117c:	20000356 	.word	0x20000356
 8001180:	200000bd 	.word	0x200000bd
 8001184:	200000c0 	.word	0x200000c0

08001188 <UART_Do_Command>:
void UART_Do_Command()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	uint8_t Answer[] = {0, 0, 0};
 800118e:	4a31      	ldr	r2, [pc, #196]	; (8001254 <UART_Do_Command+0xcc>)
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	4611      	mov	r1, r2
 8001196:	8019      	strh	r1, [r3, #0]
 8001198:	3302      	adds	r3, #2
 800119a:	0c12      	lsrs	r2, r2, #16
 800119c:	701a      	strb	r2, [r3, #0]
	Answer[0] = Mode;
 800119e:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <UART_Do_Command+0xd0>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	713b      	strb	r3, [r7, #4]
	UARTTxWrite(&UART2, UART_Ack1, 2);
 80011a4:	2202      	movs	r2, #2
 80011a6:	492d      	ldr	r1, [pc, #180]	; (800125c <UART_Do_Command+0xd4>)
 80011a8:	482d      	ldr	r0, [pc, #180]	; (8001260 <UART_Do_Command+0xd8>)
 80011aa:	f7ff fdd3 	bl	8000d54 <UARTTxWrite>
	HAL_Delay(1);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f000 fc04 	bl	80019bc <HAL_Delay>

	switch (Mode)
 80011b4:	4b28      	ldr	r3, [pc, #160]	; (8001258 <UART_Do_Command+0xd0>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	3b91      	subs	r3, #145	; 0x91
 80011ba:	2b0d      	cmp	r3, #13
 80011bc:	d842      	bhi.n	8001244 <UART_Do_Command+0xbc>
 80011be:	a201      	add	r2, pc, #4	; (adr r2, 80011c4 <UART_Do_Command+0x3c>)
 80011c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c4:	080011fd 	.word	0x080011fd
 80011c8:	0800121d 	.word	0x0800121d
 80011cc:	08001225 	.word	0x08001225
 80011d0:	08001245 	.word	0x08001245
 80011d4:	08001245 	.word	0x08001245
 80011d8:	08001245 	.word	0x08001245
 80011dc:	08001245 	.word	0x08001245
 80011e0:	0800122d 	.word	0x0800122d
 80011e4:	08001245 	.word	0x08001245
 80011e8:	08001245 	.word	0x08001245
 80011ec:	08001245 	.word	0x08001245
 80011f0:	08001235 	.word	0x08001235
 80011f4:	0800123d 	.word	0x0800123d
 80011f8:	08001245 	.word	0x08001245
	{
	case Test_Command: //F2
		Answer[1] = Data_List[0];
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <UART_Do_Command+0xdc>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	717b      	strb	r3, [r7, #5]
		Answer[2] = Sum;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <UART_Do_Command+0xe0>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	71bb      	strb	r3, [r7, #6]
		UARTTxWrite(&UART2, Answer, 3);
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2203      	movs	r2, #3
 800120c:	4619      	mov	r1, r3
 800120e:	4814      	ldr	r0, [pc, #80]	; (8001260 <UART_Do_Command+0xd8>)
 8001210:	f7ff fda0 	bl	8000d54 <UARTTxWrite>
		HAL_Delay(1);
 8001214:	2001      	movs	r0, #1
 8001216:	f000 fbd1 	bl	80019bc <HAL_Delay>
		break;
 800121a:	e013      	b.n	8001244 <UART_Do_Command+0xbc>
	case Connect_MCU: //F1
		Connected = 1;
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <UART_Do_Command+0xe4>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
		break;
 8001222:	e00f      	b.n	8001244 <UART_Do_Command+0xbc>
	case Disconnect_MCU: //F1
		Connected = 0;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <UART_Do_Command+0xe4>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
		break;
 800122a:	e00b      	b.n	8001244 <UART_Do_Command+0xbc>
	case Goal_1_Set: //F2
		break;
	case Goal_N_Set: //F3
		break;
	case Go_to_Goal: //F2
		GO = 1;
 800122c:	4b10      	ldr	r3, [pc, #64]	; (8001270 <UART_Do_Command+0xe8>)
 800122e:	2201      	movs	r2, #1
 8001230:	801a      	strh	r2, [r3, #0]
		break;
 8001232:	e007      	b.n	8001244 <UART_Do_Command+0xbc>
	case Position_Request: //F1
		break;
	case Velocity_Request: //F1
		break;
	case Gripper_On: //F1
		Effector_On = 1;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <UART_Do_Command+0xec>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
		break;
 800123a:	e003      	b.n	8001244 <UART_Do_Command+0xbc>
	case Gripper_Off: //F1
		Effector_On = 0;
 800123c:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <UART_Do_Command+0xec>)
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
		break;
 8001242:	bf00      	nop
	case Home_Set: //F1
		break;
	break;
	}

	len = 0;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <UART_Do_Command+0xf0>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]

}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	080055e8 	.word	0x080055e8
 8001258:	20000002 	.word	0x20000002
 800125c:	20000000 	.word	0x20000000
 8001260:	200000a4 	.word	0x200000a4
 8001264:	200000c0 	.word	0x200000c0
 8001268:	200002c4 	.word	0x200002c4
 800126c:	20000094 	.word	0x20000094
 8001270:	200000a0 	.word	0x200000a0
 8001274:	20000095 	.word	0x20000095
 8001278:	20000356 	.word	0x20000356

0800127c <Decimal2High>:
uint8_t Decimal2High(uint16_t integer)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)((integer>>8) & 0xff);
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	b29b      	uxth	r3, r3
 800128c:	b2db      	uxtb	r3, r3
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <Decimal2Low>:
uint8_t Decimal2Low(uint16_t integer)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)(integer & 0xff);
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	b2db      	uxtb	r3, r3
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HighLow2Decimal>:
uint16_t HighLow2Decimal(uint8_t high_byte, uint8_t low_byte)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	460a      	mov	r2, r1
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	4613      	mov	r3, r2
 80012c2:	71bb      	strb	r3, [r7, #6]
	uint16_t high = (high_byte & 0xff) <<8;
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	81fb      	strh	r3, [r7, #14]
	uint16_t low = low_byte & 0xff;
 80012cc:	79bb      	ldrb	r3, [r7, #6]
 80012ce:	81bb      	strh	r3, [r7, #12]
	return high|low;
 80012d0:	89fa      	ldrh	r2, [r7, #14]
 80012d2:	89bb      	ldrh	r3, [r7, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b29b      	uxth	r3, r3
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012e4:	b4b0      	push	{r4, r5, r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a09      	ldr	r2, [pc, #36]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d109      	bne.n	8001308 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f112 34ff 	adds.w	r4, r2, #4294967295
 80012fe:	f143 0500 	adc.w	r5, r3, #0
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001304:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bcb0      	pop	{r4, r5, r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	200002c8 	.word	0x200002c8
 8001318:	20000098 	.word	0x20000098

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001324:	e7fe      	b.n	8001324 <Error_Handler+0x8>
	...

08001328 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_MspInit+0x4c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <HAL_MspInit+0x4c>)
 8001338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133c:	6453      	str	r3, [r2, #68]	; 0x44
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_MspInit+0x4c>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_MspInit+0x4c>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <HAL_MspInit+0x4c>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_MspInit+0x4c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001366:	2007      	movs	r0, #7
 8001368:	f000 fc1c 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40023800 	.word	0x40023800

08001378 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a19      	ldr	r2, [pc, #100]	; (80013fc <HAL_I2C_MspInit+0x84>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d12c      	bne.n	80013f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_I2C_MspInit+0x88>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a17      	ldr	r2, [pc, #92]	; (8001400 <HAL_I2C_MspInit+0x88>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_I2C_MspInit+0x88>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013bc:	2312      	movs	r3, #18
 80013be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013c8:	2304      	movs	r3, #4
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	480c      	ldr	r0, [pc, #48]	; (8001404 <HAL_I2C_MspInit+0x8c>)
 80013d4:	f001 f82a 	bl	800242c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_I2C_MspInit+0x88>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <HAL_I2C_MspInit+0x88>)
 80013e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013e6:	6413      	str	r3, [r2, #64]	; 0x40
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_I2C_MspInit+0x88>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013f4:	bf00      	nop
 80013f6:	3728      	adds	r7, #40	; 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40005400 	.word	0x40005400
 8001400:	40023800 	.word	0x40023800
 8001404:	40020400 	.word	0x40020400

08001408 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a19      	ldr	r2, [pc, #100]	; (800148c <HAL_TIM_Encoder_MspInit+0x84>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d12c      	bne.n	8001484 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <HAL_TIM_Encoder_MspInit+0x88>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	4a17      	ldr	r2, [pc, #92]	; (8001490 <HAL_TIM_Encoder_MspInit+0x88>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6453      	str	r3, [r2, #68]	; 0x44
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_TIM_Encoder_MspInit+0x88>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_TIM_Encoder_MspInit+0x88>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a10      	ldr	r2, [pc, #64]	; (8001490 <HAL_TIM_Encoder_MspInit+0x88>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_TIM_Encoder_MspInit+0x88>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_B_Pin|Encoder_A_Pin;
 8001462:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001474:	2301      	movs	r3, #1
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001480:	f000 ffd4 	bl	800242c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001484:	bf00      	nop
 8001486:	3728      	adds	r7, #40	; 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40010000 	.word	0x40010000
 8001490:	40023800 	.word	0x40023800
 8001494:	40020000 	.word	0x40020000

08001498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014a8:	d116      	bne.n	80014d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_TIM_Base_MspInit+0xa8>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a23      	ldr	r2, [pc, #140]	; (8001540 <HAL_TIM_Base_MspInit+0xa8>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_TIM_Base_MspInit+0xa8>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	201c      	movs	r0, #28
 80014cc:	f000 fb75 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014d0:	201c      	movs	r0, #28
 80014d2:	f000 fb8e 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80014d6:	e02e      	b.n	8001536 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a19      	ldr	r2, [pc, #100]	; (8001544 <HAL_TIM_Base_MspInit+0xac>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d10e      	bne.n	8001500 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <HAL_TIM_Base_MspInit+0xa8>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a15      	ldr	r2, [pc, #84]	; (8001540 <HAL_TIM_Base_MspInit+0xa8>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <HAL_TIM_Base_MspInit+0xa8>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
}
 80014fe:	e01a      	b.n	8001536 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a10      	ldr	r2, [pc, #64]	; (8001548 <HAL_TIM_Base_MspInit+0xb0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d115      	bne.n	8001536 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_TIM_Base_MspInit+0xa8>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <HAL_TIM_Base_MspInit+0xa8>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_TIM_Base_MspInit+0xa8>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	201e      	movs	r0, #30
 800152c:	f000 fb45 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001530:	201e      	movs	r0, #30
 8001532:	f000 fb5e 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	40000400 	.word	0x40000400
 8001548:	40000800 	.word	0x40000800

0800154c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <HAL_TIM_MspPostInit+0x68>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d11d      	bne.n	80015aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_TIM_MspPostInit+0x6c>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <HAL_TIM_MspPostInit+0x6c>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_TIM_MspPostInit+0x6c>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800158a:	2302      	movs	r3, #2
 800158c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800159a:	2302      	movs	r3, #2
 800159c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <HAL_TIM_MspPostInit+0x70>)
 80015a6:	f000 ff41 	bl	800242c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40000400 	.word	0x40000400
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020400 	.word	0x40020400

080015c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a4c      	ldr	r2, [pc, #304]	; (8001710 <HAL_UART_MspInit+0x150>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	f040 8091 	bne.w	8001706 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <HAL_UART_MspInit+0x154>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	4a49      	ldr	r2, [pc, #292]	; (8001714 <HAL_UART_MspInit+0x154>)
 80015ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f2:	6413      	str	r3, [r2, #64]	; 0x40
 80015f4:	4b47      	ldr	r3, [pc, #284]	; (8001714 <HAL_UART_MspInit+0x154>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	4b43      	ldr	r3, [pc, #268]	; (8001714 <HAL_UART_MspInit+0x154>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001608:	4a42      	ldr	r2, [pc, #264]	; (8001714 <HAL_UART_MspInit+0x154>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6313      	str	r3, [r2, #48]	; 0x30
 8001610:	4b40      	ldr	r3, [pc, #256]	; (8001714 <HAL_UART_MspInit+0x154>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800161c:	230c      	movs	r3, #12
 800161e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800162c:	2307      	movs	r3, #7
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	4838      	ldr	r0, [pc, #224]	; (8001718 <HAL_UART_MspInit+0x158>)
 8001638:	f000 fef8 	bl	800242c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800163c:	4b37      	ldr	r3, [pc, #220]	; (800171c <HAL_UART_MspInit+0x15c>)
 800163e:	4a38      	ldr	r2, [pc, #224]	; (8001720 <HAL_UART_MspInit+0x160>)
 8001640:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001642:	4b36      	ldr	r3, [pc, #216]	; (800171c <HAL_UART_MspInit+0x15c>)
 8001644:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001648:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800164a:	4b34      	ldr	r3, [pc, #208]	; (800171c <HAL_UART_MspInit+0x15c>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001650:	4b32      	ldr	r3, [pc, #200]	; (800171c <HAL_UART_MspInit+0x15c>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001656:	4b31      	ldr	r3, [pc, #196]	; (800171c <HAL_UART_MspInit+0x15c>)
 8001658:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800165c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800165e:	4b2f      	ldr	r3, [pc, #188]	; (800171c <HAL_UART_MspInit+0x15c>)
 8001660:	2200      	movs	r2, #0
 8001662:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_UART_MspInit+0x15c>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800166a:	4b2c      	ldr	r3, [pc, #176]	; (800171c <HAL_UART_MspInit+0x15c>)
 800166c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001670:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <HAL_UART_MspInit+0x15c>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <HAL_UART_MspInit+0x15c>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800167e:	4827      	ldr	r0, [pc, #156]	; (800171c <HAL_UART_MspInit+0x15c>)
 8001680:	f000 fad2 	bl	8001c28 <HAL_DMA_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800168a:	f7ff fe47 	bl	800131c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a22      	ldr	r2, [pc, #136]	; (800171c <HAL_UART_MspInit+0x15c>)
 8001692:	639a      	str	r2, [r3, #56]	; 0x38
 8001694:	4a21      	ldr	r2, [pc, #132]	; (800171c <HAL_UART_MspInit+0x15c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <HAL_UART_MspInit+0x164>)
 800169c:	4a22      	ldr	r2, [pc, #136]	; (8001728 <HAL_UART_MspInit+0x168>)
 800169e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80016a0:	4b20      	ldr	r3, [pc, #128]	; (8001724 <HAL_UART_MspInit+0x164>)
 80016a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <HAL_UART_MspInit+0x164>)
 80016aa:	2240      	movs	r2, #64	; 0x40
 80016ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ae:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <HAL_UART_MspInit+0x164>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <HAL_UART_MspInit+0x164>)
 80016b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ba:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016bc:	4b19      	ldr	r3, [pc, #100]	; (8001724 <HAL_UART_MspInit+0x164>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <HAL_UART_MspInit+0x164>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80016c8:	4b16      	ldr	r3, [pc, #88]	; (8001724 <HAL_UART_MspInit+0x164>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_UART_MspInit+0x164>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <HAL_UART_MspInit+0x164>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80016da:	4812      	ldr	r0, [pc, #72]	; (8001724 <HAL_UART_MspInit+0x164>)
 80016dc:	f000 faa4 	bl	8001c28 <HAL_DMA_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80016e6:	f7ff fe19 	bl	800131c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <HAL_UART_MspInit+0x164>)
 80016ee:	635a      	str	r2, [r3, #52]	; 0x34
 80016f0:	4a0c      	ldr	r2, [pc, #48]	; (8001724 <HAL_UART_MspInit+0x164>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	2026      	movs	r0, #38	; 0x26
 80016fc:	f000 fa5d 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001700:	2026      	movs	r0, #38	; 0x26
 8001702:	f000 fa76 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	3728      	adds	r7, #40	; 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40004400 	.word	0x40004400
 8001714:	40023800 	.word	0x40023800
 8001718:	40020000 	.word	0x40020000
 800171c:	200000d4 	.word	0x200000d4
 8001720:	40026088 	.word	0x40026088
 8001724:	2000021c 	.word	0x2000021c
 8001728:	400260a0 	.word	0x400260a0

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <NMI_Handler+0x4>

08001732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <HardFault_Handler+0x4>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <MemManage_Handler+0x4>

0800173e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <UsageFault_Handler+0x4>

0800174a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001778:	f000 f900 	bl	800197c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <DMA1_Stream5_IRQHandler+0x10>)
 8001786:	f000 fbe7 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200000d4 	.word	0x200000d4

08001794 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <DMA1_Stream6_IRQHandler+0x10>)
 800179a:	f000 fbdd 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2000021c 	.word	0x2000021c

080017a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <TIM2_IRQHandler+0x10>)
 80017ae:	f002 f901 	bl	80039b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200002c8 	.word	0x200002c8

080017bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <TIM4_IRQHandler+0x10>)
 80017c2:	f002 f8f7 	bl	80039b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000134 	.word	0x20000134

080017d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <USART2_IRQHandler+0x10>)
 80017d6:	f002 ffd7 	bl	8004788 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000310 	.word	0x20000310

080017e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80017e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017ec:	f000 ffbc 	bl	8002768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017fc:	4a14      	ldr	r2, [pc, #80]	; (8001850 <_sbrk+0x5c>)
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <_sbrk+0x60>)
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <_sbrk+0x64>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <_sbrk+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001824:	f003 fe0c 	bl	8005440 <__errno>
 8001828:	4603      	mov	r3, r0
 800182a:	220c      	movs	r2, #12
 800182c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	e009      	b.n	8001848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <_sbrk+0x64>)
 8001844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20020000 	.word	0x20020000
 8001854:	00000400 	.word	0x00000400
 8001858:	200000c4 	.word	0x200000c4
 800185c:	20000370 	.word	0x20000370

08001860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <SystemInit+0x20>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <SystemInit+0x20>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800188a:	490e      	ldr	r1, [pc, #56]	; (80018c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800188c:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018a0:	4c0b      	ldr	r4, [pc, #44]	; (80018d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018ae:	f7ff ffd7 	bl	8001860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b2:	f003 fdcb 	bl	800544c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b6:	f7fe fe0b 	bl	80004d0 <main>
  bx  lr    
 80018ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80018c8:	0800561c 	.word	0x0800561c
  ldr r2, =_sbss
 80018cc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80018d0:	2000036c 	.word	0x2000036c

080018d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d4:	e7fe      	b.n	80018d4 <ADC_IRQHandler>
	...

080018d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_Init+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <HAL_Init+0x40>)
 80018e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_Init+0x40>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <HAL_Init+0x40>)
 80018ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <HAL_Init+0x40>)
 80018fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001900:	2003      	movs	r0, #3
 8001902:	f000 f94f 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001906:	2000      	movs	r0, #0
 8001908:	f000 f808 	bl	800191c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800190c:	f7ff fd0c 	bl	8001328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023c00 	.word	0x40023c00

0800191c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_InitTick+0x54>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_InitTick+0x58>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
 800192e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001932:	fbb3 f3f1 	udiv	r3, r3, r1
 8001936:	fbb2 f3f3 	udiv	r3, r2, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f967 	bl	8001c0e <HAL_SYSTICK_Config>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e00e      	b.n	8001968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b0f      	cmp	r3, #15
 800194e:	d80a      	bhi.n	8001966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001950:	2200      	movs	r2, #0
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f000 f92f 	bl	8001bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800195c:	4a06      	ldr	r2, [pc, #24]	; (8001978 <HAL_InitTick+0x5c>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	e000      	b.n	8001968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000004 	.word	0x20000004
 8001974:	2000000c 	.word	0x2000000c
 8001978:	20000008 	.word	0x20000008

0800197c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_IncTick+0x20>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_IncTick+0x24>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4413      	add	r3, r2
 800198c:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <HAL_IncTick+0x24>)
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	2000000c 	.word	0x2000000c
 80019a0:	20000358 	.word	0x20000358

080019a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return uwTick;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <HAL_GetTick+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000358 	.word	0x20000358

080019bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c4:	f7ff ffee 	bl	80019a4 <HAL_GetTick>
 80019c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d4:	d005      	beq.n	80019e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_Delay+0x44>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019e2:	bf00      	nop
 80019e4:	f7ff ffde 	bl	80019a4 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d8f7      	bhi.n	80019e4 <HAL_Delay+0x28>
  {
  }
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000000c 	.word	0x2000000c

08001a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a20:	4013      	ands	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a36:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	60d3      	str	r3, [r2, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <__NVIC_GetPriorityGrouping+0x18>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	0a1b      	lsrs	r3, r3, #8
 8001a56:	f003 0307 	and.w	r3, r3, #7
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	db0b      	blt.n	8001a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	f003 021f 	and.w	r2, r3, #31
 8001a80:	4907      	ldr	r1, [pc, #28]	; (8001aa0 <__NVIC_EnableIRQ+0x38>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	2001      	movs	r0, #1
 8001a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000e100 	.word	0xe000e100

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	; (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	; (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f7ff ff8e 	bl	8001aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff29 	bl	8001a04 <__NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff3e 	bl	8001a4c <__NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff8e 	bl	8001af8 <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5d 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff31 	bl	8001a68 <__NVIC_EnableIRQ>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffa2 	bl	8001b60 <SysTick_Config>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c34:	f7ff feb6 	bl	80019a4 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e099      	b.n	8001d78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c64:	e00f      	b.n	8001c86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c66:	f7ff fe9d 	bl	80019a4 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	d908      	bls.n	8001c86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2220      	movs	r2, #32
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e078      	b.n	8001d78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1e8      	bne.n	8001c66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <HAL_DMA_Init+0x158>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d107      	bne.n	8001cf0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f023 0307 	bic.w	r3, r3, #7
 8001d06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d117      	bne.n	8001d4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00e      	beq.n	8001d4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 fb01 	bl	8002334 <DMA_CheckFifoParam>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2240      	movs	r2, #64	; 0x40
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d46:	2301      	movs	r3, #1
 8001d48:	e016      	b.n	8001d78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 fab8 	bl	80022c8 <DMA_CalcBaseAndBitshift>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	223f      	movs	r2, #63	; 0x3f
 8001d62:	409a      	lsls	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	f010803f 	.word	0xf010803f

08001d84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_DMA_Start_IT+0x26>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e040      	b.n	8001e2c <HAL_DMA_Start_IT+0xa8>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d12f      	bne.n	8001e1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 fa4a 	bl	800226c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ddc:	223f      	movs	r2, #63	; 0x3f
 8001dde:	409a      	lsls	r2, r3
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0216 	orr.w	r2, r2, #22
 8001df2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0208 	orr.w	r2, r2, #8
 8001e0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e005      	b.n	8001e2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e26:	2302      	movs	r3, #2
 8001e28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e42:	f7ff fdaf 	bl	80019a4 <HAL_GetTick>
 8001e46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d008      	beq.n	8001e66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e052      	b.n	8001f0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0216 	bic.w	r2, r2, #22
 8001e74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d103      	bne.n	8001e96 <HAL_DMA_Abort+0x62>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d007      	beq.n	8001ea6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0208 	bic.w	r2, r2, #8
 8001ea4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0201 	bic.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb6:	e013      	b.n	8001ee0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eb8:	f7ff fd74 	bl	80019a4 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b05      	cmp	r3, #5
 8001ec4:	d90c      	bls.n	8001ee0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e015      	b.n	8001f0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1e4      	bne.n	8001eb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef2:	223f      	movs	r2, #63	; 0x3f
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d004      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2280      	movs	r2, #128	; 0x80
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00c      	b.n	8001f4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2205      	movs	r2, #5
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0201 	bic.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f64:	4b92      	ldr	r3, [pc, #584]	; (80021b0 <HAL_DMA_IRQHandler+0x258>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a92      	ldr	r2, [pc, #584]	; (80021b4 <HAL_DMA_IRQHandler+0x25c>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	0a9b      	lsrs	r3, r3, #10
 8001f70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f82:	2208      	movs	r2, #8
 8001f84:	409a      	lsls	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d01a      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0204 	bic.w	r2, r2, #4
 8001faa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbc:	f043 0201 	orr.w	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	2201      	movs	r2, #1
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d012      	beq.n	8001ffa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	f043 0202 	orr.w	r2, r3, #2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffe:	2204      	movs	r2, #4
 8002000:	409a      	lsls	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4013      	ands	r3, r2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d012      	beq.n	8002030 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00b      	beq.n	8002030 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	2204      	movs	r2, #4
 800201e:	409a      	lsls	r2, r3
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	f043 0204 	orr.w	r2, r3, #4
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002034:	2210      	movs	r2, #16
 8002036:	409a      	lsls	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d043      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d03c      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	2210      	movs	r2, #16
 8002054:	409a      	lsls	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d018      	beq.n	800209a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d108      	bne.n	8002088 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d024      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	4798      	blx	r3
 8002086:	e01f      	b.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01b      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
 8002098:	e016      	b.n	80020c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d107      	bne.n	80020b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0208 	bic.w	r2, r2, #8
 80020b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020cc:	2220      	movs	r2, #32
 80020ce:	409a      	lsls	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 808e 	beq.w	80021f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 8086 	beq.w	80021f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	2220      	movs	r2, #32
 80020f0:	409a      	lsls	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d136      	bne.n	8002170 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0216 	bic.w	r2, r2, #22
 8002110:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002120:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <HAL_DMA_IRQHandler+0x1da>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0208 	bic.w	r2, r2, #8
 8002140:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	223f      	movs	r2, #63	; 0x3f
 8002148:	409a      	lsls	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002162:	2b00      	cmp	r3, #0
 8002164:	d07d      	beq.n	8002262 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	4798      	blx	r3
        }
        return;
 800216e:	e078      	b.n	8002262 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d01c      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d108      	bne.n	800219e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002190:	2b00      	cmp	r3, #0
 8002192:	d030      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4798      	blx	r3
 800219c:	e02b      	b.n	80021f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d027      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	4798      	blx	r3
 80021ae:	e022      	b.n	80021f6 <HAL_DMA_IRQHandler+0x29e>
 80021b0:	20000004 	.word	0x20000004
 80021b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10f      	bne.n	80021e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0210 	bic.w	r2, r2, #16
 80021d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d032      	beq.n	8002264 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d022      	beq.n	8002250 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2205      	movs	r2, #5
 800220e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0201 	bic.w	r2, r2, #1
 8002220:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	3301      	adds	r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	429a      	cmp	r2, r3
 800222c:	d307      	bcc.n	800223e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f2      	bne.n	8002222 <HAL_DMA_IRQHandler+0x2ca>
 800223c:	e000      	b.n	8002240 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800223e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	4798      	blx	r3
 8002260:	e000      	b.n	8002264 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002262:	bf00      	nop
    }
  }
}
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop

0800226c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002288:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b40      	cmp	r3, #64	; 0x40
 8002298:	d108      	bne.n	80022ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022aa:	e007      	b.n	80022bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	60da      	str	r2, [r3, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	3b10      	subs	r3, #16
 80022d8:	4a14      	ldr	r2, [pc, #80]	; (800232c <DMA_CalcBaseAndBitshift+0x64>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	091b      	lsrs	r3, r3, #4
 80022e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022e2:	4a13      	ldr	r2, [pc, #76]	; (8002330 <DMA_CalcBaseAndBitshift+0x68>)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4413      	add	r3, r2
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d909      	bls.n	800230a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022fe:	f023 0303 	bic.w	r3, r3, #3
 8002302:	1d1a      	adds	r2, r3, #4
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	659a      	str	r2, [r3, #88]	; 0x58
 8002308:	e007      	b.n	800231a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002312:	f023 0303 	bic.w	r3, r3, #3
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	aaaaaaab 	.word	0xaaaaaaab
 8002330:	08005604 	.word	0x08005604

08002334 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d11f      	bne.n	800238e <DMA_CheckFifoParam+0x5a>
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d856      	bhi.n	8002402 <DMA_CheckFifoParam+0xce>
 8002354:	a201      	add	r2, pc, #4	; (adr r2, 800235c <DMA_CheckFifoParam+0x28>)
 8002356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235a:	bf00      	nop
 800235c:	0800236d 	.word	0x0800236d
 8002360:	0800237f 	.word	0x0800237f
 8002364:	0800236d 	.word	0x0800236d
 8002368:	08002403 	.word	0x08002403
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d046      	beq.n	8002406 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800237c:	e043      	b.n	8002406 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002386:	d140      	bne.n	800240a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800238c:	e03d      	b.n	800240a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002396:	d121      	bne.n	80023dc <DMA_CheckFifoParam+0xa8>
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d837      	bhi.n	800240e <DMA_CheckFifoParam+0xda>
 800239e:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <DMA_CheckFifoParam+0x70>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	080023b5 	.word	0x080023b5
 80023a8:	080023bb 	.word	0x080023bb
 80023ac:	080023b5 	.word	0x080023b5
 80023b0:	080023cd 	.word	0x080023cd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
      break;
 80023b8:	e030      	b.n	800241c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d025      	beq.n	8002412 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ca:	e022      	b.n	8002412 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023d4:	d11f      	bne.n	8002416 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023da:	e01c      	b.n	8002416 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d903      	bls.n	80023ea <DMA_CheckFifoParam+0xb6>
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d003      	beq.n	80023f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023e8:	e018      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
      break;
 80023ee:	e015      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00e      	beq.n	800241a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002400:	e00b      	b.n	800241a <DMA_CheckFifoParam+0xe6>
      break;
 8002402:	bf00      	nop
 8002404:	e00a      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 8002406:	bf00      	nop
 8002408:	e008      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 800240a:	bf00      	nop
 800240c:	e006      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 800240e:	bf00      	nop
 8002410:	e004      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 8002412:	bf00      	nop
 8002414:	e002      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;   
 8002416:	bf00      	nop
 8002418:	e000      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 800241a:	bf00      	nop
    }
  } 
  
  return status; 
 800241c:	7bfb      	ldrb	r3, [r7, #15]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop

0800242c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	e159      	b.n	80026fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002448:	2201      	movs	r2, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	429a      	cmp	r2, r3
 8002462:	f040 8148 	bne.w	80026f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d005      	beq.n	800247e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247a:	2b02      	cmp	r3, #2
 800247c:	d130      	bne.n	80024e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	2203      	movs	r2, #3
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b4:	2201      	movs	r2, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 0201 	and.w	r2, r3, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d017      	beq.n	800251c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d123      	bne.n	8002570 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	08da      	lsrs	r2, r3, #3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3208      	adds	r2, #8
 8002530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	220f      	movs	r2, #15
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	08da      	lsrs	r2, r3, #3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3208      	adds	r2, #8
 800256a:	69b9      	ldr	r1, [r7, #24]
 800256c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2203      	movs	r2, #3
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0203 	and.w	r2, r3, #3
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80a2 	beq.w	80026f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	4b57      	ldr	r3, [pc, #348]	; (8002714 <HAL_GPIO_Init+0x2e8>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	4a56      	ldr	r2, [pc, #344]	; (8002714 <HAL_GPIO_Init+0x2e8>)
 80025bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c0:	6453      	str	r3, [r2, #68]	; 0x44
 80025c2:	4b54      	ldr	r3, [pc, #336]	; (8002714 <HAL_GPIO_Init+0x2e8>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ce:	4a52      	ldr	r2, [pc, #328]	; (8002718 <HAL_GPIO_Init+0x2ec>)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	089b      	lsrs	r3, r3, #2
 80025d4:	3302      	adds	r3, #2
 80025d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	220f      	movs	r2, #15
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a49      	ldr	r2, [pc, #292]	; (800271c <HAL_GPIO_Init+0x2f0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d019      	beq.n	800262e <HAL_GPIO_Init+0x202>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a48      	ldr	r2, [pc, #288]	; (8002720 <HAL_GPIO_Init+0x2f4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <HAL_GPIO_Init+0x1fe>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a47      	ldr	r2, [pc, #284]	; (8002724 <HAL_GPIO_Init+0x2f8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00d      	beq.n	8002626 <HAL_GPIO_Init+0x1fa>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a46      	ldr	r2, [pc, #280]	; (8002728 <HAL_GPIO_Init+0x2fc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d007      	beq.n	8002622 <HAL_GPIO_Init+0x1f6>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a45      	ldr	r2, [pc, #276]	; (800272c <HAL_GPIO_Init+0x300>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d101      	bne.n	800261e <HAL_GPIO_Init+0x1f2>
 800261a:	2304      	movs	r3, #4
 800261c:	e008      	b.n	8002630 <HAL_GPIO_Init+0x204>
 800261e:	2307      	movs	r3, #7
 8002620:	e006      	b.n	8002630 <HAL_GPIO_Init+0x204>
 8002622:	2303      	movs	r3, #3
 8002624:	e004      	b.n	8002630 <HAL_GPIO_Init+0x204>
 8002626:	2302      	movs	r3, #2
 8002628:	e002      	b.n	8002630 <HAL_GPIO_Init+0x204>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_GPIO_Init+0x204>
 800262e:	2300      	movs	r3, #0
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	f002 0203 	and.w	r2, r2, #3
 8002636:	0092      	lsls	r2, r2, #2
 8002638:	4093      	lsls	r3, r2
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002640:	4935      	ldr	r1, [pc, #212]	; (8002718 <HAL_GPIO_Init+0x2ec>)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	3302      	adds	r3, #2
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800264e:	4b38      	ldr	r3, [pc, #224]	; (8002730 <HAL_GPIO_Init+0x304>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002672:	4a2f      	ldr	r2, [pc, #188]	; (8002730 <HAL_GPIO_Init+0x304>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002678:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <HAL_GPIO_Init+0x304>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800269c:	4a24      	ldr	r2, [pc, #144]	; (8002730 <HAL_GPIO_Init+0x304>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026a2:	4b23      	ldr	r3, [pc, #140]	; (8002730 <HAL_GPIO_Init+0x304>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026c6:	4a1a      	ldr	r2, [pc, #104]	; (8002730 <HAL_GPIO_Init+0x304>)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026cc:	4b18      	ldr	r3, [pc, #96]	; (8002730 <HAL_GPIO_Init+0x304>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f0:	4a0f      	ldr	r2, [pc, #60]	; (8002730 <HAL_GPIO_Init+0x304>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3301      	adds	r3, #1
 80026fa:	61fb      	str	r3, [r7, #28]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2b0f      	cmp	r3, #15
 8002700:	f67f aea2 	bls.w	8002448 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	3724      	adds	r7, #36	; 0x24
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	40013800 	.word	0x40013800
 800271c:	40020000 	.word	0x40020000
 8002720:	40020400 	.word	0x40020400
 8002724:	40020800 	.word	0x40020800
 8002728:	40020c00 	.word	0x40020c00
 800272c:	40021000 	.word	0x40021000
 8002730:	40013c00 	.word	0x40013c00

08002734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	807b      	strh	r3, [r7, #2]
 8002740:	4613      	mov	r3, r2
 8002742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002744:	787b      	ldrb	r3, [r7, #1]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800274a:	887a      	ldrh	r2, [r7, #2]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002750:	e003      	b.n	800275a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002752:	887b      	ldrh	r3, [r7, #2]
 8002754:	041a      	lsls	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	619a      	str	r2, [r3, #24]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d006      	beq.n	800278c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800277e:	4a05      	ldr	r2, [pc, #20]	; (8002794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f806 	bl	8002798 <HAL_GPIO_EXTI_Callback>
  }
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40013c00 	.word	0x40013c00

08002798 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e12b      	b.n	8002a1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7fe fdce 	bl	8001378 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2224      	movs	r2, #36	; 0x24
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002802:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002812:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002814:	f000 fd5c 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 8002818:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4a81      	ldr	r2, [pc, #516]	; (8002a24 <HAL_I2C_Init+0x274>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d807      	bhi.n	8002834 <HAL_I2C_Init+0x84>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4a80      	ldr	r2, [pc, #512]	; (8002a28 <HAL_I2C_Init+0x278>)
 8002828:	4293      	cmp	r3, r2
 800282a:	bf94      	ite	ls
 800282c:	2301      	movls	r3, #1
 800282e:	2300      	movhi	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	e006      	b.n	8002842 <HAL_I2C_Init+0x92>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4a7d      	ldr	r2, [pc, #500]	; (8002a2c <HAL_I2C_Init+0x27c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	bf94      	ite	ls
 800283c:	2301      	movls	r3, #1
 800283e:	2300      	movhi	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0e7      	b.n	8002a1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4a78      	ldr	r2, [pc, #480]	; (8002a30 <HAL_I2C_Init+0x280>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0c9b      	lsrs	r3, r3, #18
 8002854:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a6a      	ldr	r2, [pc, #424]	; (8002a24 <HAL_I2C_Init+0x274>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d802      	bhi.n	8002884 <HAL_I2C_Init+0xd4>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	3301      	adds	r3, #1
 8002882:	e009      	b.n	8002898 <HAL_I2C_Init+0xe8>
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	4a69      	ldr	r2, [pc, #420]	; (8002a34 <HAL_I2C_Init+0x284>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	099b      	lsrs	r3, r3, #6
 8002896:	3301      	adds	r3, #1
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	430b      	orrs	r3, r1
 800289e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	495c      	ldr	r1, [pc, #368]	; (8002a24 <HAL_I2C_Init+0x274>)
 80028b4:	428b      	cmp	r3, r1
 80028b6:	d819      	bhi.n	80028ec <HAL_I2C_Init+0x13c>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1e59      	subs	r1, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80028c6:	1c59      	adds	r1, r3, #1
 80028c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028cc:	400b      	ands	r3, r1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_I2C_Init+0x138>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1e59      	subs	r1, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e0:	3301      	adds	r3, #1
 80028e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e6:	e051      	b.n	800298c <HAL_I2C_Init+0x1dc>
 80028e8:	2304      	movs	r3, #4
 80028ea:	e04f      	b.n	800298c <HAL_I2C_Init+0x1dc>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d111      	bne.n	8002918 <HAL_I2C_Init+0x168>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	1e58      	subs	r0, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	440b      	add	r3, r1
 8002902:	fbb0 f3f3 	udiv	r3, r0, r3
 8002906:	3301      	adds	r3, #1
 8002908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	e012      	b.n	800293e <HAL_I2C_Init+0x18e>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1e58      	subs	r0, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	0099      	lsls	r1, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	fbb0 f3f3 	udiv	r3, r0, r3
 800292e:	3301      	adds	r3, #1
 8002930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_I2C_Init+0x196>
 8002942:	2301      	movs	r3, #1
 8002944:	e022      	b.n	800298c <HAL_I2C_Init+0x1dc>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10e      	bne.n	800296c <HAL_I2C_Init+0x1bc>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1e58      	subs	r0, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6859      	ldr	r1, [r3, #4]
 8002956:	460b      	mov	r3, r1
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	440b      	add	r3, r1
 800295c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002960:	3301      	adds	r3, #1
 8002962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800296a:	e00f      	b.n	800298c <HAL_I2C_Init+0x1dc>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	1e58      	subs	r0, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	0099      	lsls	r1, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002982:	3301      	adds	r3, #1
 8002984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002988:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	6809      	ldr	r1, [r1, #0]
 8002990:	4313      	orrs	r3, r2
 8002992:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69da      	ldr	r2, [r3, #28]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6911      	ldr	r1, [r2, #16]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68d2      	ldr	r2, [r2, #12]
 80029c6:	4311      	orrs	r1, r2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	430b      	orrs	r3, r1
 80029ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	000186a0 	.word	0x000186a0
 8002a28:	001e847f 	.word	0x001e847f
 8002a2c:	003d08ff 	.word	0x003d08ff
 8002a30:	431bde83 	.word	0x431bde83
 8002a34:	10624dd3 	.word	0x10624dd3

08002a38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e264      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d075      	beq.n	8002b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a56:	4ba3      	ldr	r3, [pc, #652]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d00c      	beq.n	8002a7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a62:	4ba0      	ldr	r3, [pc, #640]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d112      	bne.n	8002a94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6e:	4b9d      	ldr	r3, [pc, #628]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a7a:	d10b      	bne.n	8002a94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	4b99      	ldr	r3, [pc, #612]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d05b      	beq.n	8002b40 <HAL_RCC_OscConfig+0x108>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d157      	bne.n	8002b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e23f      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9c:	d106      	bne.n	8002aac <HAL_RCC_OscConfig+0x74>
 8002a9e:	4b91      	ldr	r3, [pc, #580]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a90      	ldr	r2, [pc, #576]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e01d      	b.n	8002ae8 <HAL_RCC_OscConfig+0xb0>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x98>
 8002ab6:	4b8b      	ldr	r3, [pc, #556]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a8a      	ldr	r2, [pc, #552]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b88      	ldr	r3, [pc, #544]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a87      	ldr	r2, [pc, #540]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCC_OscConfig+0xb0>
 8002ad0:	4b84      	ldr	r3, [pc, #528]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a83      	ldr	r2, [pc, #524]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b81      	ldr	r3, [pc, #516]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a80      	ldr	r2, [pc, #512]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe ff58 	bl	80019a4 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fe ff54 	bl	80019a4 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	; 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e204      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	4b76      	ldr	r3, [pc, #472]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0xc0>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fe ff44 	bl	80019a4 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe ff40 	bl	80019a4 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	; 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e1f0      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	4b6c      	ldr	r3, [pc, #432]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0xe8>
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d063      	beq.n	8002c16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b4e:	4b65      	ldr	r3, [pc, #404]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b5a:	4b62      	ldr	r3, [pc, #392]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d11c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b66:	4b5f      	ldr	r3, [pc, #380]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d116      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b72:	4b5c      	ldr	r3, [pc, #368]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_RCC_OscConfig+0x152>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d001      	beq.n	8002b8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e1c4      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8a:	4b56      	ldr	r3, [pc, #344]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4952      	ldr	r1, [pc, #328]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	e03a      	b.n	8002c16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba8:	4b4f      	ldr	r3, [pc, #316]	; (8002ce8 <HAL_RCC_OscConfig+0x2b0>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bae:	f7fe fef9 	bl	80019a4 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb6:	f7fe fef5 	bl	80019a4 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e1a5      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc8:	4b46      	ldr	r3, [pc, #280]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd4:	4b43      	ldr	r3, [pc, #268]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4940      	ldr	r1, [pc, #256]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]
 8002be8:	e015      	b.n	8002c16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bea:	4b3f      	ldr	r3, [pc, #252]	; (8002ce8 <HAL_RCC_OscConfig+0x2b0>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fed8 	bl	80019a4 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7fe fed4 	bl	80019a4 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e184      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	4b36      	ldr	r3, [pc, #216]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d030      	beq.n	8002c84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d016      	beq.n	8002c58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2a:	4b30      	ldr	r3, [pc, #192]	; (8002cec <HAL_RCC_OscConfig+0x2b4>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c30:	f7fe feb8 	bl	80019a4 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c38:	f7fe feb4 	bl	80019a4 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e164      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	4b26      	ldr	r3, [pc, #152]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x200>
 8002c56:	e015      	b.n	8002c84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c58:	4b24      	ldr	r3, [pc, #144]	; (8002cec <HAL_RCC_OscConfig+0x2b4>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5e:	f7fe fea1 	bl	80019a4 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c66:	f7fe fe9d 	bl	80019a4 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e14d      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c78:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f0      	bne.n	8002c66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80a0 	beq.w	8002dd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c92:	2300      	movs	r3, #0
 8002c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c96:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10f      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a0e      	ldr	r2, [pc, #56]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_RCC_OscConfig+0x2b8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d121      	bne.n	8002d12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cce:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <HAL_RCC_OscConfig+0x2b8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a07      	ldr	r2, [pc, #28]	; (8002cf0 <HAL_RCC_OscConfig+0x2b8>)
 8002cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cda:	f7fe fe63 	bl	80019a4 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce0:	e011      	b.n	8002d06 <HAL_RCC_OscConfig+0x2ce>
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	42470000 	.word	0x42470000
 8002cec:	42470e80 	.word	0x42470e80
 8002cf0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf4:	f7fe fe56 	bl	80019a4 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e106      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d06:	4b85      	ldr	r3, [pc, #532]	; (8002f1c <HAL_RCC_OscConfig+0x4e4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d106      	bne.n	8002d28 <HAL_RCC_OscConfig+0x2f0>
 8002d1a:	4b81      	ldr	r3, [pc, #516]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1e:	4a80      	ldr	r2, [pc, #512]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	6713      	str	r3, [r2, #112]	; 0x70
 8002d26:	e01c      	b.n	8002d62 <HAL_RCC_OscConfig+0x32a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b05      	cmp	r3, #5
 8002d2e:	d10c      	bne.n	8002d4a <HAL_RCC_OscConfig+0x312>
 8002d30:	4b7b      	ldr	r3, [pc, #492]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	4a7a      	ldr	r2, [pc, #488]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d36:	f043 0304 	orr.w	r3, r3, #4
 8002d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3c:	4b78      	ldr	r3, [pc, #480]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	4a77      	ldr	r2, [pc, #476]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	6713      	str	r3, [r2, #112]	; 0x70
 8002d48:	e00b      	b.n	8002d62 <HAL_RCC_OscConfig+0x32a>
 8002d4a:	4b75      	ldr	r3, [pc, #468]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	4a74      	ldr	r2, [pc, #464]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	6713      	str	r3, [r2, #112]	; 0x70
 8002d56:	4b72      	ldr	r3, [pc, #456]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5a:	4a71      	ldr	r2, [pc, #452]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d5c:	f023 0304 	bic.w	r3, r3, #4
 8002d60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d015      	beq.n	8002d96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6a:	f7fe fe1b 	bl	80019a4 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d70:	e00a      	b.n	8002d88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d72:	f7fe fe17 	bl	80019a4 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e0c5      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d88:	4b65      	ldr	r3, [pc, #404]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0ee      	beq.n	8002d72 <HAL_RCC_OscConfig+0x33a>
 8002d94:	e014      	b.n	8002dc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d96:	f7fe fe05 	bl	80019a4 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9c:	e00a      	b.n	8002db4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9e:	f7fe fe01 	bl	80019a4 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e0af      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db4:	4b5a      	ldr	r3, [pc, #360]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1ee      	bne.n	8002d9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dc0:	7dfb      	ldrb	r3, [r7, #23]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d105      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc6:	4b56      	ldr	r3, [pc, #344]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	4a55      	ldr	r2, [pc, #340]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 809b 	beq.w	8002f12 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ddc:	4b50      	ldr	r3, [pc, #320]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 030c 	and.w	r3, r3, #12
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d05c      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d141      	bne.n	8002e74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df0:	4b4c      	ldr	r3, [pc, #304]	; (8002f24 <HAL_RCC_OscConfig+0x4ec>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df6:	f7fe fdd5 	bl	80019a4 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7fe fdd1 	bl	80019a4 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e081      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e10:	4b43      	ldr	r3, [pc, #268]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f0      	bne.n	8002dfe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69da      	ldr	r2, [r3, #28]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	019b      	lsls	r3, r3, #6
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	085b      	lsrs	r3, r3, #1
 8002e34:	3b01      	subs	r3, #1
 8002e36:	041b      	lsls	r3, r3, #16
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	061b      	lsls	r3, r3, #24
 8002e40:	4937      	ldr	r1, [pc, #220]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e46:	4b37      	ldr	r3, [pc, #220]	; (8002f24 <HAL_RCC_OscConfig+0x4ec>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fdaa 	bl	80019a4 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe fda6 	bl	80019a4 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e056      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e66:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x41c>
 8002e72:	e04e      	b.n	8002f12 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e74:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <HAL_RCC_OscConfig+0x4ec>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7a:	f7fe fd93 	bl	80019a4 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e82:	f7fe fd8f 	bl	80019a4 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e03f      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e94:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f0      	bne.n	8002e82 <HAL_RCC_OscConfig+0x44a>
 8002ea0:	e037      	b.n	8002f12 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e032      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002eae:	4b1c      	ldr	r3, [pc, #112]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d028      	beq.n	8002f0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d121      	bne.n	8002f0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d11a      	bne.n	8002f0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ede:	4013      	ands	r3, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ee4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d111      	bne.n	8002f0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	085b      	lsrs	r3, r3, #1
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d001      	beq.n	8002f12 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40007000 	.word	0x40007000
 8002f20:	40023800 	.word	0x40023800
 8002f24:	42470060 	.word	0x42470060

08002f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0cc      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b68      	ldr	r3, [pc, #416]	; (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d90c      	bls.n	8002f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b65      	ldr	r3, [pc, #404]	; (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f52:	4b63      	ldr	r3, [pc, #396]	; (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0b8      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d020      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f7c:	4b59      	ldr	r3, [pc, #356]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4a58      	ldr	r2, [pc, #352]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f94:	4b53      	ldr	r3, [pc, #332]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a52      	ldr	r2, [pc, #328]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa0:	4b50      	ldr	r3, [pc, #320]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	494d      	ldr	r1, [pc, #308]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d044      	beq.n	8003048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc6:	4b47      	ldr	r3, [pc, #284]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d119      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e07f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d003      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe6:	4b3f      	ldr	r3, [pc, #252]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e06f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	4b3b      	ldr	r3, [pc, #236]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e067      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003006:	4b37      	ldr	r3, [pc, #220]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f023 0203 	bic.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4934      	ldr	r1, [pc, #208]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	4313      	orrs	r3, r2
 8003016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003018:	f7fe fcc4 	bl	80019a4 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	e00a      	b.n	8003036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003020:	f7fe fcc0 	bl	80019a4 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e04f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	4b2b      	ldr	r3, [pc, #172]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 020c 	and.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	429a      	cmp	r2, r3
 8003046:	d1eb      	bne.n	8003020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003048:	4b25      	ldr	r3, [pc, #148]	; (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d20c      	bcs.n	8003070 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b22      	ldr	r3, [pc, #136]	; (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e032      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800307c:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4916      	ldr	r1, [pc, #88]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d009      	beq.n	80030ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800309a:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	490e      	ldr	r1, [pc, #56]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030ae:	f000 f821 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 80030b2:	4602      	mov	r2, r0
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	490a      	ldr	r1, [pc, #40]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	5ccb      	ldrb	r3, [r1, r3]
 80030c2:	fa22 f303 	lsr.w	r3, r2, r3
 80030c6:	4a09      	ldr	r2, [pc, #36]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe fc24 	bl	800191c <HAL_InitTick>

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40023c00 	.word	0x40023c00
 80030e4:	40023800 	.word	0x40023800
 80030e8:	080055ec 	.word	0x080055ec
 80030ec:	20000004 	.word	0x20000004
 80030f0:	20000008 	.word	0x20000008

080030f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	607b      	str	r3, [r7, #4]
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	2300      	movs	r3, #0
 8003106:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800310c:	4b67      	ldr	r3, [pc, #412]	; (80032ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b08      	cmp	r3, #8
 8003116:	d00d      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0x40>
 8003118:	2b08      	cmp	r3, #8
 800311a:	f200 80bd 	bhi.w	8003298 <HAL_RCC_GetSysClockFreq+0x1a4>
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x34>
 8003122:	2b04      	cmp	r3, #4
 8003124:	d003      	beq.n	800312e <HAL_RCC_GetSysClockFreq+0x3a>
 8003126:	e0b7      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003128:	4b61      	ldr	r3, [pc, #388]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800312a:	60bb      	str	r3, [r7, #8]
       break;
 800312c:	e0b7      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800312e:	4b61      	ldr	r3, [pc, #388]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003130:	60bb      	str	r3, [r7, #8]
      break;
 8003132:	e0b4      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003134:	4b5d      	ldr	r3, [pc, #372]	; (80032ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800313c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800313e:	4b5b      	ldr	r3, [pc, #364]	; (80032ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d04d      	beq.n	80031e6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800314a:	4b58      	ldr	r3, [pc, #352]	; (80032ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	099b      	lsrs	r3, r3, #6
 8003150:	461a      	mov	r2, r3
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	f240 10ff 	movw	r0, #511	; 0x1ff
 800315a:	f04f 0100 	mov.w	r1, #0
 800315e:	ea02 0800 	and.w	r8, r2, r0
 8003162:	ea03 0901 	and.w	r9, r3, r1
 8003166:	4640      	mov	r0, r8
 8003168:	4649      	mov	r1, r9
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	014b      	lsls	r3, r1, #5
 8003174:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003178:	0142      	lsls	r2, r0, #5
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	ebb0 0008 	subs.w	r0, r0, r8
 8003182:	eb61 0109 	sbc.w	r1, r1, r9
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	018b      	lsls	r3, r1, #6
 8003190:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003194:	0182      	lsls	r2, r0, #6
 8003196:	1a12      	subs	r2, r2, r0
 8003198:	eb63 0301 	sbc.w	r3, r3, r1
 800319c:	f04f 0000 	mov.w	r0, #0
 80031a0:	f04f 0100 	mov.w	r1, #0
 80031a4:	00d9      	lsls	r1, r3, #3
 80031a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031aa:	00d0      	lsls	r0, r2, #3
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	eb12 0208 	adds.w	r2, r2, r8
 80031b4:	eb43 0309 	adc.w	r3, r3, r9
 80031b8:	f04f 0000 	mov.w	r0, #0
 80031bc:	f04f 0100 	mov.w	r1, #0
 80031c0:	0259      	lsls	r1, r3, #9
 80031c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80031c6:	0250      	lsls	r0, r2, #9
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	f7fc fffe 	bl	80001d8 <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4613      	mov	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	e04a      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e6:	4b31      	ldr	r3, [pc, #196]	; (80032ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	099b      	lsrs	r3, r3, #6
 80031ec:	461a      	mov	r2, r3
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031f6:	f04f 0100 	mov.w	r1, #0
 80031fa:	ea02 0400 	and.w	r4, r2, r0
 80031fe:	ea03 0501 	and.w	r5, r3, r1
 8003202:	4620      	mov	r0, r4
 8003204:	4629      	mov	r1, r5
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	014b      	lsls	r3, r1, #5
 8003210:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003214:	0142      	lsls	r2, r0, #5
 8003216:	4610      	mov	r0, r2
 8003218:	4619      	mov	r1, r3
 800321a:	1b00      	subs	r0, r0, r4
 800321c:	eb61 0105 	sbc.w	r1, r1, r5
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	018b      	lsls	r3, r1, #6
 800322a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800322e:	0182      	lsls	r2, r0, #6
 8003230:	1a12      	subs	r2, r2, r0
 8003232:	eb63 0301 	sbc.w	r3, r3, r1
 8003236:	f04f 0000 	mov.w	r0, #0
 800323a:	f04f 0100 	mov.w	r1, #0
 800323e:	00d9      	lsls	r1, r3, #3
 8003240:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003244:	00d0      	lsls	r0, r2, #3
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	1912      	adds	r2, r2, r4
 800324c:	eb45 0303 	adc.w	r3, r5, r3
 8003250:	f04f 0000 	mov.w	r0, #0
 8003254:	f04f 0100 	mov.w	r1, #0
 8003258:	0299      	lsls	r1, r3, #10
 800325a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800325e:	0290      	lsls	r0, r2, #10
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	4610      	mov	r0, r2
 8003266:	4619      	mov	r1, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	461a      	mov	r2, r3
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	f7fc ffb2 	bl	80001d8 <__aeabi_uldivmod>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4613      	mov	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	3301      	adds	r3, #1
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	60bb      	str	r3, [r7, #8]
      break;
 8003296:	e002      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800329a:	60bb      	str	r3, [r7, #8]
      break;
 800329c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800329e:	68bb      	ldr	r3, [r7, #8]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	00f42400 	.word	0x00f42400
 80032b4:	007a1200 	.word	0x007a1200

080032b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <HAL_RCC_GetHCLKFreq+0x14>)
 80032be:	681b      	ldr	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000004 	.word	0x20000004

080032d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032d4:	f7ff fff0 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 80032d8:	4602      	mov	r2, r0
 80032da:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	0a9b      	lsrs	r3, r3, #10
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	4903      	ldr	r1, [pc, #12]	; (80032f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e6:	5ccb      	ldrb	r3, [r1, r3]
 80032e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40023800 	.word	0x40023800
 80032f4:	080055fc 	.word	0x080055fc

080032f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032fc:	f7ff ffdc 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 8003300:	4602      	mov	r2, r0
 8003302:	4b05      	ldr	r3, [pc, #20]	; (8003318 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	0b5b      	lsrs	r3, r3, #13
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	4903      	ldr	r1, [pc, #12]	; (800331c <HAL_RCC_GetPCLK2Freq+0x24>)
 800330e:	5ccb      	ldrb	r3, [r1, r3]
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003314:	4618      	mov	r0, r3
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40023800 	.word	0x40023800
 800331c:	080055fc 	.word	0x080055fc

08003320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e041      	b.n	80033b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fe f8a6 	bl	8001498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3304      	adds	r3, #4
 800335c:	4619      	mov	r1, r3
 800335e:	4610      	mov	r0, r2
 8003360:	f000 fdda 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d001      	beq.n	80033d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e03c      	b.n	8003452 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1e      	ldr	r2, [pc, #120]	; (8003460 <HAL_TIM_Base_Start+0xa0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d018      	beq.n	800341c <HAL_TIM_Base_Start+0x5c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f2:	d013      	beq.n	800341c <HAL_TIM_Base_Start+0x5c>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1a      	ldr	r2, [pc, #104]	; (8003464 <HAL_TIM_Base_Start+0xa4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00e      	beq.n	800341c <HAL_TIM_Base_Start+0x5c>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a19      	ldr	r2, [pc, #100]	; (8003468 <HAL_TIM_Base_Start+0xa8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d009      	beq.n	800341c <HAL_TIM_Base_Start+0x5c>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a17      	ldr	r2, [pc, #92]	; (800346c <HAL_TIM_Base_Start+0xac>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d004      	beq.n	800341c <HAL_TIM_Base_Start+0x5c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a16      	ldr	r2, [pc, #88]	; (8003470 <HAL_TIM_Base_Start+0xb0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d111      	bne.n	8003440 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b06      	cmp	r3, #6
 800342c:	d010      	beq.n	8003450 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0201 	orr.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343e:	e007      	b.n	8003450 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40010000 	.word	0x40010000
 8003464:	40000400 	.word	0x40000400
 8003468:	40000800 	.word	0x40000800
 800346c:	40000c00 	.word	0x40000c00
 8003470:	40014000 	.word	0x40014000

08003474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	d001      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e044      	b.n	8003516 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1e      	ldr	r2, [pc, #120]	; (8003524 <HAL_TIM_Base_Start_IT+0xb0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d018      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x6c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b6:	d013      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x6c>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1a      	ldr	r2, [pc, #104]	; (8003528 <HAL_TIM_Base_Start_IT+0xb4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00e      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x6c>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a19      	ldr	r2, [pc, #100]	; (800352c <HAL_TIM_Base_Start_IT+0xb8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d009      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x6c>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a17      	ldr	r2, [pc, #92]	; (8003530 <HAL_TIM_Base_Start_IT+0xbc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d004      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0x6c>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a16      	ldr	r2, [pc, #88]	; (8003534 <HAL_TIM_Base_Start_IT+0xc0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d111      	bne.n	8003504 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b06      	cmp	r3, #6
 80034f0:	d010      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0201 	orr.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003502:	e007      	b.n	8003514 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40010000 	.word	0x40010000
 8003528:	40000400 	.word	0x40000400
 800352c:	40000800 	.word	0x40000800
 8003530:	40000c00 	.word	0x40000c00
 8003534:	40014000 	.word	0x40014000

08003538 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e041      	b.n	80035ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f839 	bl	80035d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3304      	adds	r3, #4
 8003574:	4619      	mov	r1, r3
 8003576:	4610      	mov	r0, r2
 8003578:	f000 fcce 	bl	8003f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d109      	bne.n	8003610 <HAL_TIM_PWM_Start+0x24>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	bf14      	ite	ne
 8003608:	2301      	movne	r3, #1
 800360a:	2300      	moveq	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	e022      	b.n	8003656 <HAL_TIM_PWM_Start+0x6a>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	2b04      	cmp	r3, #4
 8003614:	d109      	bne.n	800362a <HAL_TIM_PWM_Start+0x3e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b01      	cmp	r3, #1
 8003620:	bf14      	ite	ne
 8003622:	2301      	movne	r3, #1
 8003624:	2300      	moveq	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	e015      	b.n	8003656 <HAL_TIM_PWM_Start+0x6a>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d109      	bne.n	8003644 <HAL_TIM_PWM_Start+0x58>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	bf14      	ite	ne
 800363c:	2301      	movne	r3, #1
 800363e:	2300      	moveq	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e008      	b.n	8003656 <HAL_TIM_PWM_Start+0x6a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	bf14      	ite	ne
 8003650:	2301      	movne	r3, #1
 8003652:	2300      	moveq	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e068      	b.n	8003730 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d104      	bne.n	800366e <HAL_TIM_PWM_Start+0x82>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800366c:	e013      	b.n	8003696 <HAL_TIM_PWM_Start+0xaa>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b04      	cmp	r3, #4
 8003672:	d104      	bne.n	800367e <HAL_TIM_PWM_Start+0x92>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800367c:	e00b      	b.n	8003696 <HAL_TIM_PWM_Start+0xaa>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d104      	bne.n	800368e <HAL_TIM_PWM_Start+0xa2>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800368c:	e003      	b.n	8003696 <HAL_TIM_PWM_Start+0xaa>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2201      	movs	r2, #1
 800369c:	6839      	ldr	r1, [r7, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fee0 	bl	8004464 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a23      	ldr	r2, [pc, #140]	; (8003738 <HAL_TIM_PWM_Start+0x14c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d107      	bne.n	80036be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1d      	ldr	r2, [pc, #116]	; (8003738 <HAL_TIM_PWM_Start+0x14c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d018      	beq.n	80036fa <HAL_TIM_PWM_Start+0x10e>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d0:	d013      	beq.n	80036fa <HAL_TIM_PWM_Start+0x10e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a19      	ldr	r2, [pc, #100]	; (800373c <HAL_TIM_PWM_Start+0x150>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00e      	beq.n	80036fa <HAL_TIM_PWM_Start+0x10e>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a17      	ldr	r2, [pc, #92]	; (8003740 <HAL_TIM_PWM_Start+0x154>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d009      	beq.n	80036fa <HAL_TIM_PWM_Start+0x10e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a16      	ldr	r2, [pc, #88]	; (8003744 <HAL_TIM_PWM_Start+0x158>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d004      	beq.n	80036fa <HAL_TIM_PWM_Start+0x10e>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a14      	ldr	r2, [pc, #80]	; (8003748 <HAL_TIM_PWM_Start+0x15c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d111      	bne.n	800371e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b06      	cmp	r3, #6
 800370a:	d010      	beq.n	800372e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800371c:	e007      	b.n	800372e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0201 	orr.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40010000 	.word	0x40010000
 800373c:	40000400 	.word	0x40000400
 8003740:	40000800 	.word	0x40000800
 8003744:	40000c00 	.word	0x40000c00
 8003748:	40014000 	.word	0x40014000

0800374c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e097      	b.n	8003890 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d106      	bne.n	800377a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7fd fe47 	bl	8001408 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2202      	movs	r2, #2
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6812      	ldr	r2, [r2, #0]
 800378c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003790:	f023 0307 	bic.w	r3, r3, #7
 8003794:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3304      	adds	r3, #4
 800379e:	4619      	mov	r1, r3
 80037a0:	4610      	mov	r0, r2
 80037a2:	f000 fbb9 	bl	8003f18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ce:	f023 0303 	bic.w	r3, r3, #3
 80037d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	021b      	lsls	r3, r3, #8
 80037de:	4313      	orrs	r3, r2
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80037ec:	f023 030c 	bic.w	r3, r3, #12
 80037f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	4313      	orrs	r3, r2
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	011a      	lsls	r2, r3, #4
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	031b      	lsls	r3, r3, #12
 800381c:	4313      	orrs	r3, r2
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800382a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003832:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	4313      	orrs	r3, r2
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80038c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d110      	bne.n	80038ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d102      	bne.n	80038d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80038ce:	7b7b      	ldrb	r3, [r7, #13]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d001      	beq.n	80038d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e069      	b.n	80039ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038e8:	e031      	b.n	800394e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d110      	bne.n	8003912 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038f0:	7bbb      	ldrb	r3, [r7, #14]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d102      	bne.n	80038fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038f6:	7b3b      	ldrb	r3, [r7, #12]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d001      	beq.n	8003900 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e055      	b.n	80039ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003910:	e01d      	b.n	800394e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d108      	bne.n	800392a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003918:	7bbb      	ldrb	r3, [r7, #14]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d105      	bne.n	800392a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800391e:	7b7b      	ldrb	r3, [r7, #13]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d102      	bne.n	800392a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003924:	7b3b      	ldrb	r3, [r7, #12]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d001      	beq.n	800392e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e03e      	b.n	80039ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2202      	movs	r2, #2
 8003932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2202      	movs	r2, #2
 800393a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2202      	movs	r2, #2
 8003942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2202      	movs	r2, #2
 800394a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_TIM_Encoder_Start+0xc4>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b04      	cmp	r3, #4
 8003958:	d008      	beq.n	800396c <HAL_TIM_Encoder_Start+0xd4>
 800395a:	e00f      	b.n	800397c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2201      	movs	r2, #1
 8003962:	2100      	movs	r1, #0
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fd7d 	bl	8004464 <TIM_CCxChannelCmd>
      break;
 800396a:	e016      	b.n	800399a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2201      	movs	r2, #1
 8003972:	2104      	movs	r1, #4
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fd75 	bl	8004464 <TIM_CCxChannelCmd>
      break;
 800397a:	e00e      	b.n	800399a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2201      	movs	r2, #1
 8003982:	2100      	movs	r1, #0
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fd6d 	bl	8004464 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2201      	movs	r2, #1
 8003990:	2104      	movs	r1, #4
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fd66 	bl	8004464 <TIM_CCxChannelCmd>
      break;
 8003998:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0201 	orr.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d122      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d11b      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0202 	mvn.w	r2, #2
 80039e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fa70 	bl	8003edc <HAL_TIM_IC_CaptureCallback>
 80039fc:	e005      	b.n	8003a0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fa62 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa73 	bl	8003ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d122      	bne.n	8003a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d11b      	bne.n	8003a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0204 	mvn.w	r2, #4
 8003a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fa46 	bl	8003edc <HAL_TIM_IC_CaptureCallback>
 8003a50:	e005      	b.n	8003a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fa38 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fa49 	bl	8003ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d122      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d11b      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0208 	mvn.w	r2, #8
 8003a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fa1c 	bl	8003edc <HAL_TIM_IC_CaptureCallback>
 8003aa4:	e005      	b.n	8003ab2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fa0e 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fa1f 	bl	8003ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b10      	cmp	r3, #16
 8003ac4:	d122      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b10      	cmp	r3, #16
 8003ad2:	d11b      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0210 	mvn.w	r2, #16
 8003adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2208      	movs	r2, #8
 8003ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f9f2 	bl	8003edc <HAL_TIM_IC_CaptureCallback>
 8003af8:	e005      	b.n	8003b06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f9e4 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f9f5 	bl	8003ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d10e      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d107      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0201 	mvn.w	r2, #1
 8003b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fd fbd6 	bl	80012e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	2b80      	cmp	r3, #128	; 0x80
 8003b44:	d10e      	bne.n	8003b64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b50:	2b80      	cmp	r3, #128	; 0x80
 8003b52:	d107      	bne.n	8003b64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fd1e 	bl	80045a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	d10e      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7c:	2b40      	cmp	r3, #64	; 0x40
 8003b7e:	d107      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f9ba 	bl	8003f04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d10e      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d107      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0220 	mvn.w	r2, #32
 8003bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fce8 	bl	800458c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e0ac      	b.n	8003d38 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b0c      	cmp	r3, #12
 8003bea:	f200 809f 	bhi.w	8003d2c <HAL_TIM_PWM_ConfigChannel+0x168>
 8003bee:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf4:	08003c29 	.word	0x08003c29
 8003bf8:	08003d2d 	.word	0x08003d2d
 8003bfc:	08003d2d 	.word	0x08003d2d
 8003c00:	08003d2d 	.word	0x08003d2d
 8003c04:	08003c69 	.word	0x08003c69
 8003c08:	08003d2d 	.word	0x08003d2d
 8003c0c:	08003d2d 	.word	0x08003d2d
 8003c10:	08003d2d 	.word	0x08003d2d
 8003c14:	08003cab 	.word	0x08003cab
 8003c18:	08003d2d 	.word	0x08003d2d
 8003c1c:	08003d2d 	.word	0x08003d2d
 8003c20:	08003d2d 	.word	0x08003d2d
 8003c24:	08003ceb 	.word	0x08003ceb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f9f2 	bl	8004018 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0208 	orr.w	r2, r2, #8
 8003c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0204 	bic.w	r2, r2, #4
 8003c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6999      	ldr	r1, [r3, #24]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	619a      	str	r2, [r3, #24]
      break;
 8003c66:	e062      	b.n	8003d2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fa38 	bl	80040e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699a      	ldr	r2, [r3, #24]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6999      	ldr	r1, [r3, #24]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	021a      	lsls	r2, r3, #8
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	619a      	str	r2, [r3, #24]
      break;
 8003ca8:	e041      	b.n	8003d2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fa83 	bl	80041bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69da      	ldr	r2, [r3, #28]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0208 	orr.w	r2, r2, #8
 8003cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0204 	bic.w	r2, r2, #4
 8003cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69d9      	ldr	r1, [r3, #28]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	61da      	str	r2, [r3, #28]
      break;
 8003ce8:	e021      	b.n	8003d2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 facd 	bl	8004290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69d9      	ldr	r1, [r3, #28]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	021a      	lsls	r2, r3, #8
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	61da      	str	r2, [r3, #28]
      break;
 8003d2a:	e000      	b.n	8003d2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003d2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_TIM_ConfigClockSource+0x18>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e0b3      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x180>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d90:	d03e      	beq.n	8003e10 <HAL_TIM_ConfigClockSource+0xd0>
 8003d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d96:	f200 8087 	bhi.w	8003ea8 <HAL_TIM_ConfigClockSource+0x168>
 8003d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9e:	f000 8085 	beq.w	8003eac <HAL_TIM_ConfigClockSource+0x16c>
 8003da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da6:	d87f      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x168>
 8003da8:	2b70      	cmp	r3, #112	; 0x70
 8003daa:	d01a      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0xa2>
 8003dac:	2b70      	cmp	r3, #112	; 0x70
 8003dae:	d87b      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x168>
 8003db0:	2b60      	cmp	r3, #96	; 0x60
 8003db2:	d050      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x116>
 8003db4:	2b60      	cmp	r3, #96	; 0x60
 8003db6:	d877      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x168>
 8003db8:	2b50      	cmp	r3, #80	; 0x50
 8003dba:	d03c      	beq.n	8003e36 <HAL_TIM_ConfigClockSource+0xf6>
 8003dbc:	2b50      	cmp	r3, #80	; 0x50
 8003dbe:	d873      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x168>
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d058      	beq.n	8003e76 <HAL_TIM_ConfigClockSource+0x136>
 8003dc4:	2b40      	cmp	r3, #64	; 0x40
 8003dc6:	d86f      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x168>
 8003dc8:	2b30      	cmp	r3, #48	; 0x30
 8003dca:	d064      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x156>
 8003dcc:	2b30      	cmp	r3, #48	; 0x30
 8003dce:	d86b      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x168>
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d060      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x156>
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d867      	bhi.n	8003ea8 <HAL_TIM_ConfigClockSource+0x168>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d05c      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x156>
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	d05a      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003de0:	e062      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6899      	ldr	r1, [r3, #8]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f000 fb17 	bl	8004424 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	609a      	str	r2, [r3, #8]
      break;
 8003e0e:	e04e      	b.n	8003eae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6899      	ldr	r1, [r3, #8]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f000 fb00 	bl	8004424 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e32:	609a      	str	r2, [r3, #8]
      break;
 8003e34:	e03b      	b.n	8003eae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6859      	ldr	r1, [r3, #4]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	461a      	mov	r2, r3
 8003e44:	f000 fa74 	bl	8004330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2150      	movs	r1, #80	; 0x50
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 facd 	bl	80043ee <TIM_ITRx_SetConfig>
      break;
 8003e54:	e02b      	b.n	8003eae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	6859      	ldr	r1, [r3, #4]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	461a      	mov	r2, r3
 8003e64:	f000 fa93 	bl	800438e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2160      	movs	r1, #96	; 0x60
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fabd 	bl	80043ee <TIM_ITRx_SetConfig>
      break;
 8003e74:	e01b      	b.n	8003eae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	6859      	ldr	r1, [r3, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	461a      	mov	r2, r3
 8003e84:	f000 fa54 	bl	8004330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2140      	movs	r1, #64	; 0x40
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 faad 	bl	80043ee <TIM_ITRx_SetConfig>
      break;
 8003e94:	e00b      	b.n	8003eae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	f000 faa4 	bl	80043ee <TIM_ITRx_SetConfig>
        break;
 8003ea6:	e002      	b.n	8003eae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ea8:	bf00      	nop
 8003eaa:	e000      	b.n	8003eae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003eac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a34      	ldr	r2, [pc, #208]	; (8003ffc <TIM_Base_SetConfig+0xe4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00f      	beq.n	8003f50 <TIM_Base_SetConfig+0x38>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d00b      	beq.n	8003f50 <TIM_Base_SetConfig+0x38>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a31      	ldr	r2, [pc, #196]	; (8004000 <TIM_Base_SetConfig+0xe8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d007      	beq.n	8003f50 <TIM_Base_SetConfig+0x38>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a30      	ldr	r2, [pc, #192]	; (8004004 <TIM_Base_SetConfig+0xec>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d003      	beq.n	8003f50 <TIM_Base_SetConfig+0x38>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a2f      	ldr	r2, [pc, #188]	; (8004008 <TIM_Base_SetConfig+0xf0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d108      	bne.n	8003f62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a25      	ldr	r2, [pc, #148]	; (8003ffc <TIM_Base_SetConfig+0xe4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d01b      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f70:	d017      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a22      	ldr	r2, [pc, #136]	; (8004000 <TIM_Base_SetConfig+0xe8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d013      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a21      	ldr	r2, [pc, #132]	; (8004004 <TIM_Base_SetConfig+0xec>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00f      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a20      	ldr	r2, [pc, #128]	; (8004008 <TIM_Base_SetConfig+0xf0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00b      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a1f      	ldr	r2, [pc, #124]	; (800400c <TIM_Base_SetConfig+0xf4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d007      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a1e      	ldr	r2, [pc, #120]	; (8004010 <TIM_Base_SetConfig+0xf8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d003      	beq.n	8003fa2 <TIM_Base_SetConfig+0x8a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a1d      	ldr	r2, [pc, #116]	; (8004014 <TIM_Base_SetConfig+0xfc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d108      	bne.n	8003fb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a08      	ldr	r2, [pc, #32]	; (8003ffc <TIM_Base_SetConfig+0xe4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d103      	bne.n	8003fe8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	615a      	str	r2, [r3, #20]
}
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40010000 	.word	0x40010000
 8004000:	40000400 	.word	0x40000400
 8004004:	40000800 	.word	0x40000800
 8004008:	40000c00 	.word	0x40000c00
 800400c:	40014000 	.word	0x40014000
 8004010:	40014400 	.word	0x40014400
 8004014:	40014800 	.word	0x40014800

08004018 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	f023 0201 	bic.w	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0303 	bic.w	r3, r3, #3
 800404e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f023 0302 	bic.w	r3, r3, #2
 8004060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a1c      	ldr	r2, [pc, #112]	; (80040e0 <TIM_OC1_SetConfig+0xc8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d10c      	bne.n	800408e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0308 	bic.w	r3, r3, #8
 800407a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f023 0304 	bic.w	r3, r3, #4
 800408c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a13      	ldr	r2, [pc, #76]	; (80040e0 <TIM_OC1_SetConfig+0xc8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d111      	bne.n	80040ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800409c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	621a      	str	r2, [r3, #32]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40010000 	.word	0x40010000

080040e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f023 0210 	bic.w	r2, r3, #16
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f023 0320 	bic.w	r3, r3, #32
 800412e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a1e      	ldr	r2, [pc, #120]	; (80041b8 <TIM_OC2_SetConfig+0xd4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d10d      	bne.n	8004160 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800414a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800415e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <TIM_OC2_SetConfig+0xd4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d113      	bne.n	8004190 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800416e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004176:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40010000 	.word	0x40010000

080041bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0303 	bic.w	r3, r3, #3
 80041f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a1d      	ldr	r2, [pc, #116]	; (800428c <TIM_OC3_SetConfig+0xd0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d10d      	bne.n	8004236 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004220:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a14      	ldr	r2, [pc, #80]	; (800428c <TIM_OC3_SetConfig+0xd0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d113      	bne.n	8004266 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800424c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	621a      	str	r2, [r3, #32]
}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	40010000 	.word	0x40010000

08004290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	031b      	lsls	r3, r3, #12
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a10      	ldr	r2, [pc, #64]	; (800432c <TIM_OC4_SetConfig+0x9c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d109      	bne.n	8004304 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	019b      	lsls	r3, r3, #6
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40010000 	.word	0x40010000

08004330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f023 0201 	bic.w	r2, r3, #1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800435a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f023 030a 	bic.w	r3, r3, #10
 800436c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800438e:	b480      	push	{r7}
 8004390:	b087      	sub	sp, #28
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	f023 0210 	bic.w	r2, r3, #16
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	031b      	lsls	r3, r3, #12
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	621a      	str	r2, [r3, #32]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004404:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	f043 0307 	orr.w	r3, r3, #7
 8004410:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	609a      	str	r2, [r3, #8]
}
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
 8004430:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800443e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	021a      	lsls	r2, r3, #8
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	431a      	orrs	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4313      	orrs	r3, r2
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	609a      	str	r2, [r3, #8]
}
 8004458:	bf00      	nop
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	2201      	movs	r2, #1
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a1a      	ldr	r2, [r3, #32]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	43db      	mvns	r3, r3
 8004486:	401a      	ands	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a1a      	ldr	r2, [r3, #32]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	fa01 f303 	lsl.w	r3, r1, r3
 800449c:	431a      	orrs	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	621a      	str	r2, [r3, #32]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
	...

080044b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e050      	b.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1c      	ldr	r2, [pc, #112]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d018      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004514:	d013      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a18      	ldr	r2, [pc, #96]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00e      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a16      	ldr	r2, [pc, #88]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d009      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a15      	ldr	r2, [pc, #84]	; (8004584 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d004      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a13      	ldr	r2, [pc, #76]	; (8004588 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d10c      	bne.n	8004558 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004544:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	4313      	orrs	r3, r2
 800454e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40010000 	.word	0x40010000
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40014000 	.word	0x40014000

0800458c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e03f      	b.n	8004646 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fc fff0 	bl	80015c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2224      	movs	r2, #36	; 0x24
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fd51 	bl	80050a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800460c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800461c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800462c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	4613      	mov	r3, r2
 800465c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b20      	cmp	r3, #32
 8004668:	d153      	bne.n	8004712 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <HAL_UART_Transmit_DMA+0x26>
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e04c      	b.n	8004714 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_UART_Transmit_DMA+0x38>
 8004684:	2302      	movs	r3, #2
 8004686:	e045      	b.n	8004714 <HAL_UART_Transmit_DMA+0xc4>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	88fa      	ldrh	r2, [r7, #6]
 800469a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2221      	movs	r2, #33	; 0x21
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b4:	4a19      	ldr	r2, [pc, #100]	; (800471c <HAL_UART_Transmit_DMA+0xcc>)
 80046b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046bc:	4a18      	ldr	r2, [pc, #96]	; (8004720 <HAL_UART_Transmit_DMA+0xd0>)
 80046be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c4:	4a17      	ldr	r2, [pc, #92]	; (8004724 <HAL_UART_Transmit_DMA+0xd4>)
 80046c6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046cc:	2200      	movs	r2, #0
 80046ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80046d0:	f107 0308 	add.w	r3, r7, #8
 80046d4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	6819      	ldr	r1, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3304      	adds	r3, #4
 80046e4:	461a      	mov	r2, r3
 80046e6:	88fb      	ldrh	r3, [r7, #6]
 80046e8:	f7fd fb4c 	bl	8001d84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046f4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695a      	ldr	r2, [r3, #20]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800470c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	e000      	b.n	8004714 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004712:	2302      	movs	r3, #2
  }
}
 8004714:	4618      	mov	r0, r3
 8004716:	3718      	adds	r7, #24
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	08004b5d 	.word	0x08004b5d
 8004720:	08004baf 	.word	0x08004baf
 8004724:	08004c97 	.word	0x08004c97

08004728 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	4613      	mov	r3, r2
 8004734:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b20      	cmp	r3, #32
 8004740:	d11d      	bne.n	800477e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <HAL_UART_Receive_DMA+0x26>
 8004748:	88fb      	ldrh	r3, [r7, #6]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e016      	b.n	8004780 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_UART_Receive_DMA+0x38>
 800475c:	2302      	movs	r3, #2
 800475e:	e00f      	b.n	8004780 <HAL_UART_Receive_DMA+0x58>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	461a      	mov	r2, r3
 8004772:	68b9      	ldr	r1, [r7, #8]
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 fad9 	bl	8004d2c <UART_Start_Receive_DMA>
 800477a:	4603      	mov	r3, r0
 800477c:	e000      	b.n	8004780 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800477e:	2302      	movs	r3, #2
  }
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	; 0x28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10d      	bne.n	80047da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_UART_IRQHandler+0x52>
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fbcd 	bl	8004f72 <UART_Receive_IT>
      return;
 80047d8:	e17c      	b.n	8004ad4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 80b1 	beq.w	8004944 <HAL_UART_IRQHandler+0x1bc>
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d105      	bne.n	80047f8 <HAL_UART_IRQHandler+0x70>
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 80a6 	beq.w	8004944 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_UART_IRQHandler+0x90>
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	f043 0201 	orr.w	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_UART_IRQHandler+0xb0>
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	f043 0202 	orr.w	r2, r3, #2
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <HAL_UART_IRQHandler+0xd0>
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	f043 0204 	orr.w	r2, r3, #4
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00f      	beq.n	8004882 <HAL_UART_IRQHandler+0xfa>
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b00      	cmp	r3, #0
 800486a:	d104      	bne.n	8004876 <HAL_UART_IRQHandler+0xee>
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d005      	beq.n	8004882 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f043 0208 	orr.w	r2, r3, #8
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 811f 	beq.w	8004aca <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <HAL_UART_IRQHandler+0x11e>
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fb66 	bl	8004f72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b0:	2b40      	cmp	r3, #64	; 0x40
 80048b2:	bf0c      	ite	eq
 80048b4:	2301      	moveq	r3, #1
 80048b6:	2300      	movne	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d102      	bne.n	80048ce <HAL_UART_IRQHandler+0x146>
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d031      	beq.n	8004932 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 faa6 	bl	8004e20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048de:	2b40      	cmp	r3, #64	; 0x40
 80048e0:	d123      	bne.n	800492a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695a      	ldr	r2, [r3, #20]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d013      	beq.n	8004922 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	4a77      	ldr	r2, [pc, #476]	; (8004adc <HAL_UART_IRQHandler+0x354>)
 8004900:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	4618      	mov	r0, r3
 8004908:	f7fd fb04 	bl	8001f14 <HAL_DMA_Abort_IT>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d016      	beq.n	8004940 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800491c:	4610      	mov	r0, r2
 800491e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004920:	e00e      	b.n	8004940 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f904 	bl	8004b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004928:	e00a      	b.n	8004940 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f900 	bl	8004b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004930:	e006      	b.n	8004940 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f8fc 	bl	8004b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800493e:	e0c4      	b.n	8004aca <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004940:	bf00      	nop
    return;
 8004942:	e0c2      	b.n	8004aca <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004948:	2b01      	cmp	r3, #1
 800494a:	f040 80a2 	bne.w	8004a92 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 809c 	beq.w	8004a92 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 8096 	beq.w	8004a92 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004966:	2300      	movs	r3, #0
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004986:	2b40      	cmp	r3, #64	; 0x40
 8004988:	d14f      	bne.n	8004a2a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004994:	8a3b      	ldrh	r3, [r7, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 8099 	beq.w	8004ace <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049a0:	8a3a      	ldrh	r2, [r7, #16]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	f080 8093 	bcs.w	8004ace <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	8a3a      	ldrh	r2, [r7, #16]
 80049ac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b8:	d02b      	beq.n	8004a12 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049c8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695a      	ldr	r2, [r3, #20]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0201 	bic.w	r2, r2, #1
 80049d8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695a      	ldr	r2, [r3, #20]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049e8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0210 	bic.w	r2, r2, #16
 8004a06:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fd fa11 	bl	8001e34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	4619      	mov	r1, r3
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f88e 	bl	8004b44 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004a28:	e051      	b.n	8004ace <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d047      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004a42:	8a7b      	ldrh	r3, [r7, #18]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d044      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a56:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695a      	ldr	r2, [r3, #20]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0201 	bic.w	r2, r2, #1
 8004a66:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0210 	bic.w	r2, r2, #16
 8004a84:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a86:	8a7b      	ldrh	r3, [r7, #18]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f85a 	bl	8004b44 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004a90:	e01f      	b.n	8004ad2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d008      	beq.n	8004aae <HAL_UART_IRQHandler+0x326>
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f9fb 	bl	8004ea2 <UART_Transmit_IT>
    return;
 8004aac:	e012      	b.n	8004ad4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00d      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x34c>
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d008      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fa3d 	bl	8004f42 <UART_EndTransmit_IT>
    return;
 8004ac8:	e004      	b.n	8004ad4 <HAL_UART_IRQHandler+0x34c>
    return;
 8004aca:	bf00      	nop
 8004acc:	e002      	b.n	8004ad4 <HAL_UART_IRQHandler+0x34c>
      return;
 8004ace:	bf00      	nop
 8004ad0:	e000      	b.n	8004ad4 <HAL_UART_IRQHandler+0x34c>
      return;
 8004ad2:	bf00      	nop
  }
}
 8004ad4:	3728      	adds	r7, #40	; 0x28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	08004e7b 	.word	0x08004e7b

08004ae0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d113      	bne.n	8004ba0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695a      	ldr	r2, [r3, #20]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b8c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b9c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b9e:	e002      	b.n	8004ba6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f7ff ff9d 	bl	8004ae0 <HAL_UART_TxCpltCallback>
}
 8004ba6:	bf00      	nop
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f7ff ff99 	bl	8004af4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b084      	sub	sp, #16
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d12a      	bne.n	8004c3c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bfa:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695a      	ldr	r2, [r3, #20]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695a      	ldr	r2, [r3, #20]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c1a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d107      	bne.n	8004c3c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0210 	bic.w	r2, r2, #16
 8004c3a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d106      	bne.n	8004c52 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c48:	4619      	mov	r1, r3
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f7ff ff7a 	bl	8004b44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c50:	e002      	b.n	8004c58 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff ff58 	bl	8004b08 <HAL_UART_RxCpltCallback>
}
 8004c58:	bf00      	nop
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d108      	bne.n	8004c88 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c7a:	085b      	lsrs	r3, r3, #1
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	4619      	mov	r1, r3
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7ff ff5f 	bl	8004b44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c86:	e002      	b.n	8004c8e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f7ff ff47 	bl	8004b1c <HAL_UART_RxHalfCpltCallback>
}
 8004c8e:	bf00      	nop
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb2:	2b80      	cmp	r3, #128	; 0x80
 8004cb4:	bf0c      	ite	eq
 8004cb6:	2301      	moveq	r3, #1
 8004cb8:	2300      	movne	r3, #0
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b21      	cmp	r3, #33	; 0x21
 8004cc8:	d108      	bne.n	8004cdc <UART_DMAError+0x46>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004cd6:	68b8      	ldr	r0, [r7, #8]
 8004cd8:	f000 f88c 	bl	8004df4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	bf0c      	ite	eq
 8004cea:	2301      	moveq	r3, #1
 8004cec:	2300      	movne	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b22      	cmp	r3, #34	; 0x22
 8004cfc:	d108      	bne.n	8004d10 <UART_DMAError+0x7a>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2200      	movs	r2, #0
 8004d08:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004d0a:	68b8      	ldr	r0, [r7, #8]
 8004d0c:	f000 f888 	bl	8004e20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	f043 0210 	orr.w	r2, r3, #16
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d1c:	68b8      	ldr	r0, [r7, #8]
 8004d1e:	f7ff ff07 	bl	8004b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	4613      	mov	r3, r2
 8004d38:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	88fa      	ldrh	r2, [r7, #6]
 8004d44:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2222      	movs	r2, #34	; 0x22
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	4a23      	ldr	r2, [pc, #140]	; (8004de8 <UART_Start_Receive_DMA+0xbc>)
 8004d5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	4a22      	ldr	r2, [pc, #136]	; (8004dec <UART_Start_Receive_DMA+0xc0>)
 8004d62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	4a21      	ldr	r2, [pc, #132]	; (8004df0 <UART_Start_Receive_DMA+0xc4>)
 8004d6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	2200      	movs	r2, #0
 8004d72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004d74:	f107 0308 	add.w	r3, r7, #8
 8004d78:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3304      	adds	r3, #4
 8004d84:	4619      	mov	r1, r3
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	f7fc fffa 	bl	8001d84 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004d90:	2300      	movs	r3, #0
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	613b      	str	r3, [r7, #16]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dbc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695a      	ldr	r2, [r3, #20]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f042 0201 	orr.w	r2, r2, #1
 8004dcc:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695a      	ldr	r2, [r3, #20]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ddc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	08004bcb 	.word	0x08004bcb
 8004dec:	08004c61 	.word	0x08004c61
 8004df0:	08004c97 	.word	0x08004c97

08004df4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004e0a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e36:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695a      	ldr	r2, [r3, #20]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0201 	bic.w	r2, r2, #1
 8004e46:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d107      	bne.n	8004e60 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0210 	bic.w	r2, r2, #16
 8004e5e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f7ff fe4b 	bl	8004b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e9a:	bf00      	nop
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b21      	cmp	r3, #33	; 0x21
 8004eb4:	d13e      	bne.n	8004f34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ebe:	d114      	bne.n	8004eea <UART_Transmit_IT+0x48>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d110      	bne.n	8004eea <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004edc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	1c9a      	adds	r2, r3, #2
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	621a      	str	r2, [r3, #32]
 8004ee8:	e008      	b.n	8004efc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	1c59      	adds	r1, r3, #1
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6211      	str	r1, [r2, #32]
 8004ef4:	781a      	ldrb	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	4619      	mov	r1, r3
 8004f0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10f      	bne.n	8004f30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f30:	2300      	movs	r3, #0
 8004f32:	e000      	b.n	8004f36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f34:	2302      	movs	r3, #2
  }
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff fdbc 	bl	8004ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b084      	sub	sp, #16
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b22      	cmp	r3, #34	; 0x22
 8004f84:	f040 8087 	bne.w	8005096 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f90:	d117      	bne.n	8004fc2 <UART_Receive_IT+0x50>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d113      	bne.n	8004fc2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	1c9a      	adds	r2, r3, #2
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28
 8004fc0:	e026      	b.n	8005010 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd4:	d007      	beq.n	8004fe6 <UART_Receive_IT+0x74>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10a      	bne.n	8004ff4 <UART_Receive_IT+0x82>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	e008      	b.n	8005006 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005000:	b2da      	uxtb	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29b      	uxth	r3, r3
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	4619      	mov	r1, r3
 800501e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005020:	2b00      	cmp	r3, #0
 8005022:	d136      	bne.n	8005092 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0220 	bic.w	r2, r2, #32
 8005032:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005042:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695a      	ldr	r2, [r3, #20]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0201 	bic.w	r2, r2, #1
 8005052:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005060:	2b01      	cmp	r3, #1
 8005062:	d10e      	bne.n	8005082 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0210 	bic.w	r2, r2, #16
 8005072:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005078:	4619      	mov	r1, r3
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff fd62 	bl	8004b44 <HAL_UARTEx_RxEventCallback>
 8005080:	e002      	b.n	8005088 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff fd40 	bl	8004b08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	e002      	b.n	8005098 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	e000      	b.n	8005098 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005096:	2302      	movs	r3, #2
  }
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a4:	b09f      	sub	sp, #124	; 0x7c
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b6:	68d9      	ldr	r1, [r3, #12]
 80050b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	ea40 0301 	orr.w	r3, r0, r1
 80050c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	431a      	orrs	r2, r3
 80050d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80050da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050e4:	f021 010c 	bic.w	r1, r1, #12
 80050e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050ee:	430b      	orrs	r3, r1
 80050f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fe:	6999      	ldr	r1, [r3, #24]
 8005100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	ea40 0301 	orr.w	r3, r0, r1
 8005108:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800510a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	4bc5      	ldr	r3, [pc, #788]	; (8005424 <UART_SetConfig+0x384>)
 8005110:	429a      	cmp	r2, r3
 8005112:	d004      	beq.n	800511e <UART_SetConfig+0x7e>
 8005114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	4bc3      	ldr	r3, [pc, #780]	; (8005428 <UART_SetConfig+0x388>)
 800511a:	429a      	cmp	r2, r3
 800511c:	d103      	bne.n	8005126 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800511e:	f7fe f8eb 	bl	80032f8 <HAL_RCC_GetPCLK2Freq>
 8005122:	6778      	str	r0, [r7, #116]	; 0x74
 8005124:	e002      	b.n	800512c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005126:	f7fe f8d3 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 800512a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800512c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005134:	f040 80b6 	bne.w	80052a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800513a:	461c      	mov	r4, r3
 800513c:	f04f 0500 	mov.w	r5, #0
 8005140:	4622      	mov	r2, r4
 8005142:	462b      	mov	r3, r5
 8005144:	1891      	adds	r1, r2, r2
 8005146:	6439      	str	r1, [r7, #64]	; 0x40
 8005148:	415b      	adcs	r3, r3
 800514a:	647b      	str	r3, [r7, #68]	; 0x44
 800514c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005150:	1912      	adds	r2, r2, r4
 8005152:	eb45 0303 	adc.w	r3, r5, r3
 8005156:	f04f 0000 	mov.w	r0, #0
 800515a:	f04f 0100 	mov.w	r1, #0
 800515e:	00d9      	lsls	r1, r3, #3
 8005160:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005164:	00d0      	lsls	r0, r2, #3
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	1911      	adds	r1, r2, r4
 800516c:	6639      	str	r1, [r7, #96]	; 0x60
 800516e:	416b      	adcs	r3, r5
 8005170:	667b      	str	r3, [r7, #100]	; 0x64
 8005172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	461a      	mov	r2, r3
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	1891      	adds	r1, r2, r2
 800517e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005180:	415b      	adcs	r3, r3
 8005182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005184:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005188:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800518c:	f7fb f824 	bl	80001d8 <__aeabi_uldivmod>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4ba5      	ldr	r3, [pc, #660]	; (800542c <UART_SetConfig+0x38c>)
 8005196:	fba3 2302 	umull	r2, r3, r3, r2
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	011e      	lsls	r6, r3, #4
 800519e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051a0:	461c      	mov	r4, r3
 80051a2:	f04f 0500 	mov.w	r5, #0
 80051a6:	4622      	mov	r2, r4
 80051a8:	462b      	mov	r3, r5
 80051aa:	1891      	adds	r1, r2, r2
 80051ac:	6339      	str	r1, [r7, #48]	; 0x30
 80051ae:	415b      	adcs	r3, r3
 80051b0:	637b      	str	r3, [r7, #52]	; 0x34
 80051b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80051b6:	1912      	adds	r2, r2, r4
 80051b8:	eb45 0303 	adc.w	r3, r5, r3
 80051bc:	f04f 0000 	mov.w	r0, #0
 80051c0:	f04f 0100 	mov.w	r1, #0
 80051c4:	00d9      	lsls	r1, r3, #3
 80051c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051ca:	00d0      	lsls	r0, r2, #3
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	1911      	adds	r1, r2, r4
 80051d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80051d4:	416b      	adcs	r3, r5
 80051d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	461a      	mov	r2, r3
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	1891      	adds	r1, r2, r2
 80051e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80051e6:	415b      	adcs	r3, r3
 80051e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80051f2:	f7fa fff1 	bl	80001d8 <__aeabi_uldivmod>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4b8c      	ldr	r3, [pc, #560]	; (800542c <UART_SetConfig+0x38c>)
 80051fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005200:	095b      	lsrs	r3, r3, #5
 8005202:	2164      	movs	r1, #100	; 0x64
 8005204:	fb01 f303 	mul.w	r3, r1, r3
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	3332      	adds	r3, #50	; 0x32
 800520e:	4a87      	ldr	r2, [pc, #540]	; (800542c <UART_SetConfig+0x38c>)
 8005210:	fba2 2303 	umull	r2, r3, r2, r3
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800521c:	441e      	add	r6, r3
 800521e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005220:	4618      	mov	r0, r3
 8005222:	f04f 0100 	mov.w	r1, #0
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	1894      	adds	r4, r2, r2
 800522c:	623c      	str	r4, [r7, #32]
 800522e:	415b      	adcs	r3, r3
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
 8005232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005236:	1812      	adds	r2, r2, r0
 8005238:	eb41 0303 	adc.w	r3, r1, r3
 800523c:	f04f 0400 	mov.w	r4, #0
 8005240:	f04f 0500 	mov.w	r5, #0
 8005244:	00dd      	lsls	r5, r3, #3
 8005246:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800524a:	00d4      	lsls	r4, r2, #3
 800524c:	4622      	mov	r2, r4
 800524e:	462b      	mov	r3, r5
 8005250:	1814      	adds	r4, r2, r0
 8005252:	653c      	str	r4, [r7, #80]	; 0x50
 8005254:	414b      	adcs	r3, r1
 8005256:	657b      	str	r3, [r7, #84]	; 0x54
 8005258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	461a      	mov	r2, r3
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	1891      	adds	r1, r2, r2
 8005264:	61b9      	str	r1, [r7, #24]
 8005266:	415b      	adcs	r3, r3
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800526e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005272:	f7fa ffb1 	bl	80001d8 <__aeabi_uldivmod>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4b6c      	ldr	r3, [pc, #432]	; (800542c <UART_SetConfig+0x38c>)
 800527c:	fba3 1302 	umull	r1, r3, r3, r2
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	2164      	movs	r1, #100	; 0x64
 8005284:	fb01 f303 	mul.w	r3, r1, r3
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	3332      	adds	r3, #50	; 0x32
 800528e:	4a67      	ldr	r2, [pc, #412]	; (800542c <UART_SetConfig+0x38c>)
 8005290:	fba2 2303 	umull	r2, r3, r2, r3
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	f003 0207 	and.w	r2, r3, #7
 800529a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4432      	add	r2, r6
 80052a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052a2:	e0b9      	b.n	8005418 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a6:	461c      	mov	r4, r3
 80052a8:	f04f 0500 	mov.w	r5, #0
 80052ac:	4622      	mov	r2, r4
 80052ae:	462b      	mov	r3, r5
 80052b0:	1891      	adds	r1, r2, r2
 80052b2:	6139      	str	r1, [r7, #16]
 80052b4:	415b      	adcs	r3, r3
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80052bc:	1912      	adds	r2, r2, r4
 80052be:	eb45 0303 	adc.w	r3, r5, r3
 80052c2:	f04f 0000 	mov.w	r0, #0
 80052c6:	f04f 0100 	mov.w	r1, #0
 80052ca:	00d9      	lsls	r1, r3, #3
 80052cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052d0:	00d0      	lsls	r0, r2, #3
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	eb12 0804 	adds.w	r8, r2, r4
 80052da:	eb43 0905 	adc.w	r9, r3, r5
 80052de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f04f 0100 	mov.w	r1, #0
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	008b      	lsls	r3, r1, #2
 80052f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052f6:	0082      	lsls	r2, r0, #2
 80052f8:	4640      	mov	r0, r8
 80052fa:	4649      	mov	r1, r9
 80052fc:	f7fa ff6c 	bl	80001d8 <__aeabi_uldivmod>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4b49      	ldr	r3, [pc, #292]	; (800542c <UART_SetConfig+0x38c>)
 8005306:	fba3 2302 	umull	r2, r3, r3, r2
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	011e      	lsls	r6, r3, #4
 800530e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005310:	4618      	mov	r0, r3
 8005312:	f04f 0100 	mov.w	r1, #0
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	1894      	adds	r4, r2, r2
 800531c:	60bc      	str	r4, [r7, #8]
 800531e:	415b      	adcs	r3, r3
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005326:	1812      	adds	r2, r2, r0
 8005328:	eb41 0303 	adc.w	r3, r1, r3
 800532c:	f04f 0400 	mov.w	r4, #0
 8005330:	f04f 0500 	mov.w	r5, #0
 8005334:	00dd      	lsls	r5, r3, #3
 8005336:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800533a:	00d4      	lsls	r4, r2, #3
 800533c:	4622      	mov	r2, r4
 800533e:	462b      	mov	r3, r5
 8005340:	1814      	adds	r4, r2, r0
 8005342:	64bc      	str	r4, [r7, #72]	; 0x48
 8005344:	414b      	adcs	r3, r1
 8005346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	4618      	mov	r0, r3
 800534e:	f04f 0100 	mov.w	r1, #0
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	008b      	lsls	r3, r1, #2
 800535c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005360:	0082      	lsls	r2, r0, #2
 8005362:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005366:	f7fa ff37 	bl	80001d8 <__aeabi_uldivmod>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4b2f      	ldr	r3, [pc, #188]	; (800542c <UART_SetConfig+0x38c>)
 8005370:	fba3 1302 	umull	r1, r3, r3, r2
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	2164      	movs	r1, #100	; 0x64
 8005378:	fb01 f303 	mul.w	r3, r1, r3
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	3332      	adds	r3, #50	; 0x32
 8005382:	4a2a      	ldr	r2, [pc, #168]	; (800542c <UART_SetConfig+0x38c>)
 8005384:	fba2 2303 	umull	r2, r3, r2, r3
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800538e:	441e      	add	r6, r3
 8005390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005392:	4618      	mov	r0, r3
 8005394:	f04f 0100 	mov.w	r1, #0
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	1894      	adds	r4, r2, r2
 800539e:	603c      	str	r4, [r7, #0]
 80053a0:	415b      	adcs	r3, r3
 80053a2:	607b      	str	r3, [r7, #4]
 80053a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053a8:	1812      	adds	r2, r2, r0
 80053aa:	eb41 0303 	adc.w	r3, r1, r3
 80053ae:	f04f 0400 	mov.w	r4, #0
 80053b2:	f04f 0500 	mov.w	r5, #0
 80053b6:	00dd      	lsls	r5, r3, #3
 80053b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053bc:	00d4      	lsls	r4, r2, #3
 80053be:	4622      	mov	r2, r4
 80053c0:	462b      	mov	r3, r5
 80053c2:	eb12 0a00 	adds.w	sl, r2, r0
 80053c6:	eb43 0b01 	adc.w	fp, r3, r1
 80053ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f04f 0100 	mov.w	r1, #0
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	008b      	lsls	r3, r1, #2
 80053de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053e2:	0082      	lsls	r2, r0, #2
 80053e4:	4650      	mov	r0, sl
 80053e6:	4659      	mov	r1, fp
 80053e8:	f7fa fef6 	bl	80001d8 <__aeabi_uldivmod>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4b0e      	ldr	r3, [pc, #56]	; (800542c <UART_SetConfig+0x38c>)
 80053f2:	fba3 1302 	umull	r1, r3, r3, r2
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	2164      	movs	r1, #100	; 0x64
 80053fa:	fb01 f303 	mul.w	r3, r1, r3
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	3332      	adds	r3, #50	; 0x32
 8005404:	4a09      	ldr	r2, [pc, #36]	; (800542c <UART_SetConfig+0x38c>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	f003 020f 	and.w	r2, r3, #15
 8005410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4432      	add	r2, r6
 8005416:	609a      	str	r2, [r3, #8]
}
 8005418:	bf00      	nop
 800541a:	377c      	adds	r7, #124	; 0x7c
 800541c:	46bd      	mov	sp, r7
 800541e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005422:	bf00      	nop
 8005424:	40011000 	.word	0x40011000
 8005428:	40011400 	.word	0x40011400
 800542c:	51eb851f 	.word	0x51eb851f

08005430 <calloc>:
 8005430:	4b02      	ldr	r3, [pc, #8]	; (800543c <calloc+0xc>)
 8005432:	460a      	mov	r2, r1
 8005434:	4601      	mov	r1, r0
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	f000 b842 	b.w	80054c0 <_calloc_r>
 800543c:	20000010 	.word	0x20000010

08005440 <__errno>:
 8005440:	4b01      	ldr	r3, [pc, #4]	; (8005448 <__errno+0x8>)
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000010 	.word	0x20000010

0800544c <__libc_init_array>:
 800544c:	b570      	push	{r4, r5, r6, lr}
 800544e:	4d0d      	ldr	r5, [pc, #52]	; (8005484 <__libc_init_array+0x38>)
 8005450:	4c0d      	ldr	r4, [pc, #52]	; (8005488 <__libc_init_array+0x3c>)
 8005452:	1b64      	subs	r4, r4, r5
 8005454:	10a4      	asrs	r4, r4, #2
 8005456:	2600      	movs	r6, #0
 8005458:	42a6      	cmp	r6, r4
 800545a:	d109      	bne.n	8005470 <__libc_init_array+0x24>
 800545c:	4d0b      	ldr	r5, [pc, #44]	; (800548c <__libc_init_array+0x40>)
 800545e:	4c0c      	ldr	r4, [pc, #48]	; (8005490 <__libc_init_array+0x44>)
 8005460:	f000 f8b6 	bl	80055d0 <_init>
 8005464:	1b64      	subs	r4, r4, r5
 8005466:	10a4      	asrs	r4, r4, #2
 8005468:	2600      	movs	r6, #0
 800546a:	42a6      	cmp	r6, r4
 800546c:	d105      	bne.n	800547a <__libc_init_array+0x2e>
 800546e:	bd70      	pop	{r4, r5, r6, pc}
 8005470:	f855 3b04 	ldr.w	r3, [r5], #4
 8005474:	4798      	blx	r3
 8005476:	3601      	adds	r6, #1
 8005478:	e7ee      	b.n	8005458 <__libc_init_array+0xc>
 800547a:	f855 3b04 	ldr.w	r3, [r5], #4
 800547e:	4798      	blx	r3
 8005480:	3601      	adds	r6, #1
 8005482:	e7f2      	b.n	800546a <__libc_init_array+0x1e>
 8005484:	08005614 	.word	0x08005614
 8005488:	08005614 	.word	0x08005614
 800548c:	08005614 	.word	0x08005614
 8005490:	08005618 	.word	0x08005618

08005494 <memcpy>:
 8005494:	440a      	add	r2, r1
 8005496:	4291      	cmp	r1, r2
 8005498:	f100 33ff 	add.w	r3, r0, #4294967295
 800549c:	d100      	bne.n	80054a0 <memcpy+0xc>
 800549e:	4770      	bx	lr
 80054a0:	b510      	push	{r4, lr}
 80054a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054aa:	4291      	cmp	r1, r2
 80054ac:	d1f9      	bne.n	80054a2 <memcpy+0xe>
 80054ae:	bd10      	pop	{r4, pc}

080054b0 <memset>:
 80054b0:	4402      	add	r2, r0
 80054b2:	4603      	mov	r3, r0
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d100      	bne.n	80054ba <memset+0xa>
 80054b8:	4770      	bx	lr
 80054ba:	f803 1b01 	strb.w	r1, [r3], #1
 80054be:	e7f9      	b.n	80054b4 <memset+0x4>

080054c0 <_calloc_r>:
 80054c0:	b513      	push	{r0, r1, r4, lr}
 80054c2:	434a      	muls	r2, r1
 80054c4:	4611      	mov	r1, r2
 80054c6:	9201      	str	r2, [sp, #4]
 80054c8:	f000 f80a 	bl	80054e0 <_malloc_r>
 80054cc:	4604      	mov	r4, r0
 80054ce:	b118      	cbz	r0, 80054d8 <_calloc_r+0x18>
 80054d0:	9a01      	ldr	r2, [sp, #4]
 80054d2:	2100      	movs	r1, #0
 80054d4:	f7ff ffec 	bl	80054b0 <memset>
 80054d8:	4620      	mov	r0, r4
 80054da:	b002      	add	sp, #8
 80054dc:	bd10      	pop	{r4, pc}
	...

080054e0 <_malloc_r>:
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e2:	1ccd      	adds	r5, r1, #3
 80054e4:	f025 0503 	bic.w	r5, r5, #3
 80054e8:	3508      	adds	r5, #8
 80054ea:	2d0c      	cmp	r5, #12
 80054ec:	bf38      	it	cc
 80054ee:	250c      	movcc	r5, #12
 80054f0:	2d00      	cmp	r5, #0
 80054f2:	4606      	mov	r6, r0
 80054f4:	db01      	blt.n	80054fa <_malloc_r+0x1a>
 80054f6:	42a9      	cmp	r1, r5
 80054f8:	d903      	bls.n	8005502 <_malloc_r+0x22>
 80054fa:	230c      	movs	r3, #12
 80054fc:	6033      	str	r3, [r6, #0]
 80054fe:	2000      	movs	r0, #0
 8005500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005502:	f000 f857 	bl	80055b4 <__malloc_lock>
 8005506:	4921      	ldr	r1, [pc, #132]	; (800558c <_malloc_r+0xac>)
 8005508:	680a      	ldr	r2, [r1, #0]
 800550a:	4614      	mov	r4, r2
 800550c:	b99c      	cbnz	r4, 8005536 <_malloc_r+0x56>
 800550e:	4f20      	ldr	r7, [pc, #128]	; (8005590 <_malloc_r+0xb0>)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	b923      	cbnz	r3, 800551e <_malloc_r+0x3e>
 8005514:	4621      	mov	r1, r4
 8005516:	4630      	mov	r0, r6
 8005518:	f000 f83c 	bl	8005594 <_sbrk_r>
 800551c:	6038      	str	r0, [r7, #0]
 800551e:	4629      	mov	r1, r5
 8005520:	4630      	mov	r0, r6
 8005522:	f000 f837 	bl	8005594 <_sbrk_r>
 8005526:	1c43      	adds	r3, r0, #1
 8005528:	d123      	bne.n	8005572 <_malloc_r+0x92>
 800552a:	230c      	movs	r3, #12
 800552c:	6033      	str	r3, [r6, #0]
 800552e:	4630      	mov	r0, r6
 8005530:	f000 f846 	bl	80055c0 <__malloc_unlock>
 8005534:	e7e3      	b.n	80054fe <_malloc_r+0x1e>
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	1b5b      	subs	r3, r3, r5
 800553a:	d417      	bmi.n	800556c <_malloc_r+0x8c>
 800553c:	2b0b      	cmp	r3, #11
 800553e:	d903      	bls.n	8005548 <_malloc_r+0x68>
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	441c      	add	r4, r3
 8005544:	6025      	str	r5, [r4, #0]
 8005546:	e004      	b.n	8005552 <_malloc_r+0x72>
 8005548:	6863      	ldr	r3, [r4, #4]
 800554a:	42a2      	cmp	r2, r4
 800554c:	bf0c      	ite	eq
 800554e:	600b      	streq	r3, [r1, #0]
 8005550:	6053      	strne	r3, [r2, #4]
 8005552:	4630      	mov	r0, r6
 8005554:	f000 f834 	bl	80055c0 <__malloc_unlock>
 8005558:	f104 000b 	add.w	r0, r4, #11
 800555c:	1d23      	adds	r3, r4, #4
 800555e:	f020 0007 	bic.w	r0, r0, #7
 8005562:	1ac2      	subs	r2, r0, r3
 8005564:	d0cc      	beq.n	8005500 <_malloc_r+0x20>
 8005566:	1a1b      	subs	r3, r3, r0
 8005568:	50a3      	str	r3, [r4, r2]
 800556a:	e7c9      	b.n	8005500 <_malloc_r+0x20>
 800556c:	4622      	mov	r2, r4
 800556e:	6864      	ldr	r4, [r4, #4]
 8005570:	e7cc      	b.n	800550c <_malloc_r+0x2c>
 8005572:	1cc4      	adds	r4, r0, #3
 8005574:	f024 0403 	bic.w	r4, r4, #3
 8005578:	42a0      	cmp	r0, r4
 800557a:	d0e3      	beq.n	8005544 <_malloc_r+0x64>
 800557c:	1a21      	subs	r1, r4, r0
 800557e:	4630      	mov	r0, r6
 8005580:	f000 f808 	bl	8005594 <_sbrk_r>
 8005584:	3001      	adds	r0, #1
 8005586:	d1dd      	bne.n	8005544 <_malloc_r+0x64>
 8005588:	e7cf      	b.n	800552a <_malloc_r+0x4a>
 800558a:	bf00      	nop
 800558c:	200000c8 	.word	0x200000c8
 8005590:	200000cc 	.word	0x200000cc

08005594 <_sbrk_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	4d06      	ldr	r5, [pc, #24]	; (80055b0 <_sbrk_r+0x1c>)
 8005598:	2300      	movs	r3, #0
 800559a:	4604      	mov	r4, r0
 800559c:	4608      	mov	r0, r1
 800559e:	602b      	str	r3, [r5, #0]
 80055a0:	f7fc f928 	bl	80017f4 <_sbrk>
 80055a4:	1c43      	adds	r3, r0, #1
 80055a6:	d102      	bne.n	80055ae <_sbrk_r+0x1a>
 80055a8:	682b      	ldr	r3, [r5, #0]
 80055aa:	b103      	cbz	r3, 80055ae <_sbrk_r+0x1a>
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
 80055b0:	2000035c 	.word	0x2000035c

080055b4 <__malloc_lock>:
 80055b4:	4801      	ldr	r0, [pc, #4]	; (80055bc <__malloc_lock+0x8>)
 80055b6:	f000 b809 	b.w	80055cc <__retarget_lock_acquire_recursive>
 80055ba:	bf00      	nop
 80055bc:	20000364 	.word	0x20000364

080055c0 <__malloc_unlock>:
 80055c0:	4801      	ldr	r0, [pc, #4]	; (80055c8 <__malloc_unlock+0x8>)
 80055c2:	f000 b804 	b.w	80055ce <__retarget_lock_release_recursive>
 80055c6:	bf00      	nop
 80055c8:	20000364 	.word	0x20000364

080055cc <__retarget_lock_acquire_recursive>:
 80055cc:	4770      	bx	lr

080055ce <__retarget_lock_release_recursive>:
 80055ce:	4770      	bx	lr

080055d0 <_init>:
 80055d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d2:	bf00      	nop
 80055d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d6:	bc08      	pop	{r3}
 80055d8:	469e      	mov	lr, r3
 80055da:	4770      	bx	lr

080055dc <_fini>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	bf00      	nop
 80055e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e2:	bc08      	pop	{r3}
 80055e4:	469e      	mov	lr, r3
 80055e6:	4770      	bx	lr
